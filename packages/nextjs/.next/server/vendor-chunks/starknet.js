"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/starknet";
exports.ids = ["vendor-chunks/starknet"];
exports.modules = {

/***/ "(ssr)/./node_modules/starknet/dist/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/starknet/dist/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* binding */ Account),\n/* harmony export */   AccountInterface: () => (/* binding */ AccountInterface),\n/* harmony export */   BlockStatus: () => (/* binding */ BlockStatus),\n/* harmony export */   BlockTag: () => (/* binding */ BlockTag),\n/* harmony export */   CairoCustomEnum: () => (/* binding */ CairoCustomEnum),\n/* harmony export */   CairoOption: () => (/* binding */ CairoOption),\n/* harmony export */   CairoOptionVariant: () => (/* binding */ CairoOptionVariant),\n/* harmony export */   CairoResult: () => (/* binding */ CairoResult),\n/* harmony export */   CairoResultVariant: () => (/* binding */ CairoResultVariant),\n/* harmony export */   CallData: () => (/* binding */ CallData),\n/* harmony export */   Contract: () => (/* binding */ Contract),\n/* harmony export */   ContractFactory: () => (/* binding */ ContractFactory),\n/* harmony export */   ContractInterface: () => (/* binding */ ContractInterface),\n/* harmony export */   CustomError: () => (/* binding */ CustomError),\n/* harmony export */   EntryPointType: () => (/* binding */ EntryPointType),\n/* harmony export */   GatewayError: () => (/* binding */ GatewayError),\n/* harmony export */   HttpError: () => (/* binding */ HttpError),\n/* harmony export */   LibraryError: () => (/* binding */ LibraryError),\n/* harmony export */   Litteral: () => (/* binding */ Litteral),\n/* harmony export */   Provider: () => (/* binding */ Provider),\n/* harmony export */   ProviderInterface: () => (/* binding */ ProviderInterface),\n/* harmony export */   RPC: () => (/* binding */ rpc_exports),\n/* harmony export */   RpcProvider: () => (/* binding */ RpcProvider),\n/* harmony export */   SIMULATION_FLAG: () => (/* binding */ SIMULATION_FLAG),\n/* harmony export */   Sequencer: () => (/* binding */ sequencer_exports),\n/* harmony export */   SequencerProvider: () => (/* binding */ SequencerProvider),\n/* harmony export */   Signer: () => (/* binding */ Signer),\n/* harmony export */   SignerInterface: () => (/* binding */ SignerInterface),\n/* harmony export */   TransactionExecutionStatus: () => (/* binding */ TransactionExecutionStatus),\n/* harmony export */   TransactionFinalityStatus: () => (/* binding */ TransactionFinalityStatus),\n/* harmony export */   TransactionStatus: () => (/* binding */ TransactionStatus),\n/* harmony export */   TransactionType: () => (/* binding */ TransactionType),\n/* harmony export */   Uint: () => (/* binding */ Uint),\n/* harmony export */   ValidateType: () => (/* binding */ ValidateType),\n/* harmony export */   addAddressPadding: () => (/* binding */ addAddressPadding),\n/* harmony export */   buildUrl: () => (/* binding */ buildUrl),\n/* harmony export */   cairo: () => (/* binding */ cairo_exports),\n/* harmony export */   constants: () => (/* binding */ constants_exports),\n/* harmony export */   contractClassResponseToLegacyCompiledContract: () => (/* binding */ contractClassResponseToLegacyCompiledContract),\n/* harmony export */   defaultProvider: () => (/* binding */ defaultProvider),\n/* harmony export */   ec: () => (/* binding */ ec_exports),\n/* harmony export */   encode: () => (/* binding */ encode_exports),\n/* harmony export */   events: () => (/* binding */ events_exports),\n/* harmony export */   extractContractHashes: () => (/* binding */ extractContractHashes),\n/* harmony export */   fixProto: () => (/* binding */ fixProto),\n/* harmony export */   fixStack: () => (/* binding */ fixStack),\n/* harmony export */   getCalldata: () => (/* binding */ getCalldata),\n/* harmony export */   getChecksumAddress: () => (/* binding */ getChecksumAddress),\n/* harmony export */   getDefaultNodeUrl: () => (/* binding */ getDefaultNodeUrl),\n/* harmony export */   hash: () => (/* binding */ hash_exports),\n/* harmony export */   isSierra: () => (/* binding */ isSierra),\n/* harmony export */   isUrl: () => (/* binding */ isUrl),\n/* harmony export */   json: () => (/* binding */ json_exports),\n/* harmony export */   merkle: () => (/* binding */ merkle_exports),\n/* harmony export */   num: () => (/* binding */ num_exports),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   parseUDCEvent: () => (/* binding */ parseUDCEvent),\n/* harmony export */   provider: () => (/* binding */ provider_exports),\n/* harmony export */   selector: () => (/* binding */ selector_exports),\n/* harmony export */   shortString: () => (/* binding */ shortString_exports),\n/* harmony export */   splitArgsAndOptions: () => (/* binding */ splitArgsAndOptions),\n/* harmony export */   stark: () => (/* binding */ stark_exports),\n/* harmony export */   starknetId: () => (/* binding */ starknetId_exports),\n/* harmony export */   transaction: () => (/* binding */ transaction_exports),\n/* harmony export */   typedData: () => (/* binding */ typedData_exports),\n/* harmony export */   types: () => (/* binding */ types_exports),\n/* harmony export */   uint256: () => (/* binding */ uint256_exports),\n/* harmony export */   validateAndParseAddress: () => (/* binding */ validateAndParseAddress),\n/* harmony export */   validateChecksumAddress: () => (/* binding */ validateChecksumAddress)\n/* harmony export */ });\n/* harmony import */ var _scure_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @scure/base */ \"(ssr)/./node_modules/@scure/base/lib/esm/index.js\");\n/* harmony import */ var _noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/curves/abstract/utils */ \"(ssr)/./node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _scure_starknet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @scure/starknet */ \"(ssr)/./node_modules/@scure/starknet/lib/esm/index.js\");\n/* harmony import */ var _noble_curves_abstract_weierstrass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/curves/abstract/weierstrass */ \"(ssr)/./node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/* harmony import */ var lossless_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lossless-json */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/index.js\");\n/* harmony import */ var _noble_curves_abstract_poseidon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/curves/abstract/poseidon */ \"(ssr)/./node_modules/@noble/curves/esm/abstract/poseidon.js\");\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! pako */ \"(ssr)/./node_modules/pako/dist/pako.esm.mjs\");\n/* harmony import */ var isomorphic_fetch__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! isomorphic-fetch */ \"(ssr)/./node_modules/isomorphic-fetch/fetch-npm-node.js\");\n/* harmony import */ var url_join__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! url-join */ \"(ssr)/./node_modules/url-join/lib/url-join.js\");\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/constants.ts\nvar constants_exports = {};\n__export(constants_exports, {\n  ADDR_BOUND: () => ADDR_BOUND,\n  API_VERSION: () => API_VERSION,\n  BN_FEE_TRANSACTION_VERSION_1: () => BN_FEE_TRANSACTION_VERSION_1,\n  BN_FEE_TRANSACTION_VERSION_2: () => BN_FEE_TRANSACTION_VERSION_2,\n  BN_TRANSACTION_VERSION_1: () => BN_TRANSACTION_VERSION_1,\n  BN_TRANSACTION_VERSION_2: () => BN_TRANSACTION_VERSION_2,\n  BaseUrl: () => BaseUrl,\n  HEX_STR_TRANSACTION_VERSION_1: () => HEX_STR_TRANSACTION_VERSION_1,\n  HEX_STR_TRANSACTION_VERSION_2: () => HEX_STR_TRANSACTION_VERSION_2,\n  IS_BROWSER: () => IS_BROWSER,\n  MASK_250: () => MASK_250,\n  MAX_STORAGE_ITEM_SIZE: () => MAX_STORAGE_ITEM_SIZE,\n  NetworkName: () => NetworkName,\n  RPC_DEFAULT_VERSION: () => RPC_DEFAULT_VERSION,\n  RPC_NODES: () => RPC_NODES,\n  StarknetChainId: () => StarknetChainId,\n  TEXT_TO_FELT_MAX_LEN: () => TEXT_TO_FELT_MAX_LEN,\n  TransactionHashPrefix: () => TransactionHashPrefix,\n  UDC: () => UDC,\n  ZERO: () => ZERO\n});\n\n// src/utils/encode.ts\nvar encode_exports = {};\n__export(encode_exports, {\n  IS_BROWSER: () => IS_BROWSER,\n  addHexPrefix: () => addHexPrefix,\n  arrayBufferToString: () => arrayBufferToString,\n  atobUniversal: () => atobUniversal,\n  btoaUniversal: () => btoaUniversal,\n  buf2hex: () => buf2hex,\n  calcByteLength: () => calcByteLength,\n  padLeft: () => padLeft,\n  pascalToSnake: () => pascalToSnake,\n  removeHexPrefix: () => removeHexPrefix,\n  sanitizeBytes: () => sanitizeBytes,\n  sanitizeHex: () => sanitizeHex,\n  stringToArrayBuffer: () => stringToArrayBuffer,\n  utf8ToArray: () => utf8ToArray\n});\n\nvar IS_BROWSER = typeof window !== \"undefined\";\nvar STRING_ZERO = \"0\";\nfunction arrayBufferToString(array) {\n  return new Uint8Array(array).reduce((data, byte) => data + String.fromCharCode(byte), \"\");\n}\nfunction utf8ToArray(str) {\n  return new TextEncoder().encode(str);\n}\nfunction stringToArrayBuffer(str) {\n  return utf8ToArray(str);\n}\nfunction atobUniversal(a) {\n  return _scure_base__WEBPACK_IMPORTED_MODULE_0__.base64.decode(a);\n}\nfunction btoaUniversal(b) {\n  return _scure_base__WEBPACK_IMPORTED_MODULE_0__.base64.encode(new Uint8Array(b));\n}\nfunction buf2hex(buffer) {\n  return buffer.reduce((r, x) => r + x.toString(16).padStart(2, \"0\"), \"\");\n}\nfunction removeHexPrefix(hex) {\n  return hex.replace(/^0x/i, \"\");\n}\nfunction addHexPrefix(hex) {\n  return `0x${removeHexPrefix(hex)}`;\n}\nfunction padString(str, length, left, padding = STRING_ZERO) {\n  const diff = length - str.length;\n  let result = str;\n  if (diff > 0) {\n    const pad = padding.repeat(diff);\n    result = left ? pad + str : str + pad;\n  }\n  return result;\n}\nfunction padLeft(str, length, padding = STRING_ZERO) {\n  return padString(str, length, true, padding);\n}\nfunction calcByteLength(str, byteSize = 8) {\n  const { length } = str;\n  const remainder = length % byteSize;\n  return remainder ? (length - remainder) / byteSize * byteSize + byteSize : length;\n}\nfunction sanitizeBytes(str, byteSize = 8, padding = STRING_ZERO) {\n  return padLeft(str, calcByteLength(str, byteSize), padding);\n}\nfunction sanitizeHex(hex) {\n  hex = removeHexPrefix(hex);\n  hex = sanitizeBytes(hex, 2);\n  if (hex) {\n    hex = addHexPrefix(hex);\n  }\n  return hex;\n}\nvar pascalToSnake = (text) => /[a-z]/.test(text) ? text.split(/(?=[A-Z])/).join(\"_\").toUpperCase() : text;\n\n// src/constants.ts\nvar TEXT_TO_FELT_MAX_LEN = 31;\nvar HEX_STR_TRANSACTION_VERSION_1 = \"0x1\";\nvar HEX_STR_TRANSACTION_VERSION_2 = \"0x2\";\nvar BN_TRANSACTION_VERSION_1 = 1n;\nvar BN_TRANSACTION_VERSION_2 = 2n;\nvar BN_FEE_TRANSACTION_VERSION_1 = 2n ** 128n + BN_TRANSACTION_VERSION_1;\nvar BN_FEE_TRANSACTION_VERSION_2 = 2n ** 128n + BN_TRANSACTION_VERSION_2;\nvar ZERO = 0n;\nvar MASK_250 = 2n ** 250n - 1n;\nvar API_VERSION = ZERO;\nvar MAX_STORAGE_ITEM_SIZE = 256n;\nvar ADDR_BOUND = 2n ** 251n - MAX_STORAGE_ITEM_SIZE;\nvar BaseUrl = /* @__PURE__ */ ((BaseUrl2) => {\n  BaseUrl2[\"SN_MAIN\"] = \"https://alpha-mainnet.starknet.io\";\n  BaseUrl2[\"SN_GOERLI\"] = \"https://alpha4.starknet.io\";\n  BaseUrl2[\"SN_SEPOLIA\"] = \"https://alpha-sepolia.starknet.io\";\n  return BaseUrl2;\n})(BaseUrl || {});\nvar NetworkName = /* @__PURE__ */ ((NetworkName2) => {\n  NetworkName2[\"SN_MAIN\"] = \"SN_MAIN\";\n  NetworkName2[\"SN_GOERLI\"] = \"SN_GOERLI\";\n  NetworkName2[\"SN_SEPOLIA\"] = \"SN_SEPOLIA\";\n  return NetworkName2;\n})(NetworkName || {});\nvar StarknetChainId = /* @__PURE__ */ ((StarknetChainId4) => {\n  StarknetChainId4[\"SN_MAIN\"] = \"0x534e5f4d41494e\";\n  StarknetChainId4[\"SN_GOERLI\"] = \"0x534e5f474f45524c49\";\n  StarknetChainId4[\"SN_SEPOLIA\"] = \"0x534e5f5345504f4c4941\";\n  return StarknetChainId4;\n})(StarknetChainId || {});\nvar TransactionHashPrefix = /* @__PURE__ */ ((TransactionHashPrefix2) => {\n  TransactionHashPrefix2[\"DECLARE\"] = \"0x6465636c617265\";\n  TransactionHashPrefix2[\"DEPLOY\"] = \"0x6465706c6f79\";\n  TransactionHashPrefix2[\"DEPLOY_ACCOUNT\"] = \"0x6465706c6f795f6163636f756e74\";\n  TransactionHashPrefix2[\"INVOKE\"] = \"0x696e766f6b65\";\n  TransactionHashPrefix2[\"L1_HANDLER\"] = \"0x6c315f68616e646c6572\";\n  return TransactionHashPrefix2;\n})(TransactionHashPrefix || {});\nvar UDC = {\n  ADDRESS: \"0x041a78e741e5af2fec34b695679bc6891742439f7afb8484ecd7766661ad02bf\",\n  ENTRYPOINT: \"deployContract\"\n};\nvar RPC_DEFAULT_VERSION = \"v0_5\";\nvar RPC_NODES = {\n  SN_GOERLI: [\n    `https://starknet-testnet.public.blastapi.io/rpc/`,\n    `https://free-rpc.nethermind.io/goerli-juno/`\n  ],\n  SN_MAIN: [\n    `https://starknet-mainnet.public.blastapi.io/rpc/`,\n    `https://free-rpc.nethermind.io/mainnet-juno/`\n  ],\n  SN_SEPOLIA: [\n    `https://starknet-sepolia.public.blastapi.io/rpc/`,\n    `https://free-rpc.nethermind.io/sepolia-juno/`\n  ]\n};\n\n// src/types/index.ts\nvar types_exports = {};\n__export(types_exports, {\n  BlockStatus: () => BlockStatus,\n  BlockTag: () => BlockTag,\n  EntryPointType: () => EntryPointType,\n  Litteral: () => Litteral,\n  RPC: () => rpc_exports,\n  SIMULATION_FLAG: () => SIMULATION_FLAG,\n  Sequencer: () => sequencer_exports,\n  TransactionExecutionStatus: () => TransactionExecutionStatus,\n  TransactionFinalityStatus: () => TransactionFinalityStatus,\n  TransactionStatus: () => TransactionStatus,\n  TransactionType: () => TransactionType,\n  Uint: () => Uint,\n  ValidateType: () => ValidateType\n});\n\n// src/types/account.ts\nvar SIMULATION_FLAG = /* @__PURE__ */ ((SIMULATION_FLAG2) => {\n  SIMULATION_FLAG2[\"SKIP_VALIDATE\"] = \"SKIP_VALIDATE\";\n  SIMULATION_FLAG2[\"SKIP_EXECUTE\"] = \"SKIP_EXECUTE\";\n  return SIMULATION_FLAG2;\n})(SIMULATION_FLAG || {});\n\n// src/types/calldata.ts\nvar ValidateType = /* @__PURE__ */ ((ValidateType2) => {\n  ValidateType2[\"DEPLOY\"] = \"DEPLOY\";\n  ValidateType2[\"CALL\"] = \"CALL\";\n  ValidateType2[\"INVOKE\"] = \"INVOKE\";\n  return ValidateType2;\n})(ValidateType || {});\nvar Uint = /* @__PURE__ */ ((Uint2) => {\n  Uint2[\"u8\"] = \"core::integer::u8\";\n  Uint2[\"u16\"] = \"core::integer::u16\";\n  Uint2[\"u32\"] = \"core::integer::u32\";\n  Uint2[\"u64\"] = \"core::integer::u64\";\n  Uint2[\"u128\"] = \"core::integer::u128\";\n  Uint2[\"u256\"] = \"core::integer::u256\";\n  return Uint2;\n})(Uint || {});\nvar Litteral = /* @__PURE__ */ ((Litteral2) => {\n  Litteral2[\"ClassHash\"] = \"core::starknet::class_hash::ClassHash\";\n  Litteral2[\"ContractAddress\"] = \"core::starknet::contract_address::ContractAddress\";\n  return Litteral2;\n})(Litteral || {});\n\n// src/types/lib/contract/index.ts\nvar EntryPointType = /* @__PURE__ */ ((EntryPointType2) => {\n  EntryPointType2[\"EXTERNAL\"] = \"EXTERNAL\";\n  EntryPointType2[\"L1_HANDLER\"] = \"L1_HANDLER\";\n  EntryPointType2[\"CONSTRUCTOR\"] = \"CONSTRUCTOR\";\n  return EntryPointType2;\n})(EntryPointType || {});\n\n// src/types/lib/index.ts\nvar TransactionType = /* @__PURE__ */ ((TransactionType2) => {\n  TransactionType2[\"DECLARE\"] = \"DECLARE\";\n  TransactionType2[\"DEPLOY\"] = \"DEPLOY\";\n  TransactionType2[\"DEPLOY_ACCOUNT\"] = \"DEPLOY_ACCOUNT\";\n  TransactionType2[\"INVOKE\"] = \"INVOKE_FUNCTION\";\n  return TransactionType2;\n})(TransactionType || {});\nvar TransactionStatus = /* @__PURE__ */ ((TransactionStatus2) => {\n  TransactionStatus2[\"NOT_RECEIVED\"] = \"NOT_RECEIVED\";\n  TransactionStatus2[\"RECEIVED\"] = \"RECEIVED\";\n  TransactionStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  TransactionStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  TransactionStatus2[\"REJECTED\"] = \"REJECTED\";\n  TransactionStatus2[\"REVERTED\"] = \"REVERTED\";\n  return TransactionStatus2;\n})(TransactionStatus || {});\nvar TransactionFinalityStatus = /* @__PURE__ */ ((TransactionFinalityStatus2) => {\n  TransactionFinalityStatus2[\"NOT_RECEIVED\"] = \"NOT_RECEIVED\";\n  TransactionFinalityStatus2[\"RECEIVED\"] = \"RECEIVED\";\n  TransactionFinalityStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  TransactionFinalityStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  return TransactionFinalityStatus2;\n})(TransactionFinalityStatus || {});\nvar TransactionExecutionStatus = /* @__PURE__ */ ((TransactionExecutionStatus2) => {\n  TransactionExecutionStatus2[\"REJECTED\"] = \"REJECTED\";\n  TransactionExecutionStatus2[\"REVERTED\"] = \"REVERTED\";\n  TransactionExecutionStatus2[\"SUCCEEDED\"] = \"SUCCEEDED\";\n  return TransactionExecutionStatus2;\n})(TransactionExecutionStatus || {});\nvar BlockStatus = /* @__PURE__ */ ((BlockStatus2) => {\n  BlockStatus2[\"PENDING\"] = \"PENDING\";\n  BlockStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  BlockStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  BlockStatus2[\"REJECTED\"] = \"REJECTED\";\n  return BlockStatus2;\n})(BlockStatus || {});\nvar BlockTag = /* @__PURE__ */ ((BlockTag2) => {\n  BlockTag2[\"pending\"] = \"pending\";\n  BlockTag2[\"latest\"] = \"latest\";\n  return BlockTag2;\n})(BlockTag || {});\n\n// src/types/api/rpc.ts\nvar rpc_exports = {};\n__export(rpc_exports, {\n  EBlockTag: () => EBlockTag,\n  EDataAvailabilityMode: () => EDataAvailabilityMode,\n  ESimulationFlag: () => ESimulationFlag,\n  ETransactionExecutionStatus: () => ETransactionExecutionStatus,\n  ETransactionFinalityStatus: () => ETransactionFinalityStatus,\n  ETransactionStatus: () => ETransactionStatus,\n  ETransactionType: () => ETransactionType,\n  Errors: () => errors_exports,\n  JRPC: () => jsonrpc_exports,\n  SPEC: () => components_exports\n});\n\n// src/types/api/jsonrpc/index.ts\nvar jsonrpc_exports = {};\n\n// src/types/api/rpcspec/errors.ts\nvar errors_exports = {};\n\n// src/types/api/rpcspec/components.ts\nvar components_exports = {};\n\n// src/types/api/rpcspec/nonspec.ts\nvar ETransactionType = /* @__PURE__ */ ((ETransactionType2) => {\n  ETransactionType2[\"DECLARE\"] = \"DECLARE\";\n  ETransactionType2[\"DEPLOY\"] = \"DEPLOY\";\n  ETransactionType2[\"DEPLOY_ACCOUNT\"] = \"DEPLOY_ACCOUNT\";\n  ETransactionType2[\"INVOKE\"] = \"INVOKE\";\n  ETransactionType2[\"L1_HANDLER\"] = \"L1_HANDLER\";\n  return ETransactionType2;\n})(ETransactionType || {});\nvar ESimulationFlag = /* @__PURE__ */ ((ESimulationFlag2) => {\n  ESimulationFlag2[\"SKIP_VALIDATE\"] = \"SKIP_VALIDATE\";\n  ESimulationFlag2[\"SKIP_FEE_CHARGE\"] = \"SKIP_FEE_CHARGE\";\n  return ESimulationFlag2;\n})(ESimulationFlag || {});\nvar ETransactionStatus = /* @__PURE__ */ ((ETransactionStatus2) => {\n  ETransactionStatus2[\"RECEIVED\"] = \"RECEIVED\";\n  ETransactionStatus2[\"REJECTED\"] = \"REJECTED\";\n  ETransactionStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  ETransactionStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  return ETransactionStatus2;\n})(ETransactionStatus || {});\nvar ETransactionFinalityStatus = /* @__PURE__ */ ((ETransactionFinalityStatus2) => {\n  ETransactionFinalityStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  ETransactionFinalityStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  return ETransactionFinalityStatus2;\n})(ETransactionFinalityStatus || {});\nvar ETransactionExecutionStatus = /* @__PURE__ */ ((ETransactionExecutionStatus2) => {\n  ETransactionExecutionStatus2[\"SUCCEEDED\"] = \"SUCCEEDED\";\n  ETransactionExecutionStatus2[\"REVERTED\"] = \"REVERTED\";\n  return ETransactionExecutionStatus2;\n})(ETransactionExecutionStatus || {});\nvar EBlockTag = /* @__PURE__ */ ((EBlockTag2) => {\n  EBlockTag2[\"LATEST\"] = \"latest\";\n  EBlockTag2[\"PENDING\"] = \"pending\";\n  return EBlockTag2;\n})(EBlockTag || {});\nvar EDataAvailabilityMode = /* @__PURE__ */ ((EDataAvailabilityMode2) => {\n  EDataAvailabilityMode2[\"L1\"] = \"L1\";\n  EDataAvailabilityMode2[\"L2\"] = \"L2\";\n  return EDataAvailabilityMode2;\n})(EDataAvailabilityMode || {});\n\n// src/types/api/sequencer.ts\nvar sequencer_exports = {};\n\n// src/utils/assert.ts\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || \"Assertion failure\");\n  }\n}\n\n// src/utils/num.ts\nvar num_exports = {};\n__export(num_exports, {\n  assertInRange: () => assertInRange,\n  bigNumberishArrayToDecimalStringArray: () => bigNumberishArrayToDecimalStringArray,\n  bigNumberishArrayToHexadecimalStringArray: () => bigNumberishArrayToHexadecimalStringArray,\n  cleanHex: () => cleanHex,\n  getDecimalString: () => getDecimalString,\n  getHexString: () => getHexString,\n  getHexStringArray: () => getHexStringArray,\n  hexToBytes: () => hexToBytes,\n  hexToDecimalString: () => hexToDecimalString,\n  isBigInt: () => isBigInt,\n  isHex: () => isHex,\n  isStringWholeNumber: () => isStringWholeNumber,\n  toBigInt: () => toBigInt,\n  toCairoBool: () => toCairoBool,\n  toHex: () => toHex,\n  toHexString: () => toHexString,\n  toStorageKey: () => toStorageKey\n});\n\nfunction isHex(hex) {\n  return /^0x[0-9a-f]*$/i.test(hex);\n}\nfunction toBigInt(value) {\n  return BigInt(value);\n}\nfunction isBigInt(value) {\n  return typeof value === \"bigint\";\n}\nfunction toHex(number2) {\n  return addHexPrefix(toBigInt(number2).toString(16));\n}\nvar toHexString = toHex;\nfunction toStorageKey(number2) {\n  const res = addHexPrefix(toBigInt(number2).toString(16).padStart(64, \"0\"));\n  return res;\n}\nfunction hexToDecimalString(hex) {\n  return BigInt(addHexPrefix(hex)).toString(10);\n}\nvar cleanHex = (hex) => hex.toLowerCase().replace(/^(0x)0+/, \"$1\");\nfunction assertInRange(input, lowerBound, upperBound, inputName = \"\") {\n  const messageSuffix = inputName === \"\" ? \"invalid length\" : `invalid ${inputName} length`;\n  const inputBigInt = BigInt(input);\n  const lowerBoundBigInt = BigInt(lowerBound);\n  const upperBoundBigInt = BigInt(upperBound);\n  assert(\n    inputBigInt >= lowerBoundBigInt && inputBigInt <= upperBoundBigInt,\n    `Message not signable, ${messageSuffix}.`\n  );\n}\nfunction bigNumberishArrayToDecimalStringArray(rawCalldata) {\n  return rawCalldata.map((x) => toBigInt(x).toString(10));\n}\nfunction bigNumberishArrayToHexadecimalStringArray(rawCalldata) {\n  return rawCalldata.map((x) => toHex(x));\n}\nvar isStringWholeNumber = (value) => /^\\d+$/.test(value);\nfunction getDecimalString(value) {\n  if (isHex(value)) {\n    return hexToDecimalString(value);\n  }\n  if (isStringWholeNumber(value)) {\n    return value;\n  }\n  throw new Error(`${value} need to be hex-string or whole-number-string`);\n}\nfunction getHexString(value) {\n  if (isHex(value)) {\n    return value;\n  }\n  if (isStringWholeNumber(value)) {\n    return toHexString(value);\n  }\n  throw new Error(`${value} need to be hex-string or whole-number-string`);\n}\nfunction getHexStringArray(value) {\n  return value.map((el) => getHexString(el));\n}\nvar toCairoBool = (value) => (+value).toString();\nfunction hexToBytes(value) {\n  if (!isHex(value))\n    throw new Error(`${value} need to be a hex-string`);\n  let adaptedValue = removeHexPrefix(value);\n  if (adaptedValue.length % 2 !== 0) {\n    adaptedValue = `0${adaptedValue}`;\n  }\n  return (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(adaptedValue);\n}\n\n// src/utils/selector.ts\nvar selector_exports = {};\n__export(selector_exports, {\n  getSelector: () => getSelector,\n  getSelectorFromName: () => getSelectorFromName,\n  keccakBn: () => keccakBn,\n  starknetKeccak: () => starknetKeccak\n});\n\nfunction keccakBn(value) {\n  const hexWithoutPrefix = removeHexPrefix(toHex(BigInt(value)));\n  const evenHex = hexWithoutPrefix.length % 2 === 0 ? hexWithoutPrefix : `0${hexWithoutPrefix}`;\n  return addHexPrefix((0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.keccak)(hexToBytes(addHexPrefix(evenHex))).toString(16));\n}\nfunction keccakHex(str) {\n  return addHexPrefix((0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.keccak)(utf8ToArray(str)).toString(16));\n}\nfunction starknetKeccak(str) {\n  const hash = BigInt(keccakHex(str));\n  return hash & MASK_250;\n}\nfunction getSelectorFromName(funcName) {\n  return toHex(starknetKeccak(funcName));\n}\nfunction getSelector(value) {\n  if (isHex(value)) {\n    return value;\n  }\n  if (isStringWholeNumber(value)) {\n    return toHexString(value);\n  }\n  return getSelectorFromName(value);\n}\n\n// src/utils/shortString.ts\nvar shortString_exports = {};\n__export(shortString_exports, {\n  decodeShortString: () => decodeShortString,\n  encodeShortString: () => encodeShortString,\n  isASCII: () => isASCII,\n  isDecimalString: () => isDecimalString,\n  isLongText: () => isLongText,\n  isShortString: () => isShortString,\n  isShortText: () => isShortText,\n  isText: () => isText,\n  splitLongString: () => splitLongString\n});\nfunction isASCII(str) {\n  return /^[\\x00-\\x7F]*$/.test(str);\n}\nfunction isShortString(str) {\n  return str.length <= TEXT_TO_FELT_MAX_LEN;\n}\nfunction isDecimalString(str) {\n  return /^[0-9]*$/i.test(str);\n}\nfunction isText(val) {\n  return typeof val === \"string\" && !isHex(val) && !isStringWholeNumber(val);\n}\nvar isShortText = (val) => isText(val) && isShortString(val);\nvar isLongText = (val) => isText(val) && !isShortString(val);\nfunction splitLongString(longStr) {\n  const regex = RegExp(`[^]{1,${TEXT_TO_FELT_MAX_LEN}}`, \"g\");\n  return longStr.match(regex) || [];\n}\nfunction encodeShortString(str) {\n  if (!isASCII(str))\n    throw new Error(`${str} is not an ASCII string`);\n  if (!isShortString(str))\n    throw new Error(`${str} is too long`);\n  return addHexPrefix(str.replace(/./g, (char) => char.charCodeAt(0).toString(16)));\n}\nfunction decodeShortString(str) {\n  if (!isASCII(str))\n    throw new Error(`${str} is not an ASCII string`);\n  if (isHex(str)) {\n    return removeHexPrefix(str).replace(/.{2}/g, (hex) => String.fromCharCode(parseInt(hex, 16)));\n  }\n  if (isDecimalString(str)) {\n    return decodeShortString(\"0X\".concat(BigInt(str).toString(16)));\n  }\n  throw new Error(`${str} is not Hex or decimal`);\n}\n\n// src/utils/calldata/cairo.ts\nvar cairo_exports = {};\n__export(cairo_exports, {\n  felt: () => felt,\n  getAbiContractVersion: () => getAbiContractVersion,\n  getArrayType: () => getArrayType,\n  isCairo1Abi: () => isCairo1Abi,\n  isCairo1Type: () => isCairo1Type,\n  isLen: () => isLen,\n  isTypeArray: () => isTypeArray,\n  isTypeBool: () => isTypeBool,\n  isTypeContractAddress: () => isTypeContractAddress,\n  isTypeEnum: () => isTypeEnum,\n  isTypeEthAddress: () => isTypeEthAddress,\n  isTypeFelt: () => isTypeFelt,\n  isTypeLitteral: () => isTypeLitteral,\n  isTypeNamedTuple: () => isTypeNamedTuple,\n  isTypeOption: () => isTypeOption,\n  isTypeResult: () => isTypeResult,\n  isTypeStruct: () => isTypeStruct,\n  isTypeTuple: () => isTypeTuple,\n  isTypeUint: () => isTypeUint,\n  isTypeUint256: () => isTypeUint256,\n  tuple: () => tuple,\n  uint256: () => uint256\n});\n\n// src/utils/uint256.ts\nvar uint256_exports = {};\n__export(uint256_exports, {\n  UINT_128_MAX: () => UINT_128_MAX,\n  UINT_256_MAX: () => UINT_256_MAX,\n  bnToUint256: () => bnToUint256,\n  isUint256: () => isUint256,\n  uint256ToBN: () => uint256ToBN\n});\nvar UINT_128_MAX = (1n << 128n) - 1n;\nvar UINT_256_MAX = (1n << 256n) - 1n;\nfunction uint256ToBN(uint2562) {\n  return (toBigInt(uint2562.high) << 128n) + toBigInt(uint2562.low);\n}\nfunction isUint256(bn) {\n  return toBigInt(bn) <= UINT_256_MAX;\n}\nfunction bnToUint256(bn) {\n  const bi = toBigInt(bn);\n  if (!isUint256(bi))\n    throw new Error(\"Number is too large\");\n  return {\n    low: addHexPrefix((bi & UINT_128_MAX).toString(16)),\n    high: addHexPrefix((bi >> 128n).toString(16))\n  };\n}\n\n// src/utils/calldata/cairo.ts\nvar isLen = (name) => /_len$/.test(name);\nvar isTypeFelt = (type) => type === \"felt\" || type === \"core::felt252\";\nvar isTypeArray = (type) => /\\*/.test(type) || type.startsWith(\"core::array::Array::\") || type.startsWith(\"core::array::Span::\");\nvar isTypeTuple = (type) => /^\\(.*\\)$/i.test(type);\nvar isTypeNamedTuple = (type) => /\\(.*\\)/i.test(type) && type.includes(\":\");\nvar isTypeStruct = (type, structs) => type in structs;\nvar isTypeEnum = (type, enums) => type in enums;\nvar isTypeOption = (type) => type.startsWith(\"core::option::Option::\");\nvar isTypeResult = (type) => type.startsWith(\"core::result::Result::\");\nvar isTypeUint = (type) => Object.values(Uint).includes(type);\nvar isTypeLitteral = (type) => Object.values(Litteral).includes(type);\nvar isTypeUint256 = (type) => type === \"core::integer::u256\";\nvar isTypeBool = (type) => type === \"core::bool\";\nvar isTypeContractAddress = (type) => type === \"core::starknet::contract_address::ContractAddress\";\nvar isTypeEthAddress = (type) => type === \"core::starknet::eth_address::EthAddress\";\nvar isCairo1Type = (type) => type.includes(\"::\");\nvar getArrayType = (type) => {\n  if (isCairo1Type(type)) {\n    return type.substring(type.indexOf(\"<\") + 1, type.lastIndexOf(\">\"));\n  }\n  return type.replace(\"*\", \"\");\n};\nfunction isCairo1Abi(abi) {\n  const { cairo } = getAbiContractVersion(abi);\n  if (cairo === void 0) {\n    throw Error(\"Unable to determine Cairo version\");\n  }\n  return cairo === \"1\";\n}\nfunction getAbiContractVersion(abi) {\n  if (abi.find((it) => it.type === \"interface\")) {\n    return { cairo: \"1\", compiler: \"2\" };\n  }\n  const testFunction = abi.find(\n    (it) => it.type === \"function\" && (it.inputs.length || it.outputs.length)\n  );\n  if (!testFunction) {\n    return { cairo: void 0, compiler: void 0 };\n  }\n  const io = testFunction.inputs.length ? testFunction.inputs : testFunction.outputs;\n  if (isCairo1Type(io[0].type)) {\n    return { cairo: \"1\", compiler: \"1\" };\n  }\n  return { cairo: \"0\", compiler: \"0\" };\n}\nvar uint256 = (it) => {\n  const bn = BigInt(it);\n  if (!isUint256(bn))\n    throw new Error(\"Number is too large\");\n  return {\n    // eslint-disable-next-line no-bitwise\n    low: (bn & UINT_128_MAX).toString(10),\n    // eslint-disable-next-line no-bitwise\n    high: (bn >> 128n).toString(10)\n  };\n};\nvar tuple = (...args) => ({ ...args });\nfunction felt(it) {\n  if (isBigInt(it) || typeof it === \"number\" && Number.isInteger(it)) {\n    return it.toString();\n  }\n  if (isText(it)) {\n    if (!isShortString(it))\n      throw new Error(\n        `${it} is a long string > 31 chars, felt can store short strings, split it to array of short strings`\n      );\n    const encoded = encodeShortString(it);\n    return BigInt(encoded).toString();\n  }\n  if (typeof it === \"string\" && isHex(it)) {\n    return BigInt(it).toString();\n  }\n  if (typeof it === \"string\" && isStringWholeNumber(it)) {\n    return it;\n  }\n  if (typeof it === \"boolean\") {\n    return `${+it}`;\n  }\n  throw new Error(`${it} can't be computed by felt()`);\n}\n\n// src/utils/calldata/enum/CairoCustomEnum.ts\nvar CairoCustomEnum = class {\n  /**\n   * @param enumContent an object with the variants as keys and the content as value. Only one content shall be defined.\n   */\n  constructor(enumContent) {\n    const variantsList = Object.values(enumContent);\n    if (variantsList.length === 0) {\n      throw new Error(\"This Enum must have a least 1 variant\");\n    }\n    const nbActiveVariants = variantsList.filter(\n      (content) => typeof content !== \"undefined\"\n    ).length;\n    if (nbActiveVariants !== 1) {\n      throw new Error(\"This Enum must have exactly one active variant\");\n    }\n    this.variant = enumContent;\n  }\n  /**\n   *\n   * @returns the content of the valid variant of a Cairo custom Enum.\n   */\n  unwrap() {\n    const variants = Object.entries(this.variant);\n    const activeVariant = variants.find((item) => typeof item[1] !== \"undefined\");\n    if (typeof activeVariant === \"undefined\") {\n      return void 0;\n    }\n    return activeVariant[1];\n  }\n  /**\n   *\n   * @returns the name of the valid variant of a Cairo custom Enum.\n   */\n  activeVariant() {\n    const variants = Object.entries(this.variant);\n    const activeVariant = variants.find((item) => typeof item[1] !== \"undefined\");\n    if (typeof activeVariant === \"undefined\") {\n      return \"\";\n    }\n    return activeVariant[0];\n  }\n};\n\n// src/utils/calldata/enum/CairoOption.ts\nvar CairoOptionVariant = /* @__PURE__ */ ((CairoOptionVariant2) => {\n  CairoOptionVariant2[CairoOptionVariant2[\"Some\"] = 0] = \"Some\";\n  CairoOptionVariant2[CairoOptionVariant2[\"None\"] = 1] = \"None\";\n  return CairoOptionVariant2;\n})(CairoOptionVariant || {});\nvar CairoOption = class {\n  constructor(variant, someContent) {\n    if (!(variant in CairoOptionVariant)) {\n      throw new Error(\"Wrong variant : should be CairoOptionVariant.Some or .None.\");\n    }\n    if (variant === 0 /* Some */) {\n      if (typeof someContent === \"undefined\") {\n        throw new Error(\n          'The creation of a Cairo Option with \"Some\" variant needs a content as input.'\n        );\n      }\n      this.Some = someContent;\n      this.None = void 0;\n    } else {\n      this.Some = void 0;\n      this.None = true;\n    }\n  }\n  /**\n   *\n   * @returns the content of the valid variant of a Cairo custom Enum.\n   *  If None, returns 'undefined'.\n   */\n  unwrap() {\n    if (this.None) {\n      return void 0;\n    }\n    return this.Some;\n  }\n  /**\n   *\n   * @returns true if the valid variant is 'isSome'.\n   */\n  isSome() {\n    return !(typeof this.Some === \"undefined\");\n  }\n  /**\n   *\n   * @returns true if the valid variant is 'isNone'.\n   */\n  isNone() {\n    return this.None === true;\n  }\n};\n\n// src/utils/calldata/enum/CairoResult.ts\nvar CairoResultVariant = /* @__PURE__ */ ((CairoResultVariant2) => {\n  CairoResultVariant2[CairoResultVariant2[\"Ok\"] = 0] = \"Ok\";\n  CairoResultVariant2[CairoResultVariant2[\"Err\"] = 1] = \"Err\";\n  return CairoResultVariant2;\n})(CairoResultVariant || {});\nvar CairoResult = class {\n  constructor(variant, resultContent) {\n    if (!(variant in CairoResultVariant)) {\n      throw new Error(\"Wrong variant : should be CairoResultVariant.Ok or .Err.\");\n    }\n    if (variant === 0 /* Ok */) {\n      this.Ok = resultContent;\n      this.Err = void 0;\n    } else {\n      this.Ok = void 0;\n      this.Err = resultContent;\n    }\n  }\n  /**\n   *\n   * @returns the content of the valid variant of a Cairo Result.\n   */\n  unwrap() {\n    if (typeof this.Ok !== \"undefined\") {\n      return this.Ok;\n    }\n    if (typeof this.Err !== \"undefined\") {\n      return this.Err;\n    }\n    throw new Error(\"Both Result.Ok and .Err are undefined. Not authorized.\");\n  }\n  /**\n   *\n   * @returns true if the valid variant is 'Ok'.\n   */\n  isOk() {\n    return !(typeof this.Ok === \"undefined\");\n  }\n  /**\n   *\n   * @returns true if the valid variant is 'isErr'.\n   */\n  isErr() {\n    return !(typeof this.Err === \"undefined\");\n  }\n};\n\n// src/utils/calldata/formatter.ts\nvar guard = {\n  isBN: (data, type, key) => {\n    if (!isBigInt(data[key]))\n      throw new Error(\n        `Data and formatter mismatch on ${key}:${type[key]}, expected response data ${key}:${data[key]} to be BN instead it is ${typeof data[key]}`\n      );\n  },\n  unknown: (data, type, key) => {\n    throw new Error(`Unhandled formatter type on ${key}:${type[key]} for data ${key}:${data[key]}`);\n  }\n};\nfunction formatter(data, type, sameType) {\n  return Object.entries(data).reduce((acc, [key, value]) => {\n    const elType = sameType ?? type[key];\n    if (!(key in type) && !sameType) {\n      acc[key] = value;\n      return acc;\n    }\n    if (elType === \"string\") {\n      if (Array.isArray(data[key])) {\n        const arrayStr = formatter(\n          data[key],\n          data[key].map((_) => elType)\n        );\n        acc[key] = Object.values(arrayStr).join(\"\");\n        return acc;\n      }\n      guard.isBN(data, type, key);\n      acc[key] = decodeShortString(value);\n      return acc;\n    }\n    if (elType === \"number\") {\n      guard.isBN(data, type, key);\n      acc[key] = Number(value);\n      return acc;\n    }\n    if (typeof elType === \"function\") {\n      acc[key] = elType(value);\n      return acc;\n    }\n    if (Array.isArray(elType)) {\n      const arrayObj = formatter(data[key], elType, elType[0]);\n      acc[key] = Object.values(arrayObj);\n      return acc;\n    }\n    if (typeof elType === \"object\") {\n      acc[key] = formatter(data[key], elType);\n      return acc;\n    }\n    guard.unknown(data, type, key);\n    return acc;\n  }, {});\n}\n\n// src/utils/calldata/parser/parser-0-1.1.0.ts\nvar AbiParser1 = class {\n  constructor(abi) {\n    this.abi = abi;\n  }\n  /**\n   * abi method inputs length without '_len' inputs\n   * cairo 0 reducer\n   * @param abiMethod FunctionAbi\n   * @returns number\n   */\n  methodInputsLength(abiMethod) {\n    return abiMethod.inputs.reduce((acc, input) => !isLen(input.name) ? acc + 1 : acc, 0);\n  }\n  /**\n   * get method definition from abi\n   * @param name string\n   * @returns FunctionAbi | undefined\n   */\n  getMethod(name) {\n    return this.abi.find((it) => it.name === name);\n  }\n  /**\n   * Get Abi in legacy format\n   * @returns Abi\n   */\n  getLegacyFormat() {\n    return this.abi;\n  }\n};\n\n// src/utils/calldata/parser/parser-2.0.0.ts\nvar AbiParser2 = class {\n  constructor(abi) {\n    this.abi = abi;\n  }\n  /**\n   * abi method inputs length\n   * @param abiMethod FunctionAbi\n   * @returns number\n   */\n  methodInputsLength(abiMethod) {\n    return abiMethod.inputs.length;\n  }\n  /**\n   * get method definition from abi\n   * @param name string\n   * @returns FunctionAbi | undefined\n   */\n  getMethod(name) {\n    const intf = this.abi.find((it) => it.type === \"interface\");\n    return intf.items.find((it) => it.name === name);\n  }\n  /**\n   * Get Abi in legacy format\n   * @returns Abi\n   */\n  getLegacyFormat() {\n    return this.abi.flatMap((e) => {\n      if (e.type === \"interface\") {\n        return e.items;\n      }\n      return e;\n    });\n  }\n};\n\n// src/utils/calldata/parser/index.ts\nfunction createAbiParser(abi) {\n  const version = getAbiVersion(abi);\n  if (version === 0 || version === 1) {\n    return new AbiParser1(abi);\n  }\n  if (version === 2) {\n    return new AbiParser2(abi);\n  }\n  throw Error(`Unsupported ABI version ${version}`);\n}\nfunction getAbiVersion(abi) {\n  if (abi.find((it) => it.type === \"interface\"))\n    return 2;\n  if (isCairo1Abi(abi))\n    return 1;\n  return 0;\n}\nfunction isNoConstructorValid(method, argsCalldata, abiMethod) {\n  return method === \"constructor\" && !abiMethod && !argsCalldata.length;\n}\n\n// src/utils/calldata/tuple.ts\nfunction parseNamedTuple(namedTuple) {\n  const name = namedTuple.substring(0, namedTuple.indexOf(\":\"));\n  const type = namedTuple.substring(name.length + \":\".length);\n  return { name, type };\n}\nfunction parseSubTuple(s) {\n  if (!s.includes(\"(\"))\n    return { subTuple: [], result: s };\n  const subTuple = [];\n  let result = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \"(\") {\n      let counter = 1;\n      const lBracket = i;\n      i++;\n      while (counter) {\n        if (s[i] === \")\")\n          counter--;\n        if (s[i] === \"(\")\n          counter++;\n        i++;\n      }\n      subTuple.push(s.substring(lBracket, i));\n      result += \" \";\n      i--;\n    } else {\n      result += s[i];\n    }\n    i++;\n  }\n  return {\n    subTuple,\n    result\n  };\n}\nfunction extractCairo0Tuple(type) {\n  const cleanType = type.replace(/\\s/g, \"\").slice(1, -1);\n  const { subTuple, result } = parseSubTuple(cleanType);\n  let recomposed = result.split(\",\").map((it) => {\n    return subTuple.length ? it.replace(\" \", subTuple.shift()) : it;\n  });\n  if (isTypeNamedTuple(type)) {\n    recomposed = recomposed.reduce((acc, it) => {\n      return acc.concat(parseNamedTuple(it));\n    }, []);\n  }\n  return recomposed;\n}\nfunction extractCairo1Tuple(type) {\n  const cleanType = type.replace(/\\s/g, \"\").slice(1, -1);\n  const { subTuple, result } = parseSubTuple(cleanType);\n  const recomposed = result.split(\",\").map((it) => {\n    return subTuple.length ? it.replace(\" \", subTuple.shift()) : it;\n  });\n  return recomposed;\n}\nfunction extractTupleMemberTypes(type) {\n  if (isCairo1Type(type)) {\n    return extractCairo1Tuple(type);\n  }\n  return extractCairo0Tuple(type);\n}\n\n// src/utils/calldata/propertyOrder.ts\nfunction errorU256(key) {\n  return Error(\n    `Your object includes the property : ${key}, containing an Uint256 object without the 'low' and 'high' keys.`\n  );\n}\nfunction orderPropsByAbi(unorderedObject, abiOfObject, structs, enums) {\n  const orderInput = (unorderedItem, abiType) => {\n    if (isTypeArray(abiType)) {\n      return orderArray(unorderedItem, abiType);\n    }\n    if (isTypeEnum(abiType, enums)) {\n      const abiObj = enums[abiType];\n      return orderEnum(unorderedItem, abiObj);\n    }\n    if (isTypeTuple(abiType)) {\n      return orderTuple(unorderedItem, abiType);\n    }\n    if (isTypeEthAddress(abiType)) {\n      return unorderedItem;\n    }\n    if (isTypeUint256(abiType)) {\n      const u256 = unorderedItem;\n      if (typeof u256 !== \"object\") {\n        return u256;\n      }\n      if (!(\"low\" in u256 && \"high\" in u256)) {\n        throw errorU256(abiType);\n      }\n      return { low: u256.low, high: u256.high };\n    }\n    if (isTypeStruct(abiType, structs)) {\n      const abiOfStruct = structs[abiType].members;\n      return orderStruct(unorderedItem, abiOfStruct);\n    }\n    return unorderedItem;\n  };\n  const orderStruct = (unorderedObject2, abiObject) => {\n    const orderedObject2 = abiObject.reduce((orderedObject, abiParam) => {\n      const setProperty = (value) => Object.defineProperty(orderedObject, abiParam.name, {\n        enumerable: true,\n        value: value ?? unorderedObject2[abiParam.name]\n      });\n      if (unorderedObject2[abiParam.name] === \"undefined\") {\n        if (isCairo1Type(abiParam.type) || !isLen(abiParam.name)) {\n          throw Error(`Your object needs a property with key : ${abiParam.name} .`);\n        }\n      }\n      setProperty(orderInput(unorderedObject2[abiParam.name], abiParam.type));\n      return orderedObject;\n    }, {});\n    return orderedObject2;\n  };\n  function orderArray(myArray, abiParam) {\n    const typeInArray = getArrayType(abiParam);\n    if (typeof myArray === \"string\") {\n      return myArray;\n    }\n    return myArray.map((myElem) => orderInput(myElem, typeInArray));\n  }\n  function orderTuple(unorderedObject2, abiParam) {\n    const typeList = extractTupleMemberTypes(abiParam);\n    const orderedObject2 = typeList.reduce((orderedObject, abiTypeCairoX, index) => {\n      const myObjKeys = Object.keys(unorderedObject2);\n      const setProperty = (value) => Object.defineProperty(orderedObject, index.toString(), {\n        enumerable: true,\n        value: value ?? unorderedObject2[myObjKeys[index]]\n      });\n      const abiType = abiTypeCairoX?.type ? abiTypeCairoX.type : abiTypeCairoX;\n      setProperty(orderInput(unorderedObject2[myObjKeys[index]], abiType));\n      return orderedObject;\n    }, {});\n    return orderedObject2;\n  }\n  const orderEnum = (unorderedObject2, abiObject) => {\n    if (isTypeResult(abiObject.name)) {\n      const unorderedResult = unorderedObject2;\n      const resultOkType = abiObject.name.substring(\n        abiObject.name.indexOf(\"<\") + 1,\n        abiObject.name.lastIndexOf(\",\")\n      );\n      const resultErrType = abiObject.name.substring(\n        abiObject.name.indexOf(\",\") + 1,\n        abiObject.name.lastIndexOf(\">\")\n      );\n      if (unorderedResult.isOk()) {\n        return new CairoResult(\n          0 /* Ok */,\n          orderInput(unorderedObject2.unwrap(), resultOkType)\n        );\n      }\n      return new CairoResult(\n        1 /* Err */,\n        orderInput(unorderedObject2.unwrap(), resultErrType)\n      );\n    }\n    if (isTypeOption(abiObject.name)) {\n      const unorderedOption = unorderedObject2;\n      const resultSomeType = abiObject.name.substring(\n        abiObject.name.indexOf(\"<\") + 1,\n        abiObject.name.lastIndexOf(\">\")\n      );\n      if (unorderedOption.isSome()) {\n        return new CairoOption(\n          0 /* Some */,\n          orderInput(unorderedOption.unwrap(), resultSomeType)\n        );\n      }\n      return new CairoOption(1 /* None */, {});\n    }\n    const unorderedCustomEnum = unorderedObject2;\n    const variants = Object.entries(unorderedCustomEnum.variant);\n    const newEntries = variants.map((variant) => {\n      if (typeof variant[1] === \"undefined\") {\n        return variant;\n      }\n      const variantType = abiObject.type.substring(\n        abiObject.type.lastIndexOf(\"<\") + 1,\n        abiObject.type.lastIndexOf(\">\")\n      );\n      if (variantType === \"()\") {\n        return variant;\n      }\n      return [variant[0], orderInput(unorderedCustomEnum.unwrap(), variantType)];\n    });\n    return new CairoCustomEnum(Object.fromEntries(newEntries));\n  };\n  const finalOrderedObject = abiOfObject.reduce((orderedObject, abiParam) => {\n    const setProperty = (value) => Object.defineProperty(orderedObject, abiParam.name, {\n      enumerable: true,\n      value\n    });\n    if (isLen(abiParam.name) && !isCairo1Type(abiParam.type)) {\n      return orderedObject;\n    }\n    setProperty(orderInput(unorderedObject[abiParam.name], abiParam.type));\n    return orderedObject;\n  }, {});\n  return finalOrderedObject;\n}\n\n// src/utils/calldata/requestParser.ts\nfunction parseBaseTypes(type, val) {\n  switch (true) {\n    case isTypeUint256(type):\n      const el_uint256 = uint256(val);\n      return [felt(el_uint256.low), felt(el_uint256.high)];\n    default:\n      return felt(val);\n  }\n}\nfunction parseTuple(element, typeStr) {\n  const memberTypes = extractTupleMemberTypes(typeStr);\n  const elements = Object.values(element);\n  if (elements.length !== memberTypes.length) {\n    throw Error(\n      `ParseTuple: provided and expected abi tuple size do not match.\n      provided: ${elements} \n      expected: ${memberTypes}`\n    );\n  }\n  return memberTypes.map((it, dx) => {\n    return {\n      element: elements[dx],\n      type: it.type ?? it\n    };\n  });\n}\nfunction parseUint256(element) {\n  if (typeof element === \"object\") {\n    const { low, high } = element;\n    return [felt(low), felt(high)];\n  }\n  const el_uint256 = uint256(element);\n  return [felt(el_uint256.low), felt(el_uint256.high)];\n}\nfunction parseCalldataValue(element, type, structs, enums) {\n  if (element === void 0) {\n    throw Error(`Missing parameter for type ${type}`);\n  }\n  if (Array.isArray(element)) {\n    const result = [];\n    result.push(felt(element.length));\n    const arrayType = getArrayType(type);\n    return element.reduce((acc, it) => {\n      return acc.concat(parseCalldataValue(it, arrayType, structs, enums));\n    }, result);\n  }\n  if (structs[type] && structs[type].members.length) {\n    if (isTypeUint256(type)) {\n      return parseUint256(element);\n    }\n    if (type === \"core::starknet::eth_address::EthAddress\")\n      return parseBaseTypes(type, element);\n    const { members } = structs[type];\n    const subElement = element;\n    return members.reduce((acc, it) => {\n      return acc.concat(parseCalldataValue(subElement[it.name], it.type, structs, enums));\n    }, []);\n  }\n  if (isTypeTuple(type)) {\n    const tupled = parseTuple(element, type);\n    return tupled.reduce((acc, it) => {\n      const parsedData = parseCalldataValue(it.element, it.type, structs, enums);\n      return acc.concat(parsedData);\n    }, []);\n  }\n  if (isTypeUint256(type)) {\n    return parseUint256(element);\n  }\n  if (isTypeEnum(type, enums)) {\n    const { variants } = enums[type];\n    if (isTypeOption(type)) {\n      const myOption = element;\n      if (myOption.isSome()) {\n        const listTypeVariant2 = variants.find((variant) => variant.name === \"Some\");\n        if (typeof listTypeVariant2 === \"undefined\") {\n          throw Error(`Error in abi : Option has no 'Some' variant.`);\n        }\n        const typeVariantSome = listTypeVariant2.type;\n        if (typeVariantSome === \"()\") {\n          return 0 /* Some */.toString();\n        }\n        const parsedParameter2 = parseCalldataValue(\n          myOption.unwrap(),\n          typeVariantSome,\n          structs,\n          enums\n        );\n        if (Array.isArray(parsedParameter2)) {\n          return [0 /* Some */.toString(), ...parsedParameter2];\n        }\n        return [0 /* Some */.toString(), parsedParameter2];\n      }\n      return 1 /* None */.toString();\n    }\n    if (isTypeResult(type)) {\n      const myResult = element;\n      if (myResult.isOk()) {\n        const listTypeVariant3 = variants.find((variant) => variant.name === \"Ok\");\n        if (typeof listTypeVariant3 === \"undefined\") {\n          throw Error(`Error in abi : Result has no 'Ok' variant.`);\n        }\n        const typeVariantOk = listTypeVariant3.type;\n        if (typeVariantOk === \"()\") {\n          return 0 /* Ok */.toString();\n        }\n        const parsedParameter3 = parseCalldataValue(\n          myResult.unwrap(),\n          typeVariantOk,\n          structs,\n          enums\n        );\n        if (Array.isArray(parsedParameter3)) {\n          return [0 /* Ok */.toString(), ...parsedParameter3];\n        }\n        return [0 /* Ok */.toString(), parsedParameter3];\n      }\n      const listTypeVariant2 = variants.find((variant) => variant.name === \"Err\");\n      if (typeof listTypeVariant2 === \"undefined\") {\n        throw Error(`Error in abi : Result has no 'Err' variant.`);\n      }\n      const typeVariantErr = listTypeVariant2.type;\n      if (typeVariantErr === \"()\") {\n        return 1 /* Err */.toString();\n      }\n      const parsedParameter2 = parseCalldataValue(myResult.unwrap(), typeVariantErr, structs, enums);\n      if (Array.isArray(parsedParameter2)) {\n        return [1 /* Err */.toString(), ...parsedParameter2];\n      }\n      return [1 /* Err */.toString(), parsedParameter2];\n    }\n    const myEnum = element;\n    const activeVariant = myEnum.activeVariant();\n    const listTypeVariant = variants.find((variant) => variant.name === activeVariant);\n    if (typeof listTypeVariant === \"undefined\") {\n      throw Error(`Not find in abi : Enum has no '${activeVariant}' variant.`);\n    }\n    const typeActiveVariant = listTypeVariant.type;\n    const numActiveVariant = variants.findIndex((variant) => variant.name === activeVariant);\n    if (typeActiveVariant === \"()\") {\n      return numActiveVariant.toString();\n    }\n    const parsedParameter = parseCalldataValue(myEnum.unwrap(), typeActiveVariant, structs, enums);\n    if (Array.isArray(parsedParameter)) {\n      return [numActiveVariant.toString(), ...parsedParameter];\n    }\n    return [numActiveVariant.toString(), parsedParameter];\n  }\n  if (typeof element === \"object\") {\n    throw Error(`Parameter ${element} do not align with abi parameter ${type}`);\n  }\n  return parseBaseTypes(type, element);\n}\nfunction parseCalldataField(argsIterator, input, structs, enums) {\n  const { name, type } = input;\n  let { value } = argsIterator.next();\n  switch (true) {\n    case isTypeArray(type):\n      if (!Array.isArray(value) && !isText(value)) {\n        throw Error(`ABI expected parameter ${name} to be array or long string, got ${value}`);\n      }\n      if (typeof value === \"string\") {\n        value = splitLongString(value);\n      }\n      return parseCalldataValue(value, input.type, structs, enums);\n    case type === \"core::starknet::eth_address::EthAddress\":\n      return parseBaseTypes(type, value);\n    case (isTypeStruct(type, structs) || isTypeTuple(type) || isTypeUint256(type)):\n      return parseCalldataValue(value, type, structs, enums);\n    case isTypeEnum(type, enums):\n      return parseCalldataValue(\n        value,\n        type,\n        structs,\n        enums\n      );\n    default:\n      return parseBaseTypes(type, value);\n  }\n}\n\n// src/utils/calldata/responseParser.ts\nfunction parseBaseTypes2(type, it) {\n  let temp;\n  switch (true) {\n    case isTypeBool(type):\n      temp = it.next().value;\n      return Boolean(BigInt(temp));\n    case isTypeUint256(type):\n      const low = it.next().value;\n      const high = it.next().value;\n      return uint256ToBN({ low, high });\n    case type === \"core::starknet::eth_address::EthAddress\":\n      temp = it.next().value;\n      return BigInt(temp);\n    default:\n      temp = it.next().value;\n      return BigInt(temp);\n  }\n}\nfunction parseResponseValue(responseIterator, element, structs, enums) {\n  if (element.type === \"()\") {\n    return {};\n  }\n  if (isTypeUint256(element.type)) {\n    const low = responseIterator.next().value;\n    const high = responseIterator.next().value;\n    return uint256ToBN({ low, high });\n  }\n  if (isTypeArray(element.type)) {\n    const parsedDataArr = [];\n    const el = { name: \"\", type: getArrayType(element.type) };\n    const len = BigInt(responseIterator.next().value);\n    while (parsedDataArr.length < len) {\n      parsedDataArr.push(parseResponseValue(responseIterator, el, structs, enums));\n    }\n    return parsedDataArr;\n  }\n  if (structs && element.type in structs && structs[element.type]) {\n    if (element.type === \"core::starknet::eth_address::EthAddress\") {\n      return parseBaseTypes2(element.type, responseIterator);\n    }\n    return structs[element.type].members.reduce((acc, el) => {\n      acc[el.name] = parseResponseValue(responseIterator, el, structs, enums);\n      return acc;\n    }, {});\n  }\n  if (enums && element.type in enums && enums[element.type]) {\n    const variantNum = Number(responseIterator.next().value);\n    const rawEnum = enums[element.type].variants.reduce((acc, variant, num) => {\n      if (num === variantNum) {\n        acc[variant.name] = parseResponseValue(\n          responseIterator,\n          { name: \"\", type: variant.type },\n          structs,\n          enums\n        );\n        return acc;\n      }\n      acc[variant.name] = void 0;\n      return acc;\n    }, {});\n    if (element.type.startsWith(\"core::option::Option\")) {\n      const content = variantNum === 0 /* Some */ ? rawEnum.Some : void 0;\n      return new CairoOption(variantNum, content);\n    }\n    if (element.type.startsWith(\"core::result::Result\")) {\n      let content;\n      if (variantNum === 0 /* Ok */) {\n        content = rawEnum.Ok;\n      } else {\n        content = rawEnum.Err;\n      }\n      return new CairoResult(variantNum, content);\n    }\n    const customEnum = new CairoCustomEnum(rawEnum);\n    return customEnum;\n  }\n  if (isTypeTuple(element.type)) {\n    const memberTypes = extractTupleMemberTypes(element.type);\n    return memberTypes.reduce((acc, it, idx) => {\n      const name = it?.name ? it.name : idx;\n      const type = it?.type ? it.type : it;\n      const el = { name, type };\n      acc[name] = parseResponseValue(responseIterator, el, structs, enums);\n      return acc;\n    }, {});\n  }\n  if (isTypeArray(element.type)) {\n    const parsedDataArr = [];\n    const el = { name: \"\", type: getArrayType(element.type) };\n    const len = BigInt(responseIterator.next().value);\n    while (parsedDataArr.length < len) {\n      parsedDataArr.push(parseResponseValue(responseIterator, el, structs, enums));\n    }\n    return parsedDataArr;\n  }\n  return parseBaseTypes2(element.type, responseIterator);\n}\nfunction responseParser(responseIterator, output, structs, enums, parsedResult) {\n  const { name, type } = output;\n  let temp;\n  switch (true) {\n    case isLen(name):\n      temp = responseIterator.next().value;\n      return BigInt(temp);\n    case (structs && type in structs || isTypeTuple(type)):\n      return parseResponseValue(responseIterator, output, structs, enums);\n    case (enums && isTypeEnum(type, enums)):\n      return parseResponseValue(responseIterator, output, structs, enums);\n    case isTypeArray(type):\n      if (isCairo1Type(type)) {\n        return parseResponseValue(responseIterator, output, structs, enums);\n      }\n      const parsedDataArr = [];\n      if (parsedResult && parsedResult[`${name}_len`]) {\n        const arrLen = parsedResult[`${name}_len`];\n        while (parsedDataArr.length < arrLen) {\n          parsedDataArr.push(\n            parseResponseValue(\n              responseIterator,\n              { name, type: output.type.replace(\"*\", \"\") },\n              structs,\n              enums\n            )\n          );\n        }\n      }\n      return parsedDataArr;\n    default:\n      return parseBaseTypes2(type, responseIterator);\n  }\n}\n\n// src/utils/calldata/validate.ts\nvar validateFelt = (parameter, input) => {\n  assert(\n    typeof parameter === \"string\" || typeof parameter === \"number\" || typeof parameter === \"bigint\",\n    `Validate: arg ${input.name} should be a felt typed as (String, Number or BigInt)`\n  );\n  if (typeof parameter === \"string\" && !isHex(parameter))\n    return;\n  const param = BigInt(parameter.toString(10));\n  assert(\n    // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1266\n    param >= 0n && param <= 2n ** 252n - 1n,\n    `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`\n  );\n};\nvar validateUint = (parameter, input) => {\n  if (typeof parameter === \"number\") {\n    assert(\n      parameter <= Number.MAX_SAFE_INTEGER,\n      `Validation: Parameter is to large to be typed as Number use (BigInt or String)`\n    );\n  }\n  assert(\n    typeof parameter === \"string\" || typeof parameter === \"number\" || typeof parameter === \"bigint\" || typeof parameter === \"object\" && \"low\" in parameter && \"high\" in parameter,\n    `Validate: arg ${input.name} of cairo type ${input.type} should be type (String, Number or BigInt), but is ${typeof parameter} ${parameter}.`\n  );\n  const param = typeof parameter === \"object\" ? uint256ToBN(parameter) : toBigInt(parameter);\n  switch (input.type) {\n    case \"core::integer::u8\" /* u8 */:\n      assert(\n        param >= 0n && param <= 255n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0 - 255]`\n      );\n      break;\n    case \"core::integer::u16\" /* u16 */:\n      assert(\n        param >= 0n && param <= 65535n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 65535]`\n      );\n      break;\n    case \"core::integer::u32\" /* u32 */:\n      assert(\n        param >= 0n && param <= 4294967295n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 4294967295]`\n      );\n      break;\n    case \"core::integer::u64\" /* u64 */:\n      assert(\n        param >= 0n && param <= 2n ** 64n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^64-1]`\n      );\n      break;\n    case \"core::integer::u128\" /* u128 */:\n      assert(\n        param >= 0n && param <= 2n ** 128n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^128-1]`\n      );\n      break;\n    case \"core::integer::u256\" /* u256 */:\n      assert(\n        param >= 0n && param <= 2n ** 256n - 1n,\n        `Validate: arg ${input.name} is ${input.type} 0 - 2^256-1`\n      );\n      break;\n    case \"core::starknet::class_hash::ClassHash\" /* ClassHash */:\n      assert(\n        // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1670\n        param >= 0n && param <= 2n ** 252n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`\n      );\n      break;\n    case \"core::starknet::contract_address::ContractAddress\" /* ContractAddress */:\n      assert(\n        // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1245\n        param >= 0n && param <= 2n ** 252n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`\n      );\n      break;\n    default:\n      break;\n  }\n};\nvar validateBool = (parameter, input) => {\n  assert(\n    typeof parameter === \"boolean\",\n    `Validate: arg ${input.name} of cairo type ${input.type} should be type (Boolean)`\n  );\n};\nvar validateStruct = (parameter, input, structs) => {\n  if (input.type === \"core::integer::u256\" /* u256 */) {\n    validateUint(parameter, input);\n    return;\n  }\n  if (input.type === \"core::starknet::eth_address::EthAddress\") {\n    assert(\n      typeof parameter !== \"object\",\n      `EthAddress type is waiting a BigNumberish. Got ${parameter}`\n    );\n    const param = BigInt(parameter.toString(10));\n    assert(\n      // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1259\n      param >= 0n && param <= 2n ** 160n - 1n,\n      `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^160-1]`\n    );\n    return;\n  }\n  assert(\n    typeof parameter === \"object\" && !Array.isArray(parameter),\n    `Validate: arg ${input.name} is cairo type struct (${input.type}), and should be defined as js object (not array)`\n  );\n  structs[input.type].members.forEach(({ name }) => {\n    assert(\n      Object.keys(parameter).includes(name),\n      `Validate: arg ${input.name} should have a property ${name}`\n    );\n  });\n};\nvar validateEnum = (parameter, input) => {\n  assert(\n    typeof parameter === \"object\" && !Array.isArray(parameter),\n    `Validate: arg ${input.name} is cairo type Enum (${input.type}), and should be defined as js object (not array)`\n  );\n  const methodsKeys = Object.getOwnPropertyNames(Object.getPrototypeOf(parameter));\n  const keys = [...Object.getOwnPropertyNames(parameter), ...methodsKeys];\n  if (isTypeOption(input.type) && keys.includes(\"isSome\") && keys.includes(\"isNone\")) {\n    return;\n  }\n  if (isTypeResult(input.type) && keys.includes(\"isOk\") && keys.includes(\"isErr\")) {\n    return;\n  }\n  if (keys.includes(\"variant\") && keys.includes(\"activeVariant\")) {\n    return;\n  }\n  throw new Error(\n    `Validate Enum: argument ${input.name}, type ${input.type}, value received ${parameter}, is not an Enum.`\n  );\n};\nvar validateTuple = (parameter, input) => {\n  assert(\n    typeof parameter === \"object\" && !Array.isArray(parameter),\n    `Validate: arg ${input.name} should be a tuple (defined as object)`\n  );\n};\nvar validateArray = (parameter, input, structs, enums) => {\n  const baseType = getArrayType(input.type);\n  if (isTypeFelt(baseType) && isLongText(parameter)) {\n    return;\n  }\n  assert(Array.isArray(parameter), `Validate: arg ${input.name} should be an Array`);\n  switch (true) {\n    case isTypeFelt(baseType):\n      parameter.forEach((param) => validateFelt(param, input));\n      break;\n    case isTypeTuple(baseType):\n      parameter.forEach((it) => validateTuple(it, { name: input.name, type: baseType }));\n      break;\n    case isTypeArray(baseType):\n      parameter.forEach(\n        (param) => validateArray(param, { name: \"\", type: baseType }, structs, enums)\n      );\n      break;\n    case isTypeStruct(baseType, structs):\n      parameter.forEach(\n        (it) => validateStruct(it, { name: input.name, type: baseType }, structs)\n      );\n      break;\n    case isTypeEnum(baseType, enums):\n      parameter.forEach((it) => validateEnum(it, { name: input.name, type: baseType }));\n      break;\n    case (isTypeUint(baseType) || isTypeLitteral(baseType)):\n      parameter.forEach((param) => validateUint(param, input));\n      break;\n    case isTypeBool(baseType):\n      parameter.forEach((param) => validateBool(param, input));\n      break;\n    default:\n      throw new Error(\n        `Validate Unhandled: argument ${input.name}, type ${input.type}, value ${parameter}`\n      );\n  }\n};\nfunction validateFields(abiMethod, args, structs, enums) {\n  abiMethod.inputs.reduce((acc, input) => {\n    const parameter = args[acc];\n    switch (true) {\n      case isLen(input.name):\n        return acc;\n      case isTypeFelt(input.type):\n        validateFelt(parameter, input);\n        break;\n      case (isTypeUint(input.type) || isTypeLitteral(input.type)):\n        validateUint(parameter, input);\n        break;\n      case isTypeBool(input.type):\n        validateBool(parameter, input);\n        break;\n      case isTypeArray(input.type):\n        validateArray(parameter, input, structs, enums);\n        break;\n      case isTypeStruct(input.type, structs):\n        validateStruct(parameter, input, structs);\n        break;\n      case isTypeEnum(input.type, enums):\n        validateEnum(parameter, input);\n        break;\n      case isTypeTuple(input.type):\n        validateTuple(parameter, input);\n        break;\n      default:\n        throw new Error(\n          `Validate Unhandled: argument ${input.name}, type ${input.type}, value ${parameter}`\n        );\n    }\n    return acc + 1;\n  }, 0);\n}\n\n// src/utils/calldata/index.ts\nvar CallData = class {\n  constructor(abi) {\n    this.structs = CallData.getAbiStruct(abi);\n    this.enums = CallData.getAbiEnum(abi);\n    this.parser = createAbiParser(abi);\n    this.abi = this.parser.getLegacyFormat();\n  }\n  /**\n   * Validate arguments passed to the method as corresponding to the ones in the abi\n   * @param type ValidateType - type of the method\n   * @param method string - name of the method\n   * @param args ArgsOrCalldata - arguments that are passed to the method\n   */\n  validate(type, method, args = []) {\n    if (type !== \"DEPLOY\" /* DEPLOY */) {\n      const invocableFunctionNames = this.abi.filter((abi) => {\n        if (abi.type !== \"function\")\n          return false;\n        const isView = abi.stateMutability === \"view\" || abi.state_mutability === \"view\";\n        return type === \"INVOKE\" /* INVOKE */ ? !isView : isView;\n      }).map((abi) => abi.name);\n      assert(\n        invocableFunctionNames.includes(method),\n        `${type === \"INVOKE\" /* INVOKE */ ? \"invocable\" : \"viewable\"} method not found in abi`\n      );\n    }\n    const abiMethod = this.abi.find(\n      (abi) => type === \"DEPLOY\" /* DEPLOY */ ? abi.name === method && abi.type === \"constructor\" : abi.name === method && abi.type === \"function\"\n    );\n    if (isNoConstructorValid(method, args, abiMethod)) {\n      return;\n    }\n    const inputsLength = this.parser.methodInputsLength(abiMethod);\n    if (args.length !== inputsLength) {\n      throw Error(\n        `Invalid number of arguments, expected ${inputsLength} arguments, but got ${args.length}`\n      );\n    }\n    validateFields(abiMethod, args, this.structs, this.enums);\n  }\n  /**\n   * Compile contract callData with abi\n   * Parse the calldata by using input fields from the abi for that method\n   * @param method string - method name\n   * @param args RawArgs - arguments passed to the method. Can be an array of arguments (in the order of abi definition), or an object constructed in conformity with abi (in this case, the parameter can be in a wrong order).\n   * @return Calldata - parsed arguments in format that contract is expecting\n   * @example\n   * ```typescript\n   * const calldata = myCallData.compile(\"constructor\", [\"0x34a\", [1, 3n]]);\n   * ```\n   * ```typescript\n   * const calldata2 = myCallData.compile(\"constructor\", {list:[1, 3n], balance:\"0x34\"}); // wrong order is valid\n   * ```\n   */\n  compile(method, argsCalldata) {\n    const abiMethod = this.abi.find((abiFunction) => abiFunction.name === method);\n    if (isNoConstructorValid(method, argsCalldata, abiMethod)) {\n      return [];\n    }\n    let args;\n    if (Array.isArray(argsCalldata)) {\n      args = argsCalldata;\n    } else {\n      const orderedObject = orderPropsByAbi(\n        argsCalldata,\n        abiMethod.inputs,\n        this.structs,\n        this.enums\n      );\n      args = Object.values(orderedObject);\n      validateFields(abiMethod, args, this.structs, this.enums);\n    }\n    const argsIterator = args[Symbol.iterator]();\n    const callArray = abiMethod.inputs.reduce(\n      (acc, input) => isLen(input.name) && !isCairo1Type(input.type) ? acc : acc.concat(parseCalldataField(argsIterator, input, this.structs, this.enums)),\n      []\n    );\n    Object.defineProperty(callArray, \"__compiled__\", {\n      enumerable: false,\n      writable: false,\n      value: true\n    });\n    return callArray;\n  }\n  /**\n   * Compile contract callData without abi\n   * @param rawArgs RawArgs representing cairo method arguments or string array of compiled data\n   * @returns Calldata\n   */\n  static compile(rawArgs) {\n    const createTree = (obj) => {\n      const getEntries = (o, prefix = \".\") => {\n        const oe = Array.isArray(o) ? [o.length.toString(), ...o] : o;\n        return Object.entries(oe).flatMap(([k, v]) => {\n          let value = v;\n          if (k === \"entrypoint\")\n            value = getSelectorFromName(value);\n          else if (isLongText(value))\n            value = splitLongString(value);\n          const kk = Array.isArray(oe) && k === \"0\" ? \"$$len\" : k;\n          if (isBigInt(value))\n            return [[`${prefix}${kk}`, felt(value)]];\n          if (Object(value) === value) {\n            const methodsKeys = Object.getOwnPropertyNames(Object.getPrototypeOf(value));\n            const keys = [...Object.getOwnPropertyNames(value), ...methodsKeys];\n            if (keys.includes(\"isSome\") && keys.includes(\"isNone\")) {\n              const myOption = value;\n              const variantNb = myOption.isSome() ? 0 /* Some */ : 1 /* None */;\n              if (myOption.isSome())\n                return getEntries({ 0: variantNb, 1: myOption.unwrap() }, `${prefix}${kk}.`);\n              return [[`${prefix}${kk}`, felt(variantNb)]];\n            }\n            if (keys.includes(\"isOk\") && keys.includes(\"isErr\")) {\n              const myResult = value;\n              const variantNb = myResult.isOk() ? 0 /* Ok */ : 1 /* Err */;\n              return getEntries({ 0: variantNb, 1: myResult.unwrap() }, `${prefix}${kk}.`);\n            }\n            if (keys.includes(\"variant\") && keys.includes(\"activeVariant\")) {\n              const myEnum = value;\n              const activeVariant = myEnum.activeVariant();\n              const listVariants = Object.keys(myEnum.variant);\n              const activeVariantNb = listVariants.findIndex(\n                (variant) => variant === activeVariant\n              );\n              if (typeof myEnum.unwrap() === \"object\" && Object.keys(myEnum.unwrap()).length === 0) {\n                return [[`${prefix}${kk}`, felt(activeVariantNb)]];\n              }\n              return getEntries({ 0: activeVariantNb, 1: myEnum.unwrap() }, `${prefix}${kk}.`);\n            }\n            return getEntries(value, `${prefix}${kk}.`);\n          }\n          return [[`${prefix}${kk}`, felt(value)]];\n        });\n      };\n      const result = Object.fromEntries(getEntries(obj));\n      return result;\n    };\n    let callTreeArray;\n    if (!Array.isArray(rawArgs)) {\n      const callTree = createTree(rawArgs);\n      callTreeArray = Object.values(callTree);\n    } else {\n      const callObj = { ...rawArgs };\n      const callTree = createTree(callObj);\n      callTreeArray = Object.values(callTree);\n    }\n    Object.defineProperty(callTreeArray, \"__compiled__\", {\n      enumerable: false,\n      writable: false,\n      value: true\n    });\n    return callTreeArray;\n  }\n  /**\n   * Parse elements of the response array and structuring them into response object\n   * @param method string - method name\n   * @param response string[] - response from the method\n   * @return Result - parsed response corresponding to the abi\n   */\n  parse(method, response) {\n    const { outputs } = this.abi.find((abi) => abi.name === method);\n    const responseIterator = response.flat()[Symbol.iterator]();\n    const parsed = outputs.flat().reduce((acc, output, idx) => {\n      const propName = output.name ?? idx;\n      acc[propName] = responseParser(responseIterator, output, this.structs, this.enums, acc);\n      if (acc[propName] && acc[`${propName}_len`]) {\n        delete acc[`${propName}_len`];\n      }\n      return acc;\n    }, {});\n    return Object.keys(parsed).length === 1 && 0 in parsed ? parsed[0] : parsed;\n  }\n  /**\n   * Format cairo method response data to native js values based on provided format schema\n   * @param method string - cairo method name\n   * @param response string[] - cairo method response\n   * @param format object - formatter object schema\n   * @returns Result - parsed and formatted response object\n   */\n  format(method, response, format) {\n    const parsed = this.parse(method, response);\n    return formatter(parsed, format);\n  }\n  /**\n   * Helper to extract structs from abi\n   * @param abi Abi\n   * @returns AbiStructs - structs from abi\n   */\n  static getAbiStruct(abi) {\n    return abi.filter((abiEntry) => abiEntry.type === \"struct\").reduce(\n      (acc, abiEntry) => ({\n        ...acc,\n        [abiEntry.name]: abiEntry\n      }),\n      {}\n    );\n  }\n  /**\n   * Helper to extract enums from abi\n   * @param abi Abi\n   * @returns AbiEnums - enums from abi\n   */\n  static getAbiEnum(abi) {\n    const fullEnumList = abi.filter((abiEntry) => abiEntry.type === \"enum\").reduce(\n      (acc, abiEntry) => ({\n        ...acc,\n        [abiEntry.name]: abiEntry\n      }),\n      {}\n    );\n    delete fullEnumList[\"core::bool\"];\n    return fullEnumList;\n  }\n  /**\n   * Helper: Compile HexCalldata | RawCalldata | RawArgs\n   * @param rawCalldata HexCalldata | RawCalldata | RawArgs\n   * @returns Calldata\n   */\n  static toCalldata(rawCalldata = []) {\n    return CallData.compile(rawCalldata);\n  }\n  /**\n   * Helper: Convert raw to HexCalldata\n   * @param raw HexCalldata | RawCalldata | RawArgs\n   * @returns HexCalldata\n   */\n  static toHex(raw = []) {\n    const calldata = CallData.compile(raw);\n    return calldata.map((it) => toHex(it));\n  }\n};\n\n// src/utils/hash.ts\nvar hash_exports = {};\n__export(hash_exports, {\n  calculateContractAddressFromHash: () => calculateContractAddressFromHash,\n  calculateDeclareTransactionHash: () => calculateDeclareTransactionHash,\n  calculateDeployAccountTransactionHash: () => calculateDeployAccountTransactionHash,\n  calculateDeployTransactionHash: () => calculateDeployTransactionHash,\n  calculateTransactionHash: () => calculateTransactionHash,\n  calculateTransactionHashCommon: () => calculateTransactionHashCommon,\n  computeCompiledClassHash: () => computeCompiledClassHash,\n  computeContractClassHash: () => computeContractClassHash,\n  computeHashOnElements: () => computeHashOnElements,\n  computeLegacyContractClassHash: () => computeLegacyContractClassHash,\n  computeSierraContractClassHash: () => computeSierraContractClassHash,\n  default: () => computeHintedClassHash,\n  feeTransactionVersion: () => feeTransactionVersion,\n  feeTransactionVersion_2: () => feeTransactionVersion_2,\n  formatSpaces: () => formatSpaces,\n  getSelector: () => getSelector,\n  getSelectorFromName: () => getSelectorFromName,\n  getVersionsByType: () => getVersionsByType,\n  keccakBn: () => keccakBn,\n  poseidon: () => _noble_curves_abstract_poseidon__WEBPACK_IMPORTED_MODULE_3__,\n  starknetKeccak: () => starknetKeccak,\n  transactionVersion: () => transactionVersion,\n  transactionVersion_2: () => transactionVersion_2\n});\n\n\n// src/utils/ec.ts\nvar ec_exports = {};\n__export(ec_exports, {\n  starkCurve: () => _scure_starknet__WEBPACK_IMPORTED_MODULE_2__,\n  weierstrass: () => _noble_curves_abstract_weierstrass__WEBPACK_IMPORTED_MODULE_4__\n});\n\n\n\n// src/utils/json.ts\nvar json_exports = {};\n__export(json_exports, {\n  parse: () => parse2,\n  parseAlwaysAsBig: () => parseAlwaysAsBig,\n  stringify: () => stringify2,\n  stringifyAlwaysAsBig: () => stringifyAlwaysAsBig\n});\n\nvar parseIntAsNumberOrBigInt = (x) => {\n  if (!lossless_json__WEBPACK_IMPORTED_MODULE_5__.isInteger(x))\n    return parseFloat(x);\n  const v = parseInt(x, 10);\n  return Number.isSafeInteger(v) ? v : BigInt(x);\n};\nvar parse2 = (x) => lossless_json__WEBPACK_IMPORTED_MODULE_5__.parse(String(x), void 0, parseIntAsNumberOrBigInt);\nvar parseAlwaysAsBig = (x) => lossless_json__WEBPACK_IMPORTED_MODULE_5__.parse(String(x), void 0, lossless_json__WEBPACK_IMPORTED_MODULE_5__.parseNumberAndBigInt);\nvar stringify2 = (value, replacer, space, numberStringifiers) => lossless_json__WEBPACK_IMPORTED_MODULE_5__.stringify(value, replacer, space, numberStringifiers);\nvar stringifyAlwaysAsBig = stringify2;\n\n// src/utils/hash.ts\n\nvar transactionVersion = BN_TRANSACTION_VERSION_1;\nvar transactionVersion_2 = BN_TRANSACTION_VERSION_2;\nvar feeTransactionVersion = BN_FEE_TRANSACTION_VERSION_1;\nvar feeTransactionVersion_2 = BN_FEE_TRANSACTION_VERSION_2;\nfunction getVersionsByType(versionType) {\n  return versionType === \"fee\" ? { v1: feeTransactionVersion, v2: feeTransactionVersion_2 } : { v1: transactionVersion, v2: transactionVersion_2 };\n}\nfunction computeHashOnElements(data) {\n  return [...data, data.length].reduce((x, y) => _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.pedersen(toBigInt(x), toBigInt(y)), 0).toString();\n}\nfunction calculateTransactionHashCommon(txHashPrefix, version, contractAddress, entryPointSelector, calldata, maxFee, chainId, additionalData = []) {\n  const calldataHash = computeHashOnElements(calldata);\n  const dataToHash = [\n    txHashPrefix,\n    version,\n    contractAddress,\n    entryPointSelector,\n    calldataHash,\n    maxFee,\n    chainId,\n    ...additionalData\n  ];\n  return computeHashOnElements(dataToHash);\n}\nfunction calculateDeployTransactionHash(contractAddress, constructorCalldata, version, chainId, constructorName = \"constructor\") {\n  return calculateTransactionHashCommon(\n    \"0x6465706c6f79\" /* DEPLOY */,\n    version,\n    contractAddress,\n    getSelectorFromName(constructorName),\n    constructorCalldata,\n    0,\n    chainId\n  );\n}\nfunction calculateDeclareTransactionHash(classHash, senderAddress, version, maxFee, chainId, nonce, compiledClassHash) {\n  return calculateTransactionHashCommon(\n    \"0x6465636c617265\" /* DECLARE */,\n    version,\n    senderAddress,\n    0,\n    [classHash],\n    maxFee,\n    chainId,\n    [nonce, ...compiledClassHash ? [compiledClassHash] : []]\n  );\n}\nfunction calculateDeployAccountTransactionHash(contractAddress, classHash, constructorCalldata, salt, version, maxFee, chainId, nonce) {\n  const calldata = [classHash, salt, ...constructorCalldata];\n  return calculateTransactionHashCommon(\n    \"0x6465706c6f795f6163636f756e74\" /* DEPLOY_ACCOUNT */,\n    version,\n    contractAddress,\n    0,\n    calldata,\n    maxFee,\n    chainId,\n    [nonce]\n  );\n}\nfunction calculateTransactionHash(contractAddress, version, calldata, maxFee, chainId, nonce) {\n  return calculateTransactionHashCommon(\n    \"0x696e766f6b65\" /* INVOKE */,\n    version,\n    contractAddress,\n    0,\n    calldata,\n    maxFee,\n    chainId,\n    [nonce]\n  );\n}\nfunction calculateContractAddressFromHash(salt, classHash, constructorCalldata, deployerAddress) {\n  const compiledCalldata = CallData.compile(constructorCalldata);\n  const constructorCalldataHash = computeHashOnElements(compiledCalldata);\n  const CONTRACT_ADDRESS_PREFIX = felt(\"0x535441524b4e45545f434f4e54524143545f41444452455353\");\n  const hash = computeHashOnElements([\n    CONTRACT_ADDRESS_PREFIX,\n    deployerAddress,\n    salt,\n    classHash,\n    constructorCalldataHash\n  ]);\n  return toHex(BigInt(hash) % ADDR_BOUND);\n}\nfunction nullSkipReplacer(key, value) {\n  if (key === \"attributes\" || key === \"accessible_scopes\") {\n    return Array.isArray(value) && value.length === 0 ? void 0 : value;\n  }\n  if (key === \"debug_info\") {\n    return null;\n  }\n  return value === null ? void 0 : value;\n}\nfunction formatSpaces(json2) {\n  let insideQuotes = false;\n  const newString = [];\n  for (const char of json2) {\n    if (char === '\"' && (newString.length > 0 && newString.slice(-1)[0] === \"\\\\\") === false) {\n      insideQuotes = !insideQuotes;\n    }\n    if (insideQuotes) {\n      newString.push(char);\n    } else {\n      newString.push(char === \":\" ? \": \" : char === \",\" ? \", \" : char);\n    }\n  }\n  return newString.join(\"\");\n}\nfunction computeHintedClassHash(compiledContract) {\n  const { abi, program } = compiledContract;\n  const contractClass = { abi, program };\n  const serializedJson = formatSpaces(stringify2(contractClass, nullSkipReplacer));\n  return addHexPrefix(_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.keccak(utf8ToArray(serializedJson)).toString(16));\n}\nfunction computeLegacyContractClassHash(contract) {\n  const compiledContract = typeof contract === \"string\" ? parse2(contract) : contract;\n  const apiVersion = toHex(API_VERSION);\n  const externalEntryPointsHash = computeHashOnElements(\n    compiledContract.entry_points_by_type.EXTERNAL.flatMap((e) => [e.selector, e.offset])\n  );\n  const l1HandlerEntryPointsHash = computeHashOnElements(\n    compiledContract.entry_points_by_type.L1_HANDLER.flatMap((e) => [e.selector, e.offset])\n  );\n  const constructorEntryPointHash = computeHashOnElements(\n    compiledContract.entry_points_by_type.CONSTRUCTOR.flatMap((e) => [e.selector, e.offset])\n  );\n  const builtinsHash = computeHashOnElements(\n    compiledContract.program.builtins.map((s) => encodeShortString(s))\n  );\n  const hintedClassHash = computeHintedClassHash(compiledContract);\n  const dataHash = computeHashOnElements(compiledContract.program.data);\n  return computeHashOnElements([\n    apiVersion,\n    externalEntryPointsHash,\n    l1HandlerEntryPointsHash,\n    constructorEntryPointHash,\n    builtinsHash,\n    hintedClassHash,\n    dataHash\n  ]);\n}\nfunction hashBuiltins(builtins) {\n  return (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)(\n    builtins.flatMap((it) => {\n      return BigInt(encodeShortString(it));\n    })\n  );\n}\nfunction hashEntryPoint(data) {\n  const base = data.flatMap((it) => {\n    return [BigInt(it.selector), BigInt(it.offset), hashBuiltins(it.builtins)];\n  });\n  return (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)(base);\n}\nfunction computeCompiledClassHash(casm) {\n  const COMPILED_CLASS_VERSION = \"COMPILED_CLASS_V1\";\n  const compiledClassVersion = BigInt(encodeShortString(COMPILED_CLASS_VERSION));\n  const externalEntryPointsHash = hashEntryPoint(casm.entry_points_by_type.EXTERNAL);\n  const l1Handlers = hashEntryPoint(casm.entry_points_by_type.L1_HANDLER);\n  const constructor = hashEntryPoint(casm.entry_points_by_type.CONSTRUCTOR);\n  const bytecode = (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)(casm.bytecode.map((it) => BigInt(it)));\n  return toHex(\n    (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)([\n      compiledClassVersion,\n      externalEntryPointsHash,\n      l1Handlers,\n      constructor,\n      bytecode\n    ])\n  );\n}\nfunction hashEntryPointSierra(data) {\n  const base = data.flatMap((it) => {\n    return [BigInt(it.selector), BigInt(it.function_idx)];\n  });\n  return (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)(base);\n}\nfunction hashAbi(sierra) {\n  const indentString = formatSpaces(stringify2(sierra.abi, null));\n  return BigInt(addHexPrefix(_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.keccak(utf8ToArray(indentString)).toString(16)));\n}\nfunction computeSierraContractClassHash(sierra) {\n  const CONTRACT_CLASS_VERSION = \"CONTRACT_CLASS_V0.1.0\";\n  const compiledClassVersion = BigInt(encodeShortString(CONTRACT_CLASS_VERSION));\n  const externalEntryPointsHash = hashEntryPointSierra(sierra.entry_points_by_type.EXTERNAL);\n  const l1Handlers = hashEntryPointSierra(sierra.entry_points_by_type.L1_HANDLER);\n  const constructor = hashEntryPointSierra(sierra.entry_points_by_type.CONSTRUCTOR);\n  const abiHash = hashAbi(sierra);\n  const sierraProgram = (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)(sierra.sierra_program.map((it) => BigInt(it)));\n  return toHex(\n    (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)([\n      compiledClassVersion,\n      externalEntryPointsHash,\n      l1Handlers,\n      constructor,\n      abiHash,\n      sierraProgram\n    ])\n  );\n}\nfunction computeContractClassHash(contract) {\n  const compiledContract = typeof contract === \"string\" ? parse2(contract) : contract;\n  if (\"sierra_program\" in compiledContract) {\n    return computeSierraContractClassHash(compiledContract);\n  }\n  return computeLegacyContractClassHash(compiledContract);\n}\n\n// src/utils/stark.ts\nvar stark_exports = {};\n__export(stark_exports, {\n  compressProgram: () => compressProgram,\n  decompressProgram: () => decompressProgram,\n  estimatedFeeToMaxFee: () => estimatedFeeToMaxFee,\n  formatSignature: () => formatSignature,\n  makeAddress: () => makeAddress,\n  randomAddress: () => randomAddress,\n  signatureToDecimalArray: () => signatureToDecimalArray,\n  signatureToHexArray: () => signatureToHexArray\n});\n\n\nfunction compressProgram(jsonProgram) {\n  const stringified = typeof jsonProgram === \"string\" ? jsonProgram : stringify2(jsonProgram);\n  const compressedProgram = (0,pako__WEBPACK_IMPORTED_MODULE_6__.gzip)(stringified);\n  return btoaUniversal(compressedProgram);\n}\nfunction decompressProgram(base642) {\n  if (Array.isArray(base642))\n    return base642;\n  const decompressed = arrayBufferToString((0,pako__WEBPACK_IMPORTED_MODULE_6__.ungzip)(atobUniversal(base642)));\n  return parse2(decompressed);\n}\nfunction randomAddress() {\n  const randomKeyPair = _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.utils.randomPrivateKey();\n  return (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.getStarkKey)(randomKeyPair);\n}\nfunction makeAddress(input) {\n  return addHexPrefix(input).toLowerCase();\n}\nfunction formatSignature(sig) {\n  if (!sig)\n    throw Error(\"formatSignature: provided signature is undefined\");\n  if (Array.isArray(sig)) {\n    return sig.map((it) => toHex(it));\n  }\n  try {\n    const { r, s } = sig;\n    return [toHex(r), toHex(s)];\n  } catch (e) {\n    throw new Error(\"Signature need to be weierstrass.SignatureType or an array for custom\");\n  }\n}\nfunction signatureToDecimalArray(sig) {\n  return bigNumberishArrayToDecimalStringArray(formatSignature(sig));\n}\nfunction signatureToHexArray(sig) {\n  return bigNumberishArrayToHexadecimalStringArray(formatSignature(sig));\n}\nfunction estimatedFeeToMaxFee(estimatedFee, overhead = 0.5) {\n  const overHeadPercent = Math.round((1 + overhead) * 100);\n  return toBigInt(estimatedFee) * toBigInt(overHeadPercent) / 100n;\n}\n\n// src/utils/contract.ts\nfunction isSierra(contract) {\n  const compiledContract = typeof contract === \"string\" ? parse2(contract) : contract;\n  return \"sierra_program\" in compiledContract;\n}\nfunction extractContractHashes(payload) {\n  const response = { ...payload };\n  if (isSierra(payload.contract)) {\n    if (!payload.compiledClassHash && payload.casm) {\n      response.compiledClassHash = computeCompiledClassHash(payload.casm);\n    }\n    if (!response.compiledClassHash)\n      throw new Error(\n        \"Extract compiledClassHash failed, provide (CairoAssembly).casm file or compiledClassHash\"\n      );\n  }\n  response.classHash = payload.classHash ?? computeContractClassHash(payload.contract);\n  if (!response.classHash)\n    throw new Error(\"Extract classHash failed, provide (CompiledContract).json file or classHash\");\n  return response;\n}\nfunction contractClassResponseToLegacyCompiledContract(ccr) {\n  if (isSierra(ccr)) {\n    throw Error(\"ContractClassResponse need to be LegacyContractClass (cairo0 response class)\");\n  }\n  const contract = ccr;\n  return { ...contract, program: decompressProgram(contract.program) };\n}\n\n// src/utils/fetchPonyfill.ts\n\nvar fetchPonyfill_default = typeof window !== \"undefined\" && window.fetch || // use buildin fetch in browser if available\ntypeof global !== \"undefined\" && global.fetch || // use buildin fetch in node, react-native and service worker if available\nisomorphic_fetch__WEBPACK_IMPORTED_MODULE_7__;\n\n// src/utils/provider.ts\nvar provider_exports = {};\n__export(provider_exports, {\n  createSierraContractClass: () => createSierraContractClass,\n  parseContract: () => parseContract,\n  wait: () => wait\n});\nfunction wait(delay) {\n  return new Promise((res) => {\n    setTimeout(res, delay);\n  });\n}\nfunction createSierraContractClass(contract) {\n  const result = { ...contract };\n  delete result.sierra_program_debug_info;\n  result.abi = formatSpaces(stringify2(contract.abi));\n  result.sierra_program = formatSpaces(stringify2(contract.sierra_program));\n  result.sierra_program = compressProgram(result.sierra_program);\n  return result;\n}\nfunction parseContract(contract) {\n  const parsedContract = typeof contract === \"string\" ? parse2(contract) : contract;\n  if (!isSierra(contract)) {\n    return {\n      ...parsedContract,\n      ...\"program\" in parsedContract && { program: compressProgram(parsedContract.program) }\n    };\n  }\n  return createSierraContractClass(parsedContract);\n}\n\n// src/utils/responseParser/rpc.ts\nvar RPCResponseParser = class {\n  parseGetBlockResponse(res) {\n    return {\n      timestamp: res.timestamp,\n      block_hash: \"block_hash\" in res ? res.block_hash : \"\",\n      block_number: \"block_number\" in res ? res.block_number : -1,\n      new_root: \"new_root\" in res ? res.new_root : \"\",\n      parent_hash: res.parent_hash,\n      status: \"status\" in res ? res.status : \"PENDING\" /* PENDING */,\n      transactions: res.transactions\n    };\n  }\n  parseGetTransactionResponse(res) {\n    return {\n      calldata: \"calldata\" in res ? res.calldata : [],\n      contract_address: \"contract_address\" in res ? res.contract_address : \"\",\n      sender_address: \"sender_address\" in res ? res.sender_address : \"\",\n      max_fee: \"max_fee\" in res ? res.max_fee : \"\",\n      nonce: \"nonce\" in res ? res.nonce : \"\",\n      signature: \"signature\" in res ? res.signature : [],\n      transaction_hash: res.transaction_hash,\n      version: res.version\n    };\n  }\n  parseFeeEstimateResponse(res) {\n    return {\n      overall_fee: toBigInt(res[0].overall_fee),\n      gas_consumed: toBigInt(res[0].gas_consumed),\n      gas_price: toBigInt(res[0].gas_price)\n    };\n  }\n  parseFeeEstimateBulkResponse(res) {\n    return res.map((val) => ({\n      overall_fee: toBigInt(val.overall_fee),\n      gas_consumed: toBigInt(val.gas_consumed),\n      gas_price: toBigInt(val.gas_price)\n    }));\n  }\n  parseCallContractResponse(res) {\n    return {\n      result: res\n    };\n  }\n  parseSimulateTransactionResponse(res) {\n    return res.map((it) => {\n      return {\n        ...it,\n        suggestedMaxFee: estimatedFeeToMaxFee(BigInt(it.fee_estimation.overall_fee))\n      };\n    });\n  }\n  parseContractClassResponse(res) {\n    return {\n      ...res,\n      abi: typeof res.abi === \"string\" ? JSON.parse(res.abi) : res.abi\n    };\n  }\n};\n\n// src/provider/errors.ts\nfunction fixStack(target, fn = target.constructor) {\n  const { captureStackTrace } = Error;\n  captureStackTrace && captureStackTrace(target, fn);\n}\nfunction fixProto(target, prototype) {\n  const { setPrototypeOf } = Object;\n  setPrototypeOf ? setPrototypeOf(target, prototype) : target.__proto__ = prototype;\n}\nvar CustomError = class extends Error {\n  constructor(message) {\n    super(message);\n    Object.defineProperty(this, \"name\", {\n      value: new.target.name,\n      enumerable: false,\n      configurable: true\n    });\n    fixProto(this, new.target.prototype);\n    fixStack(this);\n  }\n};\nvar LibraryError = class extends CustomError {\n};\nvar GatewayError = class extends LibraryError {\n  constructor(message, errorCode) {\n    super(message);\n    this.errorCode = errorCode;\n  }\n};\nvar HttpError = class extends LibraryError {\n  constructor(message, errorCode) {\n    super(message);\n    this.errorCode = errorCode;\n  }\n};\n\n// src/utils/starknetId.ts\nvar starknetId_exports = {};\n__export(starknetId_exports, {\n  StarknetIdContract: () => StarknetIdContract,\n  getStarknetIdContract: () => getStarknetIdContract,\n  useDecoded: () => useDecoded,\n  useEncoded: () => useEncoded\n});\nvar basicAlphabet = \"abcdefghijklmnopqrstuvwxyz0123456789-\";\nvar basicSizePlusOne = BigInt(basicAlphabet.length + 1);\nvar bigAlphabet = \"\\u8FD9\\u6765\";\nvar basicAlphabetSize = BigInt(basicAlphabet.length);\nvar bigAlphabetSize = BigInt(bigAlphabet.length);\nvar bigAlphabetSizePlusOne = BigInt(bigAlphabet.length + 1);\nfunction extractStars(str) {\n  let k = 0;\n  while (str.endsWith(bigAlphabet[bigAlphabet.length - 1])) {\n    str = str.substring(0, str.length - 1);\n    k += 1;\n  }\n  return [str, k];\n}\nfunction useDecoded(encoded) {\n  let decoded = \"\";\n  encoded.forEach((subdomain) => {\n    while (subdomain !== ZERO) {\n      const code = subdomain % basicSizePlusOne;\n      subdomain /= basicSizePlusOne;\n      if (code === BigInt(basicAlphabet.length)) {\n        const nextSubdomain = subdomain / bigAlphabetSizePlusOne;\n        if (nextSubdomain === ZERO) {\n          const code2 = subdomain % bigAlphabetSizePlusOne;\n          subdomain = nextSubdomain;\n          if (code2 === ZERO)\n            decoded += basicAlphabet[0];\n          else\n            decoded += bigAlphabet[Number(code2) - 1];\n        } else {\n          const code2 = subdomain % bigAlphabetSize;\n          decoded += bigAlphabet[Number(code2)];\n          subdomain /= bigAlphabetSize;\n        }\n      } else\n        decoded += basicAlphabet[Number(code)];\n    }\n    const [str, k] = extractStars(decoded);\n    if (k)\n      decoded = str + (k % 2 === 0 ? bigAlphabet[bigAlphabet.length - 1].repeat(k / 2 - 1) + bigAlphabet[0] + basicAlphabet[1] : bigAlphabet[bigAlphabet.length - 1].repeat((k - 1) / 2 + 1));\n    decoded += \".\";\n  });\n  if (!decoded) {\n    return decoded;\n  }\n  return decoded.concat(\"stark\");\n}\nfunction useEncoded(decoded) {\n  let encoded = BigInt(0);\n  let multiplier = BigInt(1);\n  if (decoded.endsWith(bigAlphabet[0] + basicAlphabet[1])) {\n    const [str, k] = extractStars(decoded.substring(0, decoded.length - 2));\n    decoded = str + bigAlphabet[bigAlphabet.length - 1].repeat(2 * (k + 1));\n  } else {\n    const [str, k] = extractStars(decoded);\n    if (k)\n      decoded = str + bigAlphabet[bigAlphabet.length - 1].repeat(1 + 2 * (k - 1));\n  }\n  for (let i = 0; i < decoded.length; i += 1) {\n    const char = decoded[i];\n    const index = basicAlphabet.indexOf(char);\n    const bnIndex = BigInt(basicAlphabet.indexOf(char));\n    if (index !== -1) {\n      if (i === decoded.length - 1 && decoded[i] === basicAlphabet[0]) {\n        encoded += multiplier * basicAlphabetSize;\n        multiplier *= basicSizePlusOne;\n        multiplier *= basicSizePlusOne;\n      } else {\n        encoded += multiplier * bnIndex;\n        multiplier *= basicSizePlusOne;\n      }\n    } else if (bigAlphabet.indexOf(char) !== -1) {\n      encoded += multiplier * basicAlphabetSize;\n      multiplier *= basicSizePlusOne;\n      const newid = (i === decoded.length - 1 ? 1 : 0) + bigAlphabet.indexOf(char);\n      encoded += multiplier * BigInt(newid);\n      multiplier *= bigAlphabetSize;\n    }\n  }\n  return encoded;\n}\nvar StarknetIdContract = /* @__PURE__ */ ((StarknetIdContract2) => {\n  StarknetIdContract2[\"MAINNET\"] = \"0x6ac597f8116f886fa1c97a23fa4e08299975ecaf6b598873ca6792b9bbfb678\";\n  StarknetIdContract2[\"TESTNET\"] = \"0x3bab268e932d2cecd1946f100ae67ce3dff9fd234119ea2f6da57d16d29fce\";\n  return StarknetIdContract2;\n})(StarknetIdContract || {});\nfunction getStarknetIdContract(chainId) {\n  switch (chainId) {\n    case \"0x534e5f4d41494e\" /* SN_MAIN */:\n      return \"0x6ac597f8116f886fa1c97a23fa4e08299975ecaf6b598873ca6792b9bbfb678\" /* MAINNET */;\n    case \"0x534e5f474f45524c49\" /* SN_GOERLI */:\n      return \"0x3bab268e932d2cecd1946f100ae67ce3dff9fd234119ea2f6da57d16d29fce\" /* TESTNET */;\n    default:\n      throw new Error(\"Starknet.id is not yet deployed on this network\");\n  }\n}\n\n// src/provider/starknetId.ts\nasync function getStarkName(provider, address, StarknetIdContract2) {\n  const chainId = await provider.getChainId();\n  const contract = StarknetIdContract2 ?? getStarknetIdContract(chainId);\n  try {\n    const hexDomain = await provider.callContract({\n      contractAddress: contract,\n      entrypoint: \"address_to_domain\",\n      calldata: CallData.compile({\n        address\n      })\n    });\n    const decimalDomain = hexDomain.result.map((element) => BigInt(element)).slice(1);\n    const stringDomain = useDecoded(decimalDomain);\n    if (!stringDomain) {\n      throw Error(\"Starkname not found\");\n    }\n    return stringDomain;\n  } catch (e) {\n    if (e instanceof Error && e.message === \"Starkname not found\") {\n      throw e;\n    }\n    throw Error(\"Could not get stark name\");\n  }\n}\nasync function getAddressFromStarkName(provider, name, StarknetIdContract2) {\n  const chainId = await provider.getChainId();\n  const contract = StarknetIdContract2 ?? getStarknetIdContract(chainId);\n  try {\n    const addressData = await provider.callContract({\n      contractAddress: contract,\n      entrypoint: \"domain_to_address\",\n      calldata: CallData.compile({\n        domain: [useEncoded(name.replace(\".stark\", \"\")).toString(10)]\n      })\n    });\n    return addressData.result[0];\n  } catch {\n    throw Error(\"Could not get address from stark name\");\n  }\n}\n\n// src/provider/utils.ts\nvar validBlockTags = Object.values(BlockTag);\nvar Block = class {\n  constructor(_identifier) {\n    this.hash = null;\n    this.number = null;\n    this.tag = null;\n    this.valueOf = () => this.number;\n    this.toString = () => this.hash;\n    this.setIdentifier(_identifier);\n  }\n  setIdentifier(__identifier) {\n    if (typeof __identifier === \"string\" && isHex(__identifier)) {\n      this.hash = __identifier;\n    } else if (typeof __identifier === \"bigint\") {\n      this.hash = toHex(__identifier);\n    } else if (typeof __identifier === \"number\") {\n      this.number = __identifier;\n    } else if (typeof __identifier === \"string\" && validBlockTags.includes(__identifier)) {\n      this.tag = __identifier;\n    } else {\n      this.tag = \"pending\" /* pending */;\n    }\n  }\n  // TODO: fix any\n  get queryIdentifier() {\n    if (this.number !== null) {\n      return `blockNumber=${this.number}`;\n    }\n    if (this.hash !== null) {\n      return `blockHash=${this.hash}`;\n    }\n    return `blockNumber=${this.tag}`;\n  }\n  // TODO: fix any\n  get identifier() {\n    if (this.number !== null) {\n      return { block_number: this.number };\n    }\n    if (this.hash !== null) {\n      return { block_hash: this.hash };\n    }\n    return this.tag;\n  }\n  set identifier(_identifier) {\n    this.setIdentifier(_identifier);\n  }\n  get sequencerIdentifier() {\n    return this.hash !== null ? { blockHash: this.hash } : { blockNumber: this.number ?? this.tag };\n  }\n};\n\n// src/provider/rpc.ts\nvar getDefaultNodeUrl = (networkName, mute = false, version = RPC_DEFAULT_VERSION) => {\n  if (!mute)\n    console.warn(\"Using default public node url, please provide nodeUrl in provider options!\");\n  const nodes = RPC_NODES[networkName ?? \"SN_GOERLI\" /* SN_GOERLI */];\n  const randIdx = Math.floor(Math.random() * nodes.length);\n  return `${nodes[randIdx]}${version}`;\n};\nvar defaultOptions = {\n  headers: { \"Content-Type\": \"application/json\" },\n  blockIdentifier: \"pending\" /* pending */,\n  retries: 200\n};\nvar RpcProvider = class {\n  constructor(optionsOrProvider) {\n    this.responseParser = new RPCResponseParser();\n    /**\n     * @deprecated renamed to getBlockLatestAccepted(); (will be removed in next minor version)\n     */\n    this.getBlockHashAndNumber = this.getBlockLatestAccepted;\n    /**\n     * @deprecated renamed to getBlockStateUpdate();\n     */\n    this.getStateUpdate = this.getBlockStateUpdate;\n    /**\n     * Returns the execution traces of all transactions included in the given block\n     * @deprecated renamed to getBlockTransactionsTraces()\n     */\n    this.traceBlockTransactions = this.getBlockTransactionsTraces;\n    /**\n     * Get the number of transactions in a block given a block id\n     * @deprecated renamed to getBlockTransactionCount()\n     * @returns Number of transactions\n     */\n    this.getTransactionCount = this.getBlockTransactionCount;\n    /**\n     * @deprecated renamed to getTransactionTrace();\n     * For a given executed transaction, return the trace of its execution, including internal calls\n     */\n    this.traceTransaction = this.getTransactionTrace;\n    /**\n     * @deprecated renamed to simulateTransaction();\n     */\n    this.getSimulateTransaction = this.simulateTransaction;\n    const { nodeUrl, retries, headers, blockIdentifier, chainId, rpcVersion } = optionsOrProvider || {};\n    if (Object.values(NetworkName).includes(nodeUrl)) {\n      this.nodeUrl = getDefaultNodeUrl(\n        nodeUrl,\n        optionsOrProvider?.default,\n        rpcVersion\n      );\n    } else if (nodeUrl) {\n      this.nodeUrl = nodeUrl;\n    } else {\n      this.nodeUrl = getDefaultNodeUrl(void 0, optionsOrProvider?.default, rpcVersion);\n    }\n    this.retries = retries || defaultOptions.retries;\n    this.headers = { ...defaultOptions.headers, ...headers };\n    this.blockIdentifier = blockIdentifier || defaultOptions.blockIdentifier;\n    this.chainId = chainId;\n  }\n  fetch(method, params, id = 0) {\n    const rpcRequestBody = {\n      id,\n      jsonrpc: \"2.0\",\n      method,\n      ...params && { params }\n    };\n    return fetchPonyfill_default(this.nodeUrl, {\n      method: \"POST\",\n      body: stringify2(rpcRequestBody),\n      headers: this.headers\n    });\n  }\n  errorHandler(method, params, rpcError, otherError) {\n    if (rpcError) {\n      const { code, message, data } = rpcError;\n      throw new LibraryError(\n        `RPC: ${method} with params ${stringify2(params)}\n ${code}: ${message}: ${stringify2(data)}`\n      );\n    }\n    if (otherError instanceof LibraryError) {\n      throw otherError;\n    }\n    if (otherError) {\n      throw Error(otherError.message);\n    }\n  }\n  async fetchEndpoint(method, params) {\n    try {\n      const rawResult = await this.fetch(method, params);\n      const { error, result } = await rawResult.json();\n      this.errorHandler(method, params, error);\n      return result;\n    } catch (error) {\n      this.errorHandler(method, params, error?.response?.data, error);\n      throw error;\n    }\n  }\n  async getChainId() {\n    this.chainId ?? (this.chainId = await this.fetchEndpoint(\"starknet_chainId\"));\n    return this.chainId;\n  }\n  /**\n   * NEW: Returns the version of the Starknet JSON-RPC specification being used\n   */\n  async getSpecVersion() {\n    return this.fetchEndpoint(\"starknet_specVersion\");\n  }\n  async getNonceForAddress(contractAddress, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getNonce\", {\n      contract_address,\n      block_id\n    });\n  }\n  /**\n   * @deprecated use getBlockWithTxHashes or getBlockWithTxs (will be removed on sequencer deprecation)\n   */\n  async getBlock(blockIdentifier = this.blockIdentifier) {\n    return this.getBlockWithTxHashes(blockIdentifier).then(\n      this.responseParser.parseGetBlockResponse\n    );\n  }\n  /**\n   * Get the most recent accepted block hash and number\n   */\n  async getBlockLatestAccepted() {\n    return this.fetchEndpoint(\"starknet_blockHashAndNumber\");\n  }\n  /**\n   * @deprecated redundant use getBlockLatestAccepted();\n   * Get the most recent accepted block number\n   * @returns Number of the latest block\n   */\n  async getBlockNumber() {\n    return this.fetchEndpoint(\"starknet_blockNumber\");\n  }\n  async getBlockWithTxHashes(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getBlockWithTxHashes\", { block_id });\n  }\n  async getBlockWithTxs(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getBlockWithTxs\", { block_id });\n  }\n  async getBlockStateUpdate(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getStateUpdate\", { block_id });\n  }\n  async getBlockTransactionsTraces(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_traceBlockTransactions\", { block_id });\n  }\n  async getBlockTransactionCount(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getBlockTransactionCount\", { block_id });\n  }\n  /**\n   * Return transactions from pending block\n   * @deprecated Instead use getBlock(BlockTag.pending); (will be removed in next minor version)\n   */\n  async getPendingTransactions() {\n    const { transactions } = await this.getBlock(\"pending\" /* pending */);\n    return Promise.all(transactions.map((it) => this.getTransactionByHash(it)));\n  }\n  /**\n   * @deprecated use getTransactionByHash or getTransactionByBlockIdAndIndex (will be removed on sequencer deprecation)\n   */\n  async getTransaction(txHash) {\n    return this.getTransactionByHash(txHash).then(this.responseParser.parseGetTransactionResponse);\n  }\n  async getTransactionByHash(txHash) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint(\"starknet_getTransactionByHash\", {\n      transaction_hash\n    });\n  }\n  async getTransactionByBlockIdAndIndex(blockIdentifier, index) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getTransactionByBlockIdAndIndex\", { block_id, index });\n  }\n  async getTransactionReceipt(txHash) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint(\"starknet_getTransactionReceipt\", { transaction_hash });\n  }\n  async getTransactionTrace(txHash) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint(\"starknet_traceTransaction\", { transaction_hash });\n  }\n  /**\n   * NEW: Get the status of a transaction\n   */\n  async getTransactionStatus(transactionHash) {\n    const transaction_hash = toHex(transactionHash);\n    return this.fetchEndpoint(\"starknet_getTransactionStatus\", { transaction_hash });\n  }\n  /**\n   * @param invocations AccountInvocations\n   * @param simulateTransactionOptions blockIdentifier and flags to skip validation and fee charge<br/>\n   * - blockIdentifier<br/>\n   * - skipValidate (default false)<br/>\n   * - skipFeeCharge (default true)<br/>\n   */\n  async simulateTransaction(invocations, {\n    blockIdentifier = this.blockIdentifier,\n    skipValidate = false,\n    skipFeeCharge = true\n  }) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const simulationFlags = [];\n    if (skipValidate)\n      simulationFlags.push(rpc_exports.ESimulationFlag.SKIP_VALIDATE);\n    if (skipFeeCharge)\n      simulationFlags.push(rpc_exports.ESimulationFlag.SKIP_FEE_CHARGE);\n    return this.fetchEndpoint(\"starknet_simulateTransactions\", {\n      block_id,\n      transactions: invocations.map((it) => this.buildTransaction(it)),\n      simulation_flags: simulationFlags\n    }).then(this.responseParser.parseSimulateTransactionResponse);\n  }\n  async waitForTransaction(txHash, options) {\n    const transactionHash = toHex(txHash);\n    let { retries } = this;\n    let onchain = false;\n    let isErrorState = false;\n    const retryInterval = options?.retryInterval ?? 5e3;\n    const errorStates = options?.errorStates ?? [\n      rpc_exports.ETransactionStatus.REJECTED\n      // TODO: commented out to preserve the long-standing behavior of \"reverted\" not being treated as an error by default\n      // should decide which behavior to keep in the future\n      // RPC.ETransactionExecutionStatus.REVERTED,\n    ];\n    const successStates = options?.successStates ?? [\n      rpc_exports.ETransactionExecutionStatus.SUCCEEDED,\n      rpc_exports.ETransactionStatus.ACCEPTED_ON_L2,\n      rpc_exports.ETransactionStatus.ACCEPTED_ON_L1\n    ];\n    let txStatus;\n    while (!onchain) {\n      await wait(retryInterval);\n      try {\n        txStatus = await this.getTransactionStatus(transactionHash);\n        const executionStatus = txStatus.execution_status;\n        const finalityStatus = txStatus.finality_status;\n        if (!finalityStatus) {\n          const error = new Error(\"waiting for transaction status\");\n          throw error;\n        }\n        if (errorStates.includes(executionStatus) || errorStates.includes(finalityStatus)) {\n          const message = `${executionStatus}: ${finalityStatus}`;\n          const error = new Error(message);\n          error.response = txStatus;\n          isErrorState = true;\n          throw error;\n        } else if (successStates.includes(executionStatus) || successStates.includes(finalityStatus)) {\n          onchain = true;\n        }\n      } catch (error) {\n        if (error instanceof Error && isErrorState) {\n          throw error;\n        }\n        if (retries <= 0) {\n          throw new Error(`waitForTransaction timed-out with retries ${this.retries}`);\n        }\n      }\n      retries -= 1;\n    }\n    let txReceipt = null;\n    while (txReceipt === null) {\n      try {\n        txReceipt = await this.getTransactionReceipt(transactionHash);\n      } catch (error) {\n        if (retries <= 0) {\n          throw new Error(`waitForTransaction timed-out with retries ${this.retries}`);\n        }\n      }\n      retries -= 1;\n      await wait(retryInterval);\n    }\n    return txReceipt;\n  }\n  async getStorageAt(contractAddress, key, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const parsedKey = toStorageKey(key);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getStorageAt\", {\n      contract_address,\n      key: parsedKey,\n      block_id\n    });\n  }\n  async getClassHashAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getClassHashAt\", {\n      block_id,\n      contract_address\n    });\n  }\n  async getClassByHash(classHash) {\n    return this.getClass(classHash);\n  }\n  async getClass(classHash, blockIdentifier = this.blockIdentifier) {\n    const class_hash = toHex(classHash);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getClass\", {\n      class_hash,\n      block_id\n    }).then(this.responseParser.parseContractClassResponse);\n  }\n  async getClassAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getClassAt\", {\n      block_id,\n      contract_address\n    }).then(this.responseParser.parseContractClassResponse);\n  }\n  async getCode(_contractAddress, _blockIdentifier) {\n    throw new Error(\"RPC does not implement getCode function\");\n  }\n  async getContractVersion(contractAddress, classHash, { blockIdentifier = this.blockIdentifier, compiler = true } = {}) {\n    let contractClass;\n    if (contractAddress) {\n      contractClass = await this.getClassAt(contractAddress, blockIdentifier);\n    } else if (classHash) {\n      contractClass = await this.getClass(classHash, blockIdentifier);\n    } else {\n      throw Error(\"getContractVersion require contractAddress or classHash\");\n    }\n    if (isSierra(contractClass)) {\n      if (compiler) {\n        const abiTest = getAbiContractVersion(contractClass.abi);\n        return { cairo: \"1\", compiler: abiTest.compiler };\n      }\n      return { cairo: \"1\", compiler: void 0 };\n    }\n    return { cairo: \"0\", compiler: \"0\" };\n  }\n  /**\n   * @deprecated use get*type*EstimateFee (will be refactored based on type after sequencer deprecation)\n   */\n  async getEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier) {\n    return this.getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier);\n  }\n  async getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const transaction = this.buildTransaction(\n      {\n        type: \"INVOKE_FUNCTION\" /* INVOKE */,\n        ...invocation,\n        ...invocationDetails\n      },\n      \"fee\"\n    );\n    return this.fetchEndpoint(\"starknet_estimateFee\", {\n      request: [transaction],\n      block_id\n    }).then(this.responseParser.parseFeeEstimateResponse);\n  }\n  async getDeclareEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const transaction = this.buildTransaction(\n      {\n        type: \"DECLARE\" /* DECLARE */,\n        ...invocation,\n        ...details\n      },\n      \"fee\"\n    );\n    return this.fetchEndpoint(\"starknet_estimateFee\", {\n      request: [transaction],\n      block_id\n    }).then(this.responseParser.parseFeeEstimateResponse);\n  }\n  async getDeployAccountEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const transaction = this.buildTransaction(\n      {\n        type: \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */,\n        ...invocation,\n        ...details\n      },\n      \"fee\"\n    );\n    return this.fetchEndpoint(\"starknet_estimateFee\", {\n      request: [transaction],\n      block_id\n    }).then(this.responseParser.parseFeeEstimateResponse);\n  }\n  async getEstimateFeeBulk(invocations, { blockIdentifier = this.blockIdentifier, skipValidate = false }) {\n    if (skipValidate) {\n      console.warn(\"getEstimateFeeBulk RPC does not support skipValidate\");\n    }\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_estimateFee\", {\n      request: invocations.map((it) => this.buildTransaction(it, \"fee\")),\n      block_id\n    }).then(this.responseParser.parseFeeEstimateBulkResponse);\n  }\n  async invokeFunction(functionInvocation, details) {\n    return this.fetchEndpoint(\"starknet_addInvokeTransaction\", {\n      invoke_transaction: {\n        sender_address: functionInvocation.contractAddress,\n        calldata: CallData.toHex(functionInvocation.calldata),\n        type: rpc_exports.ETransactionType.INVOKE,\n        max_fee: toHex(details.maxFee || 0),\n        version: \"0x1\",\n        signature: signatureToHexArray(functionInvocation.signature),\n        nonce: toHex(details.nonce)\n      }\n    });\n  }\n  async declareContract({ contract, signature, senderAddress, compiledClassHash }, details) {\n    if (!isSierra(contract)) {\n      return this.fetchEndpoint(\"starknet_addDeclareTransaction\", {\n        declare_transaction: {\n          type: rpc_exports.ETransactionType.DECLARE,\n          contract_class: {\n            program: contract.program,\n            entry_points_by_type: contract.entry_points_by_type,\n            abi: contract.abi\n          },\n          version: HEX_STR_TRANSACTION_VERSION_1,\n          max_fee: toHex(details.maxFee || 0),\n          signature: signatureToHexArray(signature),\n          sender_address: senderAddress,\n          nonce: toHex(details.nonce)\n        }\n      });\n    }\n    return this.fetchEndpoint(\"starknet_addDeclareTransaction\", {\n      declare_transaction: {\n        type: rpc_exports.ETransactionType.DECLARE,\n        contract_class: {\n          sierra_program: decompressProgram(contract.sierra_program),\n          contract_class_version: contract.contract_class_version,\n          entry_points_by_type: contract.entry_points_by_type,\n          abi: contract.abi\n        },\n        compiled_class_hash: compiledClassHash || \"\",\n        version: HEX_STR_TRANSACTION_VERSION_2,\n        max_fee: toHex(details.maxFee || 0),\n        signature: signatureToHexArray(signature),\n        sender_address: senderAddress,\n        nonce: toHex(details.nonce)\n      }\n    });\n  }\n  async deployAccountContract({ classHash, constructorCalldata, addressSalt, signature }, details) {\n    return this.fetchEndpoint(\"starknet_addDeployAccountTransaction\", {\n      deploy_account_transaction: {\n        constructor_calldata: CallData.toHex(constructorCalldata || []),\n        class_hash: toHex(classHash),\n        contract_address_salt: toHex(addressSalt || 0),\n        type: rpc_exports.ETransactionType.DEPLOY_ACCOUNT,\n        max_fee: toHex(details.maxFee || 0),\n        version: toHex(details.version || 0),\n        signature: signatureToHexArray(signature),\n        nonce: toHex(details.nonce)\n      }\n    });\n  }\n  async callContract(call, blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const result = await this.fetchEndpoint(\"starknet_call\", {\n      request: {\n        contract_address: call.contractAddress,\n        entry_point_selector: getSelectorFromName(call.entrypoint),\n        calldata: CallData.toHex(call.calldata)\n      },\n      block_id\n    });\n    return this.responseParser.parseCallContractResponse(result);\n  }\n  /**\n   * NEW: Estimate the fee for a message from L1\n   * @param message Message From L1\n   */\n  async estimateMessageFee(message, blockIdentifier = this.blockIdentifier) {\n    const { from_address, to_address, entry_point_selector, payload } = message;\n    const formattedMessage = {\n      from_address: toHex(from_address),\n      to_address: toHex(to_address),\n      entry_point_selector: getSelector(entry_point_selector),\n      payload: getHexStringArray(payload)\n    };\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_estimateMessageFee\", {\n      message: formattedMessage,\n      block_id\n    });\n  }\n  /**\n   * Returns an object about the sync status, or false if the node is not synching\n   * @returns Object with the stats data\n   */\n  async getSyncingStats() {\n    return this.fetchEndpoint(\"starknet_syncing\");\n  }\n  /**\n   * Returns all events matching the given filter\n   * @returns events and the pagination of the events\n   */\n  async getEvents(eventFilter) {\n    return this.fetchEndpoint(\"starknet_getEvents\", { filter: eventFilter });\n  }\n  /**\n   * StarknetId Endpoint (get name from address)\n   */\n  async getStarkName(address, StarknetIdContract2) {\n    return getStarkName(this, address, StarknetIdContract2);\n  }\n  /**\n   * StarknetId Endpoint (get address from name)\n   */\n  async getAddressFromStarkName(name, StarknetIdContract2) {\n    return getAddressFromStarkName(this, name, StarknetIdContract2);\n  }\n  buildTransaction(invocation, versionType) {\n    const defaultVersions = getVersionsByType(versionType);\n    const details = {\n      signature: signatureToHexArray(invocation.signature),\n      nonce: toHex(invocation.nonce),\n      max_fee: toHex(invocation.maxFee || 0)\n    };\n    if (invocation.type === \"INVOKE_FUNCTION\" /* INVOKE */) {\n      return {\n        type: rpc_exports.ETransactionType.INVOKE,\n        // Diff between sequencer and rpc invoke type\n        sender_address: invocation.contractAddress,\n        calldata: CallData.toHex(invocation.calldata),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details\n      };\n    }\n    if (invocation.type === \"DECLARE\" /* DECLARE */) {\n      if (!isSierra(invocation.contract)) {\n        return {\n          type: invocation.type,\n          contract_class: invocation.contract,\n          sender_address: invocation.senderAddress,\n          version: toHex(invocation.version || defaultVersions.v1),\n          ...details\n        };\n      }\n      return {\n        // compiled_class_hash\n        type: invocation.type,\n        contract_class: {\n          ...invocation.contract,\n          sierra_program: decompressProgram(invocation.contract.sierra_program)\n        },\n        compiled_class_hash: invocation.compiledClassHash || \"\",\n        sender_address: invocation.senderAddress,\n        version: toHex(invocation.version || defaultVersions.v2),\n        ...details\n      };\n    }\n    if (invocation.type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */) {\n      return {\n        type: invocation.type,\n        constructor_calldata: CallData.toHex(invocation.constructorCalldata || []),\n        class_hash: toHex(invocation.classHash),\n        contract_address_salt: toHex(invocation.addressSalt || 0),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details\n      };\n    }\n    throw Error(\"RPC buildTransaction received unknown TransactionType\");\n  }\n};\n\n// src/provider/sequencer.ts\n\n\n// src/utils/responseParser/index.ts\nvar ResponseParser = class {\n};\n\n// src/utils/responseParser/sequencer.ts\nvar SequencerAPIResponseParser = class extends ResponseParser {\n  parseGetBlockResponse(res) {\n    return {\n      ...res,\n      new_root: res.state_root,\n      parent_hash: res.parent_block_hash,\n      transactions: Object.values(res.transactions).map((value) => \"transaction_hash\" in value && value.transaction_hash).filter(Boolean)\n    };\n  }\n  parseGetTransactionResponse(res) {\n    if (res.status === \"NOT_RECEIVED\" /* NOT_RECEIVED */ && res.finality_status === \"NOT_RECEIVED\" /* NOT_RECEIVED */) {\n      throw new LibraryError();\n    }\n    return {\n      ...res,\n      calldata: \"calldata\" in res.transaction ? res.transaction.calldata : [],\n      contract_class: \"contract_class\" in res.transaction ? res.transaction.contract_class : void 0,\n      entry_point_selector: \"entry_point_selector\" in res.transaction ? res.transaction.entry_point_selector : void 0,\n      max_fee: \"max_fee\" in res.transaction ? res.transaction.max_fee : void 0,\n      nonce: res.transaction.nonce,\n      sender_address: \"sender_address\" in res.transaction ? res.transaction.sender_address : void 0,\n      signature: \"signature\" in res.transaction ? res.transaction.signature : void 0,\n      transaction_hash: \"transaction_hash\" in res.transaction ? res.transaction.transaction_hash : void 0,\n      version: \"version\" in res.transaction ? res.transaction.version : void 0\n    };\n  }\n  parseGetTransactionReceiptResponse(res) {\n    return {\n      ...res,\n      messages_sent: res.l2_to_l1_messages,\n      ...\"revert_error\" in res && { revert_reason: res.revert_error }\n    };\n  }\n  parseFeeEstimateResponse(res) {\n    if (\"overall_fee\" in res) {\n      let gasInfo = {};\n      try {\n        gasInfo = {\n          gas_consumed: toBigInt(res.gas_usage),\n          gas_price: toBigInt(res.gas_price)\n        };\n      } catch {\n      }\n      return {\n        overall_fee: toBigInt(res.overall_fee),\n        ...gasInfo\n      };\n    }\n    return {\n      overall_fee: toBigInt(res.amount)\n    };\n  }\n  parseFeeEstimateBulkResponse(res) {\n    return [].concat(res).map((item) => {\n      if (\"overall_fee\" in item) {\n        let gasInfo = {};\n        try {\n          gasInfo = {\n            gas_consumed: toBigInt(item.gas_usage),\n            gas_price: toBigInt(item.gas_price)\n          };\n        } catch {\n        }\n        return {\n          overall_fee: toBigInt(item.overall_fee),\n          ...gasInfo\n        };\n      }\n      return {\n        overall_fee: toBigInt(item.amount)\n      };\n    });\n  }\n  parseSimulateTransactionResponse(res) {\n    const suggestedMaxFee = \"overall_fee\" in res.fee_estimation ? res.fee_estimation.overall_fee : res.fee_estimation.amount;\n    return [\n      {\n        transaction_trace: res.trace,\n        fee_estimation: res.fee_estimation,\n        suggestedMaxFee: estimatedFeeToMaxFee(BigInt(suggestedMaxFee))\n      }\n    ];\n  }\n  parseCallContractResponse(res) {\n    return {\n      result: res.result\n    };\n  }\n  parseInvokeFunctionResponse(res) {\n    return {\n      transaction_hash: res.transaction_hash\n    };\n  }\n  parseDeployContractResponse(res) {\n    return {\n      transaction_hash: res.transaction_hash,\n      contract_address: res.address\n    };\n  }\n  parseDeclareContractResponse(res) {\n    return {\n      transaction_hash: res.transaction_hash,\n      class_hash: res.class_hash\n    };\n  }\n  parseGetStateUpdateResponse(res) {\n    const nonces = Object.entries(res.state_diff.nonces).map(([contract_address, nonce]) => ({\n      contract_address,\n      nonce\n    }));\n    const storage_diffs = Object.entries(res.state_diff.storage_diffs).map(\n      ([address, storage_entries]) => ({ address, storage_entries })\n    );\n    return {\n      ...res,\n      state_diff: {\n        ...res.state_diff,\n        storage_diffs,\n        nonces\n      }\n    };\n  }\n  parseContractClassResponse(res) {\n    const response = isSierra(res) ? res : parseContract(res);\n    return {\n      ...response,\n      abi: typeof response.abi === \"string\" ? JSON.parse(response.abi) : response.abi\n    };\n  }\n};\n\n// src/utils/url.ts\n\nvar protocolAndDomainRE = /^(?:\\w+:)?\\/\\/(\\S+)$/;\nvar localhostDomainRE = /^localhost[:?\\d]*(?:[^:?\\d]\\S*)?$/;\nvar nonLocalhostDomainRE = /^[^\\s.]+\\.\\S{2,}$/;\nfunction isUrl(s) {\n  if (!s) {\n    return false;\n  }\n  if (typeof s !== \"string\") {\n    return false;\n  }\n  const match = s.match(protocolAndDomainRE);\n  if (!match) {\n    return false;\n  }\n  const everythingAfterProtocol = match[1];\n  if (!everythingAfterProtocol) {\n    return false;\n  }\n  if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {\n    return true;\n  }\n  return false;\n}\nfunction buildUrl(baseUrl, defaultPath, urlOrPath) {\n  return isUrl(urlOrPath) ? urlOrPath : url_join__WEBPACK_IMPORTED_MODULE_8__(baseUrl, urlOrPath ?? defaultPath);\n}\n\n// src/provider/sequencer.ts\nfunction isEmptyQueryObject(obj) {\n  return obj === void 0 || Object.keys(obj).length === 0 || Object.keys(obj).length === 1 && Object.entries(obj).every(([k, v]) => k === \"blockIdentifier\" && v === null);\n}\nvar defaultOptions2 = {\n  network: \"SN_GOERLI\" /* SN_GOERLI */,\n  blockIdentifier: \"pending\" /* pending */\n};\nvar SequencerProvider = class {\n  constructor(optionsOrProvider = defaultOptions2) {\n    this.responseParser = new SequencerAPIResponseParser();\n    if (\"network\" in optionsOrProvider) {\n      this.baseUrl = SequencerProvider.getNetworkFromName(optionsOrProvider.network);\n      this.feederGatewayUrl = buildUrl(this.baseUrl, \"feeder_gateway\");\n      this.gatewayUrl = buildUrl(this.baseUrl, \"gateway\");\n    } else {\n      this.baseUrl = optionsOrProvider.baseUrl;\n      this.feederGatewayUrl = buildUrl(\n        this.baseUrl,\n        \"feeder_gateway\",\n        optionsOrProvider.feederGatewayUrl\n      );\n      this.gatewayUrl = buildUrl(this.baseUrl, \"gateway\", optionsOrProvider.gatewayUrl);\n    }\n    this.chainId = optionsOrProvider?.chainId ?? SequencerProvider.getChainIdFromBaseUrl(this.baseUrl);\n    this.headers = optionsOrProvider.headers;\n    this.blockIdentifier = optionsOrProvider?.blockIdentifier || defaultOptions2.blockIdentifier;\n  }\n  static getNetworkFromName(name) {\n    switch (name) {\n      case \"SN_MAIN\" /* SN_MAIN */:\n      case \"0x534e5f4d41494e\" /* SN_MAIN */:\n        return \"https://alpha-mainnet.starknet.io\" /* SN_MAIN */;\n      case \"SN_GOERLI\" /* SN_GOERLI */:\n      case \"0x534e5f474f45524c49\" /* SN_GOERLI */:\n        return \"https://alpha4.starknet.io\" /* SN_GOERLI */;\n      default:\n        throw new Error(\"Could not detect base url from NetworkName\");\n    }\n  }\n  static getChainIdFromBaseUrl(baseUrl) {\n    try {\n      const url = new URL(baseUrl);\n      if (url.host.includes(\"mainnet.starknet.io\")) {\n        return \"0x534e5f4d41494e\" /* SN_MAIN */;\n      }\n      return \"0x534e5f474f45524c49\" /* SN_GOERLI */;\n    } catch {\n      console.error(`Could not parse baseUrl: ${baseUrl}`);\n      return \"0x534e5f474f45524c49\" /* SN_GOERLI */;\n    }\n  }\n  getFetchUrl(endpoint) {\n    const gatewayUrlEndpoints = [\"add_transaction\"];\n    return gatewayUrlEndpoints.includes(endpoint) ? this.gatewayUrl : this.feederGatewayUrl;\n  }\n  getFetchMethod(endpoint) {\n    const postMethodEndpoints = [\n      \"add_transaction\",\n      \"call_contract\",\n      \"estimate_fee\",\n      \"estimate_message_fee\",\n      \"estimate_fee_bulk\",\n      \"simulate_transaction\"\n    ];\n    return postMethodEndpoints.includes(endpoint) ? \"POST\" : \"GET\";\n  }\n  getQueryString(query) {\n    if (isEmptyQueryObject(query)) {\n      return \"\";\n    }\n    const queryString = Object.entries(query).map(([key, value]) => {\n      if (key === \"blockIdentifier\") {\n        const block = new Block(value);\n        return `${block.queryIdentifier}`;\n      }\n      return `${key}=${value}`;\n    }).join(\"&\");\n    return `?${queryString}`;\n  }\n  getHeaders(method) {\n    if (method === \"POST\") {\n      return {\n        \"Content-Type\": \"application/json\",\n        ...this.headers\n      };\n    }\n    return this.headers;\n  }\n  // typesafe fetch\n  async fetchEndpoint(endpoint, ...[query, request]) {\n    const baseUrl = this.getFetchUrl(endpoint);\n    const method = this.getFetchMethod(endpoint);\n    const queryString = this.getQueryString(query);\n    const url = url_join__WEBPACK_IMPORTED_MODULE_8__(baseUrl, endpoint, queryString);\n    return this.fetch(url, {\n      method,\n      body: request\n    });\n  }\n  async fetch(endpoint, options) {\n    const url = buildUrl(this.baseUrl, \"\", endpoint);\n    const method = options?.method ?? \"GET\";\n    const headers = this.getHeaders(method);\n    const body = stringify2(options?.body);\n    try {\n      const response = await fetchPonyfill_default(url, {\n        method,\n        body,\n        headers\n      });\n      const textResponse = await response.text();\n      if (!response.ok) {\n        let responseBody;\n        try {\n          responseBody = parse2(textResponse);\n        } catch {\n          throw new HttpError(response.statusText, response.status);\n        }\n        throw new GatewayError(responseBody.message, responseBody.code);\n      }\n      const parseChoice = options?.parseAlwaysAsBigInt ? parseAlwaysAsBig : parse2;\n      return parseChoice(textResponse);\n    } catch (error) {\n      if (error instanceof Error && !(error instanceof LibraryError))\n        throw Error(`Could not ${method} from endpoint \\`${url}\\`: ${error.message}`);\n      throw error;\n    }\n  }\n  async getChainId() {\n    return Promise.resolve(this.chainId);\n  }\n  async callContract({ contractAddress, entrypoint: entryPointSelector, calldata = [] }, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\n      \"call_contract\",\n      { blockIdentifier },\n      {\n        // TODO - determine best choice once both are fully supported in devnet\n        // signature: [],\n        // sender_address: contractAddress,\n        contract_address: contractAddress,\n        entry_point_selector: getSelectorFromName(entryPointSelector),\n        calldata: CallData.compile(calldata)\n      }\n    ).then(this.responseParser.parseCallContractResponse);\n  }\n  async getBlock(blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_block\", { blockIdentifier }).then(\n      this.responseParser.parseGetBlockResponse\n    );\n  }\n  async getNonceForAddress(contractAddress, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_nonce\", { contractAddress, blockIdentifier });\n  }\n  async getStorageAt(contractAddress, key, blockIdentifier = this.blockIdentifier) {\n    const parsedKey = toBigInt(key).toString(10);\n    return this.fetchEndpoint(\"get_storage_at\", {\n      blockIdentifier,\n      contractAddress,\n      key: parsedKey\n    });\n  }\n  async getTransaction(txHash) {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint(\"get_transaction\", { transactionHash: txHashHex }).then((result) => {\n      if (Object.values(result).length === 1)\n        throw new LibraryError(result.status);\n      return this.responseParser.parseGetTransactionResponse(result);\n    });\n  }\n  async getTransactionReceipt(txHash) {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint(\"get_transaction_receipt\", { transactionHash: txHashHex }).then(\n      this.responseParser.parseGetTransactionReceiptResponse\n    );\n  }\n  async getClassAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_full_contract\", { blockIdentifier, contractAddress }).then(\n      this.responseParser.parseContractClassResponse\n    );\n  }\n  async getClassHashAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_class_hash_at\", { blockIdentifier, contractAddress });\n  }\n  async getClassByHash(classHash, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_class_by_hash\", { classHash, blockIdentifier }).then(\n      this.responseParser.parseContractClassResponse\n    );\n  }\n  async getCompiledClassByClassHash(classHash, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_compiled_class_by_class_hash\", { classHash, blockIdentifier });\n  }\n  async getContractVersion(contractAddress, classHash, { blockIdentifier = this.blockIdentifier, compiler = true } = {}) {\n    let contractClass;\n    if (contractAddress) {\n      contractClass = await this.getClassAt(contractAddress, blockIdentifier);\n    } else if (classHash) {\n      contractClass = await this.getClassByHash(classHash, blockIdentifier);\n    } else {\n      throw Error(\"getContractVersion require contractAddress or classHash\");\n    }\n    if (isSierra(contractClass)) {\n      if (compiler) {\n        const abiTest = getAbiContractVersion(contractClass.abi);\n        return { cairo: \"1\", compiler: abiTest.compiler };\n      }\n      return { cairo: \"1\", compiler: void 0 };\n    }\n    return { cairo: \"0\", compiler: \"0\" };\n  }\n  async invokeFunction(functionInvocation, details) {\n    return this.fetchEndpoint(\"add_transaction\", void 0, {\n      type: \"INVOKE_FUNCTION\" /* INVOKE */,\n      sender_address: functionInvocation.contractAddress,\n      calldata: CallData.compile(functionInvocation.calldata ?? []),\n      signature: signatureToDecimalArray(functionInvocation.signature),\n      nonce: toHex(details.nonce),\n      max_fee: toHex(details.maxFee || 0),\n      version: \"0x1\"\n    }).then(this.responseParser.parseInvokeFunctionResponse);\n  }\n  async deployAccountContract({ classHash, constructorCalldata, addressSalt, signature }, details) {\n    return this.fetchEndpoint(\"add_transaction\", void 0, {\n      type: \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */,\n      contract_address_salt: addressSalt ?? randomAddress(),\n      constructor_calldata: CallData.compile(constructorCalldata ?? []),\n      class_hash: toHex(classHash),\n      max_fee: toHex(details.maxFee || 0),\n      version: toHex(details.version || 0),\n      nonce: toHex(details.nonce),\n      signature: signatureToDecimalArray(signature)\n    }).then(this.responseParser.parseDeployContractResponse);\n  }\n  async declareContract({ senderAddress, contract, signature, compiledClassHash }, details) {\n    if (!isSierra(contract)) {\n      return this.fetchEndpoint(\"add_transaction\", void 0, {\n        type: \"DECLARE\" /* DECLARE */,\n        contract_class: contract,\n        nonce: toHex(details.nonce),\n        signature: signatureToDecimalArray(signature),\n        sender_address: senderAddress,\n        max_fee: toHex(details.maxFee || 0),\n        version: toHex(transactionVersion)\n      }).then(this.responseParser.parseDeclareContractResponse);\n    }\n    return this.fetchEndpoint(\"add_transaction\", void 0, {\n      type: \"DECLARE\" /* DECLARE */,\n      sender_address: senderAddress,\n      compiled_class_hash: compiledClassHash,\n      contract_class: contract,\n      nonce: toHex(details.nonce),\n      signature: signatureToDecimalArray(signature),\n      max_fee: toHex(details.maxFee || 0),\n      version: toHex(transactionVersion_2)\n    }).then(this.responseParser.parseDeclareContractResponse);\n  }\n  async getEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier, skipValidate = false) {\n    return this.getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier, skipValidate);\n  }\n  async getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier, skipValidate = false) {\n    const transaction = this.buildTransaction(\n      {\n        type: \"INVOKE_FUNCTION\" /* INVOKE */,\n        ...invocation,\n        ...invocationDetails\n      },\n      \"fee\"\n    );\n    return this.fetchEndpoint(\"estimate_fee\", { blockIdentifier, skipValidate }, transaction).then(\n      this.responseParser.parseFeeEstimateResponse\n    );\n  }\n  async getDeclareEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier, skipValidate = false) {\n    const transaction = this.buildTransaction(\n      {\n        type: \"DECLARE\" /* DECLARE */,\n        ...invocation,\n        ...details\n      },\n      \"fee\"\n    );\n    return this.fetchEndpoint(\"estimate_fee\", { blockIdentifier, skipValidate }, transaction).then(\n      this.responseParser.parseFeeEstimateResponse\n    );\n  }\n  async getDeployAccountEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier, skipValidate = false) {\n    const transaction = this.buildTransaction(\n      {\n        type: \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */,\n        ...invocation,\n        ...details\n      },\n      \"fee\"\n    );\n    return this.fetchEndpoint(\"estimate_fee\", { blockIdentifier, skipValidate }, transaction).then(\n      this.responseParser.parseFeeEstimateResponse\n    );\n  }\n  async getEstimateFeeBulk(invocations, { blockIdentifier = this.blockIdentifier, skipValidate = false }) {\n    const transactions = invocations.map((it) => this.buildTransaction(it, \"fee\"));\n    return this.fetchEndpoint(\n      \"estimate_fee_bulk\",\n      { blockIdentifier, skipValidate },\n      transactions\n    ).then(this.responseParser.parseFeeEstimateBulkResponse);\n  }\n  async getCode(contractAddress, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_code\", { contractAddress, blockIdentifier });\n  }\n  async waitForTransaction(txHash, options) {\n    let res;\n    let completed = false;\n    let retries = 0;\n    const retryInterval = options?.retryInterval ?? 5e3;\n    const errorStates = options?.errorStates ?? [\n      \"REJECTED\" /* REJECTED */,\n      \"NOT_RECEIVED\" /* NOT_RECEIVED */,\n      \"REVERTED\" /* REVERTED */\n    ];\n    const successStates = options?.successStates ?? [\n      \"SUCCEEDED\" /* SUCCEEDED */,\n      \"ACCEPTED_ON_L1\" /* ACCEPTED_ON_L1 */,\n      \"ACCEPTED_ON_L2\" /* ACCEPTED_ON_L2 */\n    ];\n    while (!completed) {\n      await wait(retryInterval);\n      res = await this.getTransactionStatus(txHash);\n      if (\"NOT_RECEIVED\" /* NOT_RECEIVED */ === res.finality_status && retries < 3) {\n        retries += 1;\n      } else if (successStates.includes(res.finality_status) || successStates.includes(res.execution_status)) {\n        completed = true;\n      } else if (errorStates.includes(res.finality_status) || errorStates.includes(res.execution_status)) {\n        let message;\n        if (res.tx_failure_reason) {\n          message = `${res.tx_status}: ${res.tx_failure_reason.code}\n${res.tx_failure_reason.error_message}`;\n        } else if (res.tx_revert_reason) {\n          message = `${res.tx_status}: ${res.tx_revert_reason}`;\n        } else {\n          message = res.tx_status;\n        }\n        const error = new Error(message);\n        error.response = res;\n        throw error;\n      }\n    }\n    const txReceipt = await this.getTransactionReceipt(txHash);\n    return txReceipt;\n  }\n  /**\n   * Gets the status of a transaction.\n   * @param txHash BigNumberish\n   * @returns GetTransactionStatusResponse - the transaction status object\n   */\n  async getTransactionStatus(txHash) {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint(\"get_transaction_status\", { transactionHash: txHashHex });\n  }\n  /**\n   * Gets the smart contract address on the goerli testnet.\n   * @returns GetContractAddressesResponse - starknet smart contract addresses\n   */\n  async getContractAddresses() {\n    return this.fetchEndpoint(\"get_contract_addresses\");\n  }\n  /**\n   * Gets the transaction trace from a tx id.\n   * @param txHash BigNumberish\n   * @returns TransactionTraceResponse - the transaction trace\n   */\n  async getTransactionTrace(txHash) {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint(\"get_transaction_trace\", { transactionHash: txHashHex });\n  }\n  async estimateMessageFee({ from_address, to_address, entry_point_selector, payload }, blockIdentifier = this.blockIdentifier) {\n    const validCallL1Handler = {\n      from_address: getDecimalString(from_address),\n      to_address: getHexString(to_address),\n      entry_point_selector: getSelector(entry_point_selector),\n      payload: getHexStringArray(payload)\n    };\n    return this.fetchEndpoint(\"estimate_message_fee\", { blockIdentifier }, validCallL1Handler);\n  }\n  /**\n   * Simulate transaction using Sequencer provider\n   * WARNING!: Sequencer will process only first element from invocations array\n   *\n   * @param invocations Array of invocations, but only first invocation will be processed\n   * @param blockIdentifier block identifier, default 'latest'\n   * @param skipValidate Skip Account __validate__ method\n   * @returns\n   */\n  async getSimulateTransaction(invocations, {\n    blockIdentifier = this.blockIdentifier,\n    skipValidate = false,\n    skipExecute = false\n  }) {\n    if (invocations.length > 1) {\n      console.warn(\"Sequencer simulate process only first element from invocations list\");\n    }\n    if (skipExecute) {\n      console.warn(\"Sequencer can't skip account __execute__\");\n    }\n    const transaction = this.buildTransaction(invocations[0]);\n    return this.fetchEndpoint(\n      \"simulate_transaction\",\n      {\n        blockIdentifier,\n        skipValidate: skipValidate ?? false\n      },\n      transaction\n    ).then(this.responseParser.parseSimulateTransactionResponse);\n  }\n  async getStateUpdate(blockIdentifier = this.blockIdentifier) {\n    const args = new Block(blockIdentifier).sequencerIdentifier;\n    return this.fetchEndpoint(\"get_state_update\", { ...args }).then(\n      this.responseParser.parseGetStateUpdateResponse\n    );\n  }\n  // consider adding an optional trace retrieval parameter to the getBlock method\n  async getBlockTraces(blockIdentifier = this.blockIdentifier) {\n    const args = new Block(blockIdentifier).sequencerIdentifier;\n    return this.fetchEndpoint(\"get_block_traces\", { ...args });\n  }\n  async getStarkName(address, StarknetIdContract2) {\n    return getStarkName(this, address, StarknetIdContract2);\n  }\n  async getAddressFromStarkName(name, StarknetIdContract2) {\n    return getAddressFromStarkName(this, name, StarknetIdContract2);\n  }\n  /**\n   * Build Single AccountTransaction from Single AccountInvocation\n   * @param invocation AccountInvocationItem\n   * @param versionType 'fee' | 'transaction' - used to determine default versions\n   * @returns AccountTransactionItem\n   */\n  buildTransaction(invocation, versionType) {\n    const defaultVersions = getVersionsByType(versionType);\n    const details = {\n      signature: signatureToDecimalArray(invocation.signature),\n      nonce: toHex(invocation.nonce)\n    };\n    if (invocation.type === \"INVOKE_FUNCTION\" /* INVOKE */) {\n      return {\n        type: invocation.type,\n        sender_address: invocation.contractAddress,\n        calldata: CallData.compile(invocation.calldata ?? []),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details\n      };\n    }\n    if (invocation.type === \"DECLARE\" /* DECLARE */) {\n      if (!isSierra(invocation.contract)) {\n        return {\n          type: invocation.type,\n          contract_class: invocation.contract,\n          sender_address: invocation.senderAddress,\n          version: toHex(invocation.version || defaultVersions.v1),\n          // fee from getDeclareEstimateFee use t.v. instead of feet.v.\n          ...details\n        };\n      }\n      return {\n        type: invocation.type,\n        contract_class: invocation.contract,\n        compiled_class_hash: invocation.compiledClassHash,\n        sender_address: invocation.senderAddress,\n        version: toHex(invocation.version || defaultVersions.v2),\n        // fee on getDeclareEstimateFee use t.v. instead of feet.v.\n        ...details\n      };\n    }\n    if (invocation.type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */) {\n      return {\n        type: invocation.type,\n        constructor_calldata: CallData.compile(invocation.constructorCalldata || []),\n        class_hash: toHex(invocation.classHash),\n        contract_address_salt: toHex(invocation.addressSalt || 0),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details\n      };\n    }\n    throw Error(\"Sequencer buildTransaction received unknown TransactionType\");\n  }\n};\n\n// src/provider/default.ts\nvar Provider = class {\n  constructor(providerOrOptions) {\n    if (providerOrOptions instanceof Provider) {\n      this.provider = providerOrOptions.provider;\n    } else if (providerOrOptions instanceof RpcProvider || providerOrOptions instanceof SequencerProvider) {\n      this.provider = providerOrOptions;\n    } else if (providerOrOptions && \"rpc\" in providerOrOptions) {\n      this.provider = new RpcProvider(providerOrOptions.rpc);\n    } else if (providerOrOptions && \"sequencer\" in providerOrOptions) {\n      this.provider = new SequencerProvider(providerOrOptions.sequencer);\n    } else {\n      this.provider = new RpcProvider();\n    }\n  }\n  async getChainId() {\n    return this.provider.getChainId();\n  }\n  async getBlock(blockIdentifier) {\n    return this.provider.getBlock(blockIdentifier);\n  }\n  async getClassAt(contractAddress, blockIdentifier) {\n    return this.provider.getClassAt(contractAddress, blockIdentifier);\n  }\n  async getClassHashAt(contractAddress, blockIdentifier) {\n    return this.provider.getClassHashAt(contractAddress, blockIdentifier);\n  }\n  getClassByHash(classHash) {\n    return this.provider.getClassByHash(classHash);\n  }\n  async getEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier) {\n    return this.provider.getEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier);\n  }\n  async getInvokeEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier, skipValidate) {\n    return this.provider.getInvokeEstimateFee(\n      invocationWithTxType,\n      invocationDetails,\n      blockIdentifier,\n      skipValidate\n    );\n  }\n  async getEstimateFeeBulk(invocations, options) {\n    return this.provider.getEstimateFeeBulk(invocations, options);\n  }\n  async getNonceForAddress(contractAddress, blockIdentifier) {\n    return this.provider.getNonceForAddress(contractAddress, blockIdentifier);\n  }\n  async getStorageAt(contractAddress, key, blockIdentifier) {\n    return this.provider.getStorageAt(contractAddress, key, blockIdentifier);\n  }\n  async getTransaction(txHash) {\n    return this.provider.getTransaction(txHash);\n  }\n  async getTransactionReceipt(txHash) {\n    return this.provider.getTransactionReceipt(txHash);\n  }\n  async callContract(request, blockIdentifier) {\n    return this.provider.callContract(request, blockIdentifier);\n  }\n  async invokeFunction(functionInvocation, details) {\n    return this.provider.invokeFunction(functionInvocation, details);\n  }\n  async deployAccountContract(payload, details) {\n    return this.provider.deployAccountContract(payload, details);\n  }\n  async declareContract(transaction, details) {\n    return this.provider.declareContract(transaction, details);\n  }\n  async getDeclareEstimateFee(transaction, details, blockIdentifier, skipValidate) {\n    return this.provider.getDeclareEstimateFee(transaction, details, blockIdentifier, skipValidate);\n  }\n  getDeployAccountEstimateFee(transaction, details, blockIdentifier, skipValidate) {\n    return this.provider.getDeployAccountEstimateFee(\n      transaction,\n      details,\n      blockIdentifier,\n      skipValidate\n    );\n  }\n  async getCode(contractAddress, blockIdentifier) {\n    return this.provider.getCode(contractAddress, blockIdentifier);\n  }\n  async waitForTransaction(txHash, options) {\n    return this.provider.waitForTransaction(txHash, options);\n  }\n  async getSimulateTransaction(invocations, options) {\n    return this.provider.getSimulateTransaction(invocations, options);\n  }\n  async getStateUpdate(blockIdentifier) {\n    return this.provider.getStateUpdate(blockIdentifier);\n  }\n  async getStarkName(address, StarknetIdContract2) {\n    return getStarkName(this, address, StarknetIdContract2);\n  }\n  async getAddressFromStarkName(name, StarknetIdContract2) {\n    return getAddressFromStarkName(this, name, StarknetIdContract2);\n  }\n  async getContractVersion(contractAddress, classHash, options) {\n    return this.provider.getContractVersion(contractAddress, classHash, options);\n  }\n};\n\n// src/signer/interface.ts\nvar SignerInterface = class {\n};\n\n// src/utils/transaction.ts\nvar transaction_exports = {};\n__export(transaction_exports, {\n  fromCallsToExecuteCalldata: () => fromCallsToExecuteCalldata,\n  fromCallsToExecuteCalldataWithNonce: () => fromCallsToExecuteCalldataWithNonce,\n  fromCallsToExecuteCalldata_cairo1: () => fromCallsToExecuteCalldata_cairo1,\n  getExecuteCalldata: () => getExecuteCalldata,\n  transformCallsToMulticallArrays: () => transformCallsToMulticallArrays,\n  transformCallsToMulticallArrays_cairo1: () => transformCallsToMulticallArrays_cairo1\n});\nvar transformCallsToMulticallArrays = (calls) => {\n  const callArray = [];\n  const calldata = [];\n  calls.forEach((call) => {\n    const data = CallData.compile(call.calldata || []);\n    callArray.push({\n      to: toBigInt(call.contractAddress).toString(10),\n      selector: toBigInt(getSelectorFromName(call.entrypoint)).toString(10),\n      data_offset: calldata.length.toString(),\n      data_len: data.length.toString()\n    });\n    calldata.push(...data);\n  });\n  return {\n    callArray,\n    calldata: CallData.compile({ calldata })\n  };\n};\nvar fromCallsToExecuteCalldata = (calls) => {\n  const { callArray, calldata } = transformCallsToMulticallArrays(calls);\n  const compiledCalls = CallData.compile({ callArray });\n  return [...compiledCalls, ...calldata];\n};\nvar fromCallsToExecuteCalldataWithNonce = (calls, nonce) => {\n  return [...fromCallsToExecuteCalldata(calls), toBigInt(nonce).toString()];\n};\nvar transformCallsToMulticallArrays_cairo1 = (calls) => {\n  const callArray = calls.map((call) => ({\n    to: toBigInt(call.contractAddress).toString(10),\n    selector: toBigInt(getSelectorFromName(call.entrypoint)).toString(10),\n    calldata: CallData.compile(call.calldata || [])\n  }));\n  return callArray;\n};\nvar fromCallsToExecuteCalldata_cairo1 = (calls) => {\n  const orderCalls = calls.map((call) => ({\n    contractAddress: call.contractAddress,\n    entrypoint: call.entrypoint,\n    calldata: Array.isArray(call.calldata) && \"__compiled__\" in call.calldata ? call.calldata : CallData.compile(call.calldata)\n    // RawArgsObject | RawArgsArray type\n  }));\n  return CallData.compile({ orderCalls });\n};\nvar getExecuteCalldata = (calls, cairoVersion = \"0\") => {\n  if (cairoVersion === \"1\") {\n    return fromCallsToExecuteCalldata_cairo1(calls);\n  }\n  return fromCallsToExecuteCalldata(calls);\n};\n\n// src/utils/typedData.ts\nvar typedData_exports = {};\n__export(typedData_exports, {\n  encodeData: () => encodeData,\n  encodeType: () => encodeType,\n  encodeValue: () => encodeValue,\n  getDependencies: () => getDependencies,\n  getMessageHash: () => getMessageHash,\n  getStructHash: () => getStructHash,\n  getTypeHash: () => getTypeHash,\n  isMerkleTreeType: () => isMerkleTreeType,\n  prepareSelector: () => prepareSelector\n});\n\n// src/utils/merkle.ts\nvar merkle_exports = {};\n__export(merkle_exports, {\n  MerkleTree: () => MerkleTree,\n  proofMerklePath: () => proofMerklePath\n});\nvar MerkleTree = class {\n  constructor(leafHashes) {\n    this.branches = [];\n    this.leaves = leafHashes;\n    this.root = this.build(leafHashes);\n  }\n  /**\n   * Create Merkle tree\n   * @param leaves hex-string array\n   * @returns format: hex-string; Merkle tree root\n   */\n  build(leaves) {\n    if (leaves.length === 1) {\n      return leaves[0];\n    }\n    if (leaves.length !== this.leaves.length) {\n      this.branches.push(leaves);\n    }\n    const newLeaves = [];\n    for (let i = 0; i < leaves.length; i += 2) {\n      if (i + 1 === leaves.length) {\n        newLeaves.push(MerkleTree.hash(leaves[i], \"0x0\"));\n      } else {\n        newLeaves.push(MerkleTree.hash(leaves[i], leaves[i + 1]));\n      }\n    }\n    return this.build(newLeaves);\n  }\n  /**\n   * Create pedersen hash from a and b\n   * @returns format: hex-string\n   */\n  static hash(a, b) {\n    const [aSorted, bSorted] = [toBigInt(a), toBigInt(b)].sort((x, y) => x >= y ? 1 : -1);\n    return _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.pedersen(aSorted, bSorted);\n  }\n  /**\n   * Return path to leaf\n   * @param leaf hex-string\n   * @param branch hex-string array\n   * @param hashPath hex-string array\n   * @returns format: hex-string array\n   */\n  getProof(leaf, branch = this.leaves, hashPath = []) {\n    const index = branch.indexOf(leaf);\n    if (index === -1) {\n      throw new Error(\"leaf not found\");\n    }\n    if (branch.length === 1) {\n      return hashPath;\n    }\n    const isLeft = index % 2 === 0;\n    const neededBranch = (isLeft ? branch[index + 1] : branch[index - 1]) ?? \"0x0\";\n    const newHashPath = [...hashPath, neededBranch];\n    const currentBranchLevelIndex = this.leaves.length === branch.length ? -1 : this.branches.findIndex((b) => b.length === branch.length);\n    const nextBranch = this.branches[currentBranchLevelIndex + 1] ?? [this.root];\n    return this.getProof(\n      MerkleTree.hash(isLeft ? leaf : neededBranch, isLeft ? neededBranch : leaf),\n      nextBranch,\n      newHashPath\n    );\n  }\n};\nfunction proofMerklePath(root, leaf, path) {\n  if (path.length === 0) {\n    return root === leaf;\n  }\n  const [next, ...rest] = path;\n  return proofMerklePath(root, MerkleTree.hash(leaf, next), rest);\n}\n\n// src/utils/typedData.ts\nfunction getHex(value) {\n  try {\n    return toHex(value);\n  } catch (e) {\n    if (typeof value === \"string\") {\n      return toHex(encodeShortString(value));\n    }\n    throw new Error(`Invalid BigNumberish: ${value}`);\n  }\n}\nvar validateTypedData = (data) => {\n  const typedData = data;\n  const valid = Boolean(typedData.types && typedData.primaryType && typedData.message);\n  return valid;\n};\nfunction prepareSelector(selector) {\n  return isHex(selector) ? selector : getSelectorFromName(selector);\n}\nfunction isMerkleTreeType(type) {\n  return type.type === \"merkletree\";\n}\nvar getDependencies = (types, type, dependencies = []) => {\n  if (type[type.length - 1] === \"*\") {\n    type = type.slice(0, -1);\n  }\n  if (dependencies.includes(type)) {\n    return dependencies;\n  }\n  if (!types[type]) {\n    return dependencies;\n  }\n  return [\n    type,\n    ...types[type].reduce(\n      (previous, t) => [\n        ...previous,\n        ...getDependencies(types, t.type, previous).filter(\n          (dependency) => !previous.includes(dependency)\n        )\n      ],\n      []\n    )\n  ];\n};\nfunction getMerkleTreeType(types, ctx) {\n  if (ctx.parent && ctx.key) {\n    const parentType = types[ctx.parent];\n    const merkleType = parentType.find((t) => t.name === ctx.key);\n    const isMerkleTree = isMerkleTreeType(merkleType);\n    if (!isMerkleTree) {\n      throw new Error(`${ctx.key} is not a merkle tree`);\n    }\n    if (merkleType.contains.endsWith(\"*\")) {\n      throw new Error(`Merkle tree contain property must not be an array but was given ${ctx.key}`);\n    }\n    return merkleType.contains;\n  }\n  return \"raw\";\n}\nvar encodeType = (types, type) => {\n  const [primary, ...dependencies] = getDependencies(types, type);\n  const newTypes = !primary ? [] : [primary, ...dependencies.sort()];\n  return newTypes.map((dependency) => {\n    return `${dependency}(${types[dependency].map((t) => `${t.name}:${t.type}`)})`;\n  }).join(\"\");\n};\nvar getTypeHash = (types, type) => {\n  return getSelectorFromName(encodeType(types, type));\n};\nvar encodeValue = (types, type, data, ctx = {}) => {\n  if (types[type]) {\n    return [type, getStructHash(types, type, data)];\n  }\n  if (Object.keys(types).map((x) => `${x}*`).includes(type)) {\n    const structHashes = data.map((struct) => {\n      return getStructHash(types, type.slice(0, -1), struct);\n    });\n    return [type, computeHashOnElements(structHashes)];\n  }\n  if (type === \"merkletree\") {\n    const merkleTreeType = getMerkleTreeType(types, ctx);\n    const structHashes = data.map((struct) => {\n      return encodeValue(types, merkleTreeType, struct)[1];\n    });\n    const { root } = new MerkleTree(structHashes);\n    return [\"felt\", root];\n  }\n  if (type === \"felt*\") {\n    return [\"felt*\", computeHashOnElements(data)];\n  }\n  if (type === \"selector\") {\n    return [\"felt\", prepareSelector(data)];\n  }\n  return [type, getHex(data)];\n};\nvar encodeData = (types, type, data) => {\n  const [returnTypes, values] = types[type].reduce(\n    ([ts, vs], field) => {\n      if (data[field.name] === void 0 || data[field.name] === null) {\n        throw new Error(`Cannot encode data: missing data for '${field.name}'`);\n      }\n      const value = data[field.name];\n      const [t, encodedValue] = encodeValue(types, field.type, value, {\n        parent: type,\n        key: field.name\n      });\n      return [\n        [...ts, t],\n        [...vs, encodedValue]\n      ];\n    },\n    [[\"felt\"], [getTypeHash(types, type)]]\n  );\n  return [returnTypes, values];\n};\nvar getStructHash = (types, type, data) => {\n  return computeHashOnElements(encodeData(types, type, data)[1]);\n};\nvar getMessageHash = (typedData, account) => {\n  if (!validateTypedData(typedData)) {\n    throw new Error(\"Typed data does not match JSON schema\");\n  }\n  const message = [\n    encodeShortString(\"StarkNet Message\"),\n    getStructHash(typedData.types, \"StarkNetDomain\", typedData.domain),\n    account,\n    getStructHash(typedData.types, typedData.primaryType, typedData.message)\n  ];\n  return computeHashOnElements(message);\n};\n\n// src/signer/default.ts\nvar Signer = class {\n  constructor(pk = _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.utils.randomPrivateKey()) {\n    this.pk = pk instanceof Uint8Array ? buf2hex(pk) : toHex(pk);\n  }\n  async getPubKey() {\n    return _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.getStarkKey(this.pk);\n  }\n  async signMessage(typedData, accountAddress) {\n    const msgHash = getMessageHash(typedData, accountAddress);\n    return _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.sign(msgHash, this.pk);\n  }\n  async signTransaction(transactions, transactionsDetail, abis) {\n    if (abis && abis.length !== transactions.length) {\n      throw new Error(\"ABI must be provided for each transaction or no transaction\");\n    }\n    const calldata = getExecuteCalldata(transactions, transactionsDetail.cairoVersion);\n    const msgHash = calculateTransactionHash(\n      transactionsDetail.walletAddress,\n      transactionsDetail.version,\n      calldata,\n      transactionsDetail.maxFee,\n      transactionsDetail.chainId,\n      transactionsDetail.nonce\n    );\n    return _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.sign(msgHash, this.pk);\n  }\n  async signDeployAccountTransaction({\n    classHash,\n    contractAddress,\n    constructorCalldata,\n    addressSalt,\n    maxFee,\n    version,\n    chainId,\n    nonce\n  }) {\n    const msgHash = calculateDeployAccountTransactionHash(\n      contractAddress,\n      classHash,\n      CallData.compile(constructorCalldata),\n      addressSalt,\n      version,\n      maxFee,\n      chainId,\n      nonce\n    );\n    return _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.sign(msgHash, this.pk);\n  }\n  async signDeclareTransaction({\n    classHash,\n    senderAddress,\n    chainId,\n    maxFee,\n    version,\n    nonce,\n    compiledClassHash\n  }) {\n    const msgHash = calculateDeclareTransactionHash(\n      classHash,\n      senderAddress,\n      version,\n      maxFee,\n      chainId,\n      nonce,\n      compiledClassHash\n    );\n    return _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.sign(msgHash, this.pk);\n  }\n};\n\n// src/utils/events.ts\nfunction parseUDCEvent(txReceipt) {\n  if (!txReceipt.events) {\n    throw new Error(\"UDC emitted event is empty\");\n  }\n  const event = txReceipt.events.find(\n    (it) => cleanHex(it.from_address) === cleanHex(UDC.ADDRESS)\n  ) || {\n    data: []\n  };\n  return {\n    transaction_hash: txReceipt.transaction_hash,\n    contract_address: event.data[0],\n    address: event.data[0],\n    deployer: event.data[1],\n    unique: event.data[2],\n    classHash: event.data[3],\n    calldata_len: event.data[4],\n    calldata: event.data.slice(5, 5 + parseInt(event.data[4], 16)),\n    salt: event.data[event.data.length - 1]\n  };\n}\n\n// src/account/default.ts\nvar Account = class extends Provider {\n  constructor(providerOrOptions, address, pkOrSigner, cairoVersion) {\n    super(providerOrOptions);\n    this.deploySelf = this.deployAccount;\n    this.address = address.toLowerCase();\n    this.signer = typeof pkOrSigner === \"string\" || pkOrSigner instanceof Uint8Array ? new Signer(pkOrSigner) : pkOrSigner;\n    if (cairoVersion) {\n      this.cairoVersion = cairoVersion.toString();\n    }\n  }\n  async getNonce(blockIdentifier) {\n    return super.getNonceForAddress(this.address, blockIdentifier);\n  }\n  async getNonceSafe(nonce) {\n    try {\n      return toBigInt(nonce ?? await this.getNonce());\n    } catch (error) {\n      return 0n;\n    }\n  }\n  /**\n   * Retrieves the Cairo version from the network and sets `cairoVersion` if not already set in the constructor\n   * @param classHash if provided detects Cairo version from classHash, otherwise from the account address\n   */\n  async getCairoVersion(classHash) {\n    if (!this.cairoVersion) {\n      const { cairo } = classHash ? await super.getContractVersion(void 0, classHash) : await super.getContractVersion(this.address);\n      this.cairoVersion = cairo;\n    }\n    return this.cairoVersion;\n  }\n  async estimateFee(calls, estimateFeeDetails) {\n    return this.estimateInvokeFee(calls, estimateFeeDetails);\n  }\n  async estimateInvokeFee(calls, { nonce: providedNonce, blockIdentifier, skipValidate } = {}) {\n    const transactions = Array.isArray(calls) ? calls : [calls];\n    const nonce = toBigInt(providedNonce ?? await this.getNonce());\n    const version = toBigInt(feeTransactionVersion);\n    const chainId = await this.getChainId();\n    const signerDetails = {\n      walletAddress: this.address,\n      nonce,\n      maxFee: ZERO,\n      version,\n      chainId,\n      cairoVersion: await this.getCairoVersion()\n    };\n    const invocation = await this.buildInvocation(transactions, signerDetails);\n    const response = await super.getInvokeEstimateFee(\n      { ...invocation },\n      { version, nonce },\n      blockIdentifier,\n      skipValidate\n    );\n    const suggestedMaxFee = estimatedFeeToMaxFee(response.overall_fee);\n    return {\n      ...response,\n      suggestedMaxFee\n    };\n  }\n  async estimateDeclareFee({ contract, classHash: providedClassHash, casm, compiledClassHash }, { blockIdentifier, nonce: providedNonce, skipValidate } = {}) {\n    const nonce = toBigInt(providedNonce ?? await this.getNonce());\n    const version = !isSierra(contract) ? feeTransactionVersion : feeTransactionVersion_2;\n    const chainId = await this.getChainId();\n    const declareContractTransaction = await this.buildDeclarePayload(\n      { classHash: providedClassHash, contract, casm, compiledClassHash },\n      {\n        nonce,\n        chainId,\n        version,\n        walletAddress: this.address,\n        maxFee: ZERO,\n        cairoVersion: void 0\n        // unused parameter\n      }\n    );\n    const response = await super.getDeclareEstimateFee(\n      declareContractTransaction,\n      { version, nonce },\n      blockIdentifier,\n      skipValidate\n    );\n    const suggestedMaxFee = estimatedFeeToMaxFee(response.overall_fee);\n    return {\n      ...response,\n      suggestedMaxFee\n    };\n  }\n  async estimateAccountDeployFee({\n    classHash,\n    addressSalt = 0,\n    constructorCalldata = [],\n    contractAddress: providedContractAddress\n  }, { blockIdentifier, skipValidate } = {}) {\n    const version = toBigInt(feeTransactionVersion);\n    const nonce = ZERO;\n    const chainId = await this.getChainId();\n    const payload = await this.buildAccountDeployPayload(\n      { classHash, addressSalt, constructorCalldata, contractAddress: providedContractAddress },\n      {\n        nonce,\n        chainId,\n        version,\n        walletAddress: this.address,\n        // unused parameter\n        maxFee: ZERO,\n        cairoVersion: void 0\n        // unused parameter\n      }\n    );\n    const response = await super.getDeployAccountEstimateFee(\n      { ...payload },\n      { version, nonce },\n      blockIdentifier,\n      skipValidate\n    );\n    const suggestedMaxFee = estimatedFeeToMaxFee(response.overall_fee);\n    return {\n      ...response,\n      suggestedMaxFee\n    };\n  }\n  async estimateDeployFee(payload, transactionsDetail) {\n    const calls = this.buildUDCContractPayload(payload);\n    return this.estimateInvokeFee(calls, transactionsDetail);\n  }\n  async estimateFeeBulk(invocations, { nonce, blockIdentifier, skipValidate } = {}) {\n    const accountInvocations = await this.accountInvocationsFactory(invocations, {\n      versions: [feeTransactionVersion, feeTransactionVersion_2],\n      nonce,\n      blockIdentifier\n    });\n    const response = await super.getEstimateFeeBulk(accountInvocations, {\n      blockIdentifier,\n      skipValidate\n    });\n    return [].concat(response).map((elem) => {\n      const suggestedMaxFee = estimatedFeeToMaxFee(elem.overall_fee);\n      return {\n        ...elem,\n        suggestedMaxFee\n      };\n    });\n  }\n  async buildInvocation(call, signerDetails) {\n    const calldata = getExecuteCalldata(call, await this.getCairoVersion());\n    const signature = await this.signer.signTransaction(call, signerDetails);\n    return {\n      contractAddress: this.address,\n      calldata,\n      signature\n    };\n  }\n  async execute(calls, abis = void 0, transactionsDetail = {}) {\n    const transactions = Array.isArray(calls) ? calls : [calls];\n    const nonce = toBigInt(transactionsDetail.nonce ?? await this.getNonce());\n    const maxFee = transactionsDetail.maxFee ?? await this.getSuggestedMaxFee(\n      { type: \"INVOKE_FUNCTION\" /* INVOKE */, payload: calls },\n      transactionsDetail\n    );\n    const version = toBigInt(transactionVersion);\n    const chainId = await this.getChainId();\n    const signerDetails = {\n      walletAddress: this.address,\n      nonce,\n      maxFee,\n      version,\n      chainId,\n      cairoVersion: await this.getCairoVersion()\n    };\n    const signature = await this.signer.signTransaction(transactions, signerDetails, abis);\n    const calldata = getExecuteCalldata(transactions, await this.getCairoVersion());\n    return this.invokeFunction(\n      { contractAddress: this.address, calldata, signature },\n      {\n        nonce,\n        maxFee,\n        version\n      }\n    );\n  }\n  /**\n   * First check if contract is already declared, if not declare it\n   * If contract already declared returned transaction_hash is ''.\n   * Method will pass even if contract is already declared\n   * @param transactionsDetail (optional)\n   */\n  async declareIfNot(payload, transactionsDetail = {}) {\n    const declareContractPayload = extractContractHashes(payload);\n    try {\n      await this.getClassByHash(declareContractPayload.classHash);\n    } catch (error) {\n      return this.declare(payload, transactionsDetail);\n    }\n    return {\n      transaction_hash: \"\",\n      class_hash: declareContractPayload.classHash\n    };\n  }\n  async declare(payload, transactionsDetail = {}) {\n    const declareContractPayload = extractContractHashes(payload);\n    const details = {};\n    details.nonce = toBigInt(transactionsDetail.nonce ?? await this.getNonce());\n    details.maxFee = transactionsDetail.maxFee ?? await this.getSuggestedMaxFee(\n      {\n        type: \"DECLARE\" /* DECLARE */,\n        payload: declareContractPayload\n      },\n      transactionsDetail\n    );\n    details.version = !isSierra(payload.contract) ? transactionVersion : transactionVersion_2;\n    details.chainId = await this.getChainId();\n    const declareContractTransaction = await this.buildDeclarePayload(declareContractPayload, {\n      ...details,\n      walletAddress: this.address,\n      cairoVersion: void 0\n      // unused parameter\n    });\n    return this.declareContract(declareContractTransaction, details);\n  }\n  async deploy(payload, details) {\n    const params = [].concat(payload).map((it) => {\n      const {\n        classHash,\n        salt,\n        unique = true,\n        constructorCalldata = []\n      } = it;\n      const compiledConstructorCallData = CallData.compile(constructorCalldata);\n      const deploySalt = salt ?? randomAddress();\n      return {\n        call: {\n          contractAddress: UDC.ADDRESS,\n          entrypoint: UDC.ENTRYPOINT,\n          calldata: [\n            classHash,\n            deploySalt,\n            toCairoBool(unique),\n            compiledConstructorCallData.length,\n            ...compiledConstructorCallData\n          ]\n        },\n        address: calculateContractAddressFromHash(\n          unique ? _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.pedersen(this.address, deploySalt) : deploySalt,\n          classHash,\n          compiledConstructorCallData,\n          unique ? UDC.ADDRESS : 0\n        )\n      };\n    });\n    const calls = params.map((it) => it.call);\n    const addresses = params.map((it) => it.address);\n    const invokeResponse = await this.execute(calls, void 0, details);\n    return {\n      ...invokeResponse,\n      contract_address: addresses\n    };\n  }\n  async deployContract(payload, details) {\n    const deployTx = await this.deploy(payload, details);\n    const txReceipt = await this.waitForTransaction(deployTx.transaction_hash);\n    return parseUDCEvent(txReceipt);\n  }\n  async declareAndDeploy(payload, details) {\n    const { constructorCalldata, salt, unique } = payload;\n    let declare = await this.declareIfNot(payload, details);\n    if (declare.transaction_hash !== \"\") {\n      const tx = await this.waitForTransaction(declare.transaction_hash);\n      declare = { ...declare, ...tx };\n    }\n    const deploy = await this.deployContract(\n      { classHash: declare.class_hash, salt, unique, constructorCalldata },\n      details\n    );\n    return { declare: { ...declare }, deploy };\n  }\n  async deployAccount({\n    classHash,\n    constructorCalldata = [],\n    addressSalt = 0,\n    contractAddress: providedContractAddress\n  }, transactionsDetail = {}) {\n    const version = toBigInt(transactionVersion);\n    const nonce = ZERO;\n    const chainId = await this.getChainId();\n    const compiledCalldata = CallData.compile(constructorCalldata);\n    const contractAddress = providedContractAddress ?? calculateContractAddressFromHash(addressSalt, classHash, compiledCalldata, 0);\n    const maxFee = transactionsDetail.maxFee ?? await this.getSuggestedMaxFee(\n      {\n        type: \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */,\n        payload: {\n          classHash,\n          constructorCalldata: compiledCalldata,\n          addressSalt,\n          contractAddress\n        }\n      },\n      transactionsDetail\n    );\n    const signature = await this.signer.signDeployAccountTransaction({\n      classHash,\n      constructorCalldata: compiledCalldata,\n      contractAddress,\n      addressSalt,\n      chainId,\n      maxFee,\n      version,\n      nonce\n    });\n    return this.deployAccountContract(\n      { classHash, addressSalt, constructorCalldata, signature },\n      {\n        nonce,\n        maxFee,\n        version\n      }\n    );\n  }\n  async signMessage(typedData) {\n    return this.signer.signMessage(typedData, this.address);\n  }\n  async hashMessage(typedData) {\n    return getMessageHash(typedData, this.address);\n  }\n  async verifyMessageHash(hash, signature) {\n    try {\n      await this.callContract({\n        contractAddress: this.address,\n        entrypoint: \"isValidSignature\",\n        calldata: CallData.compile({\n          hash: toBigInt(hash).toString(),\n          signature: formatSignature(signature)\n        })\n      });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  async verifyMessage(typedData, signature) {\n    const hash = await this.hashMessage(typedData);\n    return this.verifyMessageHash(hash, signature);\n  }\n  async getSuggestedMaxFee({ type, payload }, details) {\n    let feeEstimate;\n    switch (type) {\n      case \"INVOKE_FUNCTION\" /* INVOKE */:\n        feeEstimate = await this.estimateInvokeFee(payload, details);\n        break;\n      case \"DECLARE\" /* DECLARE */:\n        feeEstimate = await this.estimateDeclareFee(payload, details);\n        break;\n      case \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */:\n        feeEstimate = await this.estimateAccountDeployFee(payload, details);\n        break;\n      case \"DEPLOY\" /* DEPLOY */:\n        feeEstimate = await this.estimateDeployFee(payload, details);\n        break;\n      default:\n        feeEstimate = { suggestedMaxFee: ZERO, overall_fee: ZERO };\n        break;\n    }\n    return feeEstimate.suggestedMaxFee;\n  }\n  /**\n   * will be renamed to buildDeclareContractTransaction\n   */\n  async buildDeclarePayload(payload, { nonce, chainId, version, walletAddress, maxFee }) {\n    const { classHash, contract, compiledClassHash } = extractContractHashes(payload);\n    const compressedCompiledContract = parseContract(contract);\n    const signature = await this.signer.signDeclareTransaction({\n      classHash,\n      compiledClassHash,\n      senderAddress: walletAddress,\n      chainId,\n      maxFee,\n      version,\n      nonce\n    });\n    return {\n      senderAddress: walletAddress,\n      signature,\n      contract: compressedCompiledContract,\n      compiledClassHash\n    };\n  }\n  async buildAccountDeployPayload({\n    classHash,\n    addressSalt = 0,\n    constructorCalldata = [],\n    contractAddress: providedContractAddress\n  }, { nonce, chainId, version, maxFee }) {\n    const compiledCalldata = CallData.compile(constructorCalldata);\n    const contractAddress = providedContractAddress ?? calculateContractAddressFromHash(addressSalt, classHash, compiledCalldata, 0);\n    const signature = await this.signer.signDeployAccountTransaction({\n      classHash,\n      contractAddress,\n      chainId,\n      maxFee,\n      version,\n      nonce,\n      addressSalt,\n      constructorCalldata: compiledCalldata\n    });\n    return {\n      classHash,\n      addressSalt,\n      constructorCalldata: compiledCalldata,\n      signature\n    };\n  }\n  buildUDCContractPayload(payload) {\n    const calls = [].concat(payload).map((it) => {\n      const {\n        classHash,\n        salt = \"0\",\n        unique = true,\n        constructorCalldata = []\n      } = it;\n      const compiledConstructorCallData = CallData.compile(constructorCalldata);\n      return {\n        contractAddress: UDC.ADDRESS,\n        entrypoint: UDC.ENTRYPOINT,\n        calldata: [\n          classHash,\n          salt,\n          toCairoBool(unique),\n          compiledConstructorCallData.length,\n          ...compiledConstructorCallData\n        ]\n      };\n    });\n    return calls;\n  }\n  async simulateTransaction(invocations, { nonce, blockIdentifier, skipValidate, skipExecute } = {}) {\n    const accountInvocations = await this.accountInvocationsFactory(invocations, {\n      versions: [transactionVersion, transactionVersion_2],\n      nonce,\n      blockIdentifier\n    });\n    return super.getSimulateTransaction(accountInvocations, {\n      blockIdentifier,\n      skipValidate,\n      skipExecute\n    });\n  }\n  async accountInvocationsFactory(invocations, { versions, nonce, blockIdentifier }) {\n    const version = versions[0];\n    const safeNonce = await this.getNonceSafe(nonce);\n    const chainId = await this.getChainId();\n    const tx0Payload = \"payload\" in invocations[0] ? invocations[0].payload : invocations[0];\n    const cairoVersion = invocations[0].type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */ ? await this.getCairoVersion(tx0Payload.classHash) : await this.getCairoVersion();\n    return Promise.all(\n      [].concat(invocations).map(async (transaction, index) => {\n        const txPayload = \"payload\" in transaction ? transaction.payload : transaction;\n        const signerDetails = {\n          walletAddress: this.address,\n          nonce: toBigInt(Number(safeNonce) + index),\n          maxFee: ZERO,\n          version,\n          chainId,\n          cairoVersion\n        };\n        const common = {\n          type: transaction.type,\n          version,\n          nonce: toBigInt(Number(safeNonce) + index),\n          blockIdentifier\n        };\n        if (transaction.type === \"INVOKE_FUNCTION\" /* INVOKE */) {\n          const payload = await this.buildInvocation(\n            [].concat(txPayload),\n            signerDetails\n          );\n          return {\n            ...common,\n            ...payload\n          };\n        }\n        if (transaction.type === \"DECLARE\" /* DECLARE */) {\n          signerDetails.version = !isSierra(txPayload.contract) ? toBigInt(versions[0]) : toBigInt(versions[1]);\n          const payload = await this.buildDeclarePayload(txPayload, signerDetails);\n          return {\n            ...common,\n            ...payload,\n            version: signerDetails.version\n          };\n        }\n        if (transaction.type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */) {\n          const payload = await this.buildAccountDeployPayload(txPayload, signerDetails);\n          return {\n            ...common,\n            ...payload\n          };\n        }\n        if (transaction.type === \"DEPLOY\" /* DEPLOY */) {\n          const calls = this.buildUDCContractPayload(txPayload);\n          const payload = await this.buildInvocation(calls, signerDetails);\n          return {\n            ...common,\n            ...payload,\n            type: \"INVOKE_FUNCTION\" /* INVOKE */\n          };\n        }\n        throw Error(`accountInvocationsFactory: unsupported transaction type: ${transaction}`);\n      })\n    );\n  }\n  async getStarkName(address = this.address, StarknetIdContract2) {\n    return super.getStarkName(address, StarknetIdContract2);\n  }\n};\n\n// src/provider/interface.ts\nvar ProviderInterface = class {\n};\n\n// src/provider/index.ts\nvar defaultProvider = new Provider({ rpc: { default: true } });\n\n// src/account/interface.ts\nvar AccountInterface = class extends ProviderInterface {\n};\n\n// src/utils/events/index.ts\nvar events_exports = {};\n__export(events_exports, {\n  getAbiEvents: () => getAbiEvents,\n  parseEvents: () => parseEvents\n});\nfunction getAbiEvents(abi) {\n  return abi.filter((abiEntry) => abiEntry.type === \"event\" && (abiEntry.size || abiEntry.kind !== \"enum\")).reduce((acc, abiEntry) => {\n    const entryName = abiEntry.name.slice(abiEntry.name.lastIndexOf(\":\") + 1);\n    const abiEntryMod = { ...abiEntry };\n    abiEntryMod.name = entryName;\n    return {\n      ...acc,\n      [addHexPrefix(_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.keccak(utf8ToArray(entryName)).toString(16))]: abiEntryMod\n    };\n  }, {});\n}\nfunction parseEvents(providerReceivedEvents, abiEvents, abiStructs, abiEnums) {\n  const ret = providerReceivedEvents.flat().reduce((acc, recEvent) => {\n    const abiEvent = abiEvents[recEvent.keys[0]];\n    if (!abiEvent) {\n      return acc;\n    }\n    const parsedEvent = {};\n    parsedEvent[abiEvent.name] = {};\n    recEvent.keys.shift();\n    const keysIter = recEvent.keys[Symbol.iterator]();\n    const dataIter = recEvent.data[Symbol.iterator]();\n    const abiEventKeys = abiEvent.members?.filter((it) => it.kind === \"key\") || abiEvent.keys;\n    const abiEventData = abiEvent.members?.filter((it) => it.kind === \"data\") || abiEvent.data;\n    abiEventKeys.forEach((key) => {\n      parsedEvent[abiEvent.name][key.name] = responseParser(\n        keysIter,\n        key,\n        abiStructs,\n        abiEnums,\n        parsedEvent[abiEvent.name]\n      );\n    });\n    abiEventData.forEach((data) => {\n      parsedEvent[abiEvent.name][data.name] = responseParser(\n        dataIter,\n        data,\n        abiStructs,\n        abiEnums,\n        parsedEvent[abiEvent.name]\n      );\n    });\n    acc.push(parsedEvent);\n    return acc;\n  }, []);\n  return ret;\n}\n\n// src/contract/default.ts\nvar splitArgsAndOptions = (args) => {\n  const options = [\n    \"blockIdentifier\",\n    \"parseRequest\",\n    \"parseResponse\",\n    \"formatResponse\",\n    \"maxFee\",\n    \"nonce\",\n    \"signature\",\n    \"addressSalt\"\n  ];\n  const lastArg = args[args.length - 1];\n  if (typeof lastArg === \"object\" && options.some((x) => x in lastArg)) {\n    return { args, options: args.pop() };\n  }\n  return { args };\n};\nfunction buildCall(contract, functionAbi) {\n  return async function(...args) {\n    const params = splitArgsAndOptions(args);\n    return contract.call(functionAbi.name, params.args, {\n      parseRequest: true,\n      parseResponse: true,\n      ...params.options\n    });\n  };\n}\nfunction buildInvoke(contract, functionAbi) {\n  return async function(...args) {\n    const params = splitArgsAndOptions(args);\n    return contract.invoke(functionAbi.name, params.args, {\n      parseRequest: true,\n      ...params.options\n    });\n  };\n}\nfunction buildDefault(contract, functionAbi) {\n  if (functionAbi.stateMutability === \"view\" || functionAbi.state_mutability === \"view\") {\n    return buildCall(contract, functionAbi);\n  }\n  return buildInvoke(contract, functionAbi);\n}\nfunction buildPopulate(contract, functionAbi) {\n  return function(...args) {\n    return contract.populate(functionAbi.name, args);\n  };\n}\nfunction buildEstimate(contract, functionAbi) {\n  return function(...args) {\n    return contract.estimate(functionAbi.name, args);\n  };\n}\nfunction getCalldata(args, callback) {\n  if (Array.isArray(args) && \"__compiled__\" in args)\n    return args;\n  if (Array.isArray(args) && Array.isArray(args[0]) && \"__compiled__\" in args[0])\n    return args[0];\n  return callback();\n}\nvar Contract = class {\n  /**\n   * Contract class to handle contract methods\n   *\n   * @param abi - Abi of the contract object\n   * @param address (optional) - address to connect to\n   * @param providerOrAccount (optional) - Provider or Account to attach to\n   */\n  constructor(abi, address, providerOrAccount = defaultProvider) {\n    this.address = address && address.toLowerCase();\n    this.providerOrAccount = providerOrAccount;\n    this.callData = new CallData(abi);\n    this.structs = CallData.getAbiStruct(abi);\n    this.events = getAbiEvents(abi);\n    const parser = createAbiParser(abi);\n    this.abi = parser.getLegacyFormat();\n    const options = { enumerable: true, value: {}, writable: false };\n    Object.defineProperties(this, {\n      functions: { enumerable: true, value: {}, writable: false },\n      callStatic: { enumerable: true, value: {}, writable: false },\n      populateTransaction: { enumerable: true, value: {}, writable: false },\n      estimateFee: { enumerable: true, value: {}, writable: false }\n    });\n    this.abi.forEach((abiElement) => {\n      if (abiElement.type !== \"function\")\n        return;\n      const signature = abiElement.name;\n      if (!this[signature]) {\n        Object.defineProperty(this, signature, {\n          ...options,\n          value: buildDefault(this, abiElement)\n        });\n      }\n      if (!this.functions[signature]) {\n        Object.defineProperty(this.functions, signature, {\n          ...options,\n          value: buildDefault(this, abiElement)\n        });\n      }\n      if (!this.callStatic[signature]) {\n        Object.defineProperty(this.callStatic, signature, {\n          ...options,\n          value: buildCall(this, abiElement)\n        });\n      }\n      if (!this.populateTransaction[signature]) {\n        Object.defineProperty(this.populateTransaction, signature, {\n          ...options,\n          value: buildPopulate(this, abiElement)\n        });\n      }\n      if (!this.estimateFee[signature]) {\n        Object.defineProperty(this.estimateFee, signature, {\n          ...options,\n          value: buildEstimate(this, abiElement)\n        });\n      }\n    });\n  }\n  attach(address) {\n    this.address = address;\n  }\n  connect(providerOrAccount) {\n    this.providerOrAccount = providerOrAccount;\n  }\n  async deployed() {\n    if (this.deployTransactionHash) {\n      await this.providerOrAccount.waitForTransaction(this.deployTransactionHash);\n      this.deployTransactionHash = void 0;\n    }\n    return this;\n  }\n  async call(method, args = [], {\n    parseRequest = true,\n    parseResponse = true,\n    formatResponse = void 0,\n    blockIdentifier = void 0\n  } = {}) {\n    assert(this.address !== null, \"contract is not connected to an address\");\n    const calldata = getCalldata(args, () => {\n      if (parseRequest) {\n        this.callData.validate(\"CALL\" /* CALL */, method, args);\n        return this.callData.compile(method, args);\n      }\n      console.warn(\"Call skipped parsing but provided rawArgs, possible malfunction request\");\n      return args;\n    });\n    return this.providerOrAccount.callContract(\n      {\n        contractAddress: this.address,\n        calldata,\n        entrypoint: method\n      },\n      blockIdentifier\n    ).then((x) => {\n      if (!parseResponse) {\n        return x.result;\n      }\n      if (formatResponse) {\n        return this.callData.format(method, x.result, formatResponse);\n      }\n      return this.callData.parse(method, x.result);\n    });\n  }\n  invoke(method, args = [], { parseRequest = true, maxFee, nonce, signature } = {}) {\n    assert(this.address !== null, \"contract is not connected to an address\");\n    const calldata = getCalldata(args, () => {\n      if (parseRequest) {\n        this.callData.validate(\"INVOKE\" /* INVOKE */, method, args);\n        return this.callData.compile(method, args);\n      }\n      console.warn(\"Invoke skipped parsing but provided rawArgs, possible malfunction request\");\n      return args;\n    });\n    const invocation = {\n      contractAddress: this.address,\n      calldata,\n      entrypoint: method\n    };\n    if (\"execute\" in this.providerOrAccount) {\n      return this.providerOrAccount.execute(invocation, void 0, {\n        maxFee,\n        nonce\n      });\n    }\n    if (!nonce)\n      throw new Error(`Nonce is required when invoking a function without an account`);\n    console.warn(`Invoking ${method} without an account. This will not work on a public node.`);\n    return this.providerOrAccount.invokeFunction(\n      {\n        ...invocation,\n        signature\n      },\n      {\n        nonce\n      }\n    );\n  }\n  async estimate(method, args = []) {\n    assert(this.address !== null, \"contract is not connected to an address\");\n    if (!getCalldata(args, () => false)) {\n      this.callData.validate(\"INVOKE\" /* INVOKE */, method, args);\n    }\n    const invocation = this.populate(method, args);\n    if (\"estimateInvokeFee\" in this.providerOrAccount) {\n      return this.providerOrAccount.estimateInvokeFee(invocation);\n    }\n    throw Error(\"Contract must be connected to the account contract to estimate\");\n  }\n  populate(method, args = []) {\n    const calldata = getCalldata(args, () => this.callData.compile(method, args));\n    return {\n      contractAddress: this.address,\n      entrypoint: method,\n      calldata\n    };\n  }\n  parseEvents(receipt) {\n    return parseEvents(\n      receipt.events?.filter(\n        (event) => cleanHex(event.from_address) === cleanHex(this.address),\n        []\n      ) || [],\n      this.events,\n      this.structs,\n      CallData.getAbiEnum(this.abi)\n    );\n  }\n  isCairo1() {\n    return cairo_exports.isCairo1Abi(this.abi);\n  }\n  async getVersion() {\n    return this.providerOrAccount.getContractVersion(this.address);\n  }\n  typed(tAbi) {\n    return this;\n  }\n};\n\n// src/contract/interface.ts\nvar ContractInterface = class {\n};\n\n// src/contract/contractFactory.ts\nvar ContractFactory = class {\n  /**\n   * @param params CFParams\n   *  - compiledContract: CompiledContract;\n   *  - account: AccountInterface;\n   *  - casm?: CairoAssembly;\n   *  - classHash?: string;\n   *  - compiledClassHash?: string;\n   *  - abi?: Abi;\n   */\n  constructor(params) {\n    this.compiledContract = params.compiledContract;\n    this.account = params.account;\n    this.casm = params.casm;\n    this.abi = params.abi ?? params.compiledContract.abi;\n    this.classHash = params.classHash;\n    this.compiledClassHash = params.compiledClassHash;\n    this.CallData = new CallData(this.abi);\n  }\n  /**\n   * Deploys contract and returns new instance of the Contract\n   *\n   * If contract is not declared it will first declare it, and then deploy\n   */\n  async deploy(...args) {\n    const { args: param, options = { parseRequest: true } } = splitArgsAndOptions(args);\n    const constructorCalldata = getCalldata(param, () => {\n      if (options.parseRequest) {\n        this.CallData.validate(\"DEPLOY\" /* DEPLOY */, \"constructor\", param);\n        return this.CallData.compile(\"constructor\", param);\n      }\n      console.warn(\"Call skipped parsing but provided rawArgs, possible malfunction request\");\n      return param;\n    });\n    const {\n      deploy: { contract_address, transaction_hash }\n    } = await this.account.declareAndDeploy({\n      contract: this.compiledContract,\n      casm: this.casm,\n      classHash: this.classHash,\n      compiledClassHash: this.compiledClassHash,\n      constructorCalldata,\n      salt: options.addressSalt\n    });\n    assert(Boolean(contract_address), \"Deployment of the contract failed\");\n    const contractInstance = new Contract(\n      this.compiledContract.abi,\n      contract_address,\n      this.account\n    );\n    contractInstance.deployTransactionHash = transaction_hash;\n    return contractInstance;\n  }\n  /**\n   * Attaches to new Account\n   *\n   * @param account - new Account to attach to\n   */\n  connect(account) {\n    this.account = account;\n    return this;\n  }\n  /**\n   * Attaches current abi and account to the new address\n   */\n  attach(address) {\n    return new Contract(this.abi, address, this.account);\n  }\n  // ethers.js' getDeployTransaction cant be supported as it requires the account or signer to return a signed transaction which is not possible with the current implementation\n};\n\n// src/utils/address.ts\n\nfunction addAddressPadding(address) {\n  return addHexPrefix(removeHexPrefix(toHex(address)).padStart(64, \"0\"));\n}\nfunction validateAndParseAddress(address) {\n  assertInRange(address, ZERO, ADDR_BOUND - 1n, \"Starknet Address\");\n  const result = addAddressPadding(address);\n  if (!result.match(/^(0x)?[0-9a-fA-F]{64}$/)) {\n    throw new Error(\"Invalid Address Format\");\n  }\n  return result;\n}\nfunction getChecksumAddress(address) {\n  const chars = removeHexPrefix(validateAndParseAddress(address)).toLowerCase().split(\"\");\n  const hex = removeHexPrefix(keccakBn(address));\n  const hashed = (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(hex.padStart(64, \"0\"));\n  for (let i = 0; i < chars.length; i += 2) {\n    if (hashed[i >> 1] >> 4 >= 8) {\n      chars[i] = chars[i].toUpperCase();\n    }\n    if ((hashed[i >> 1] & 15) >= 8) {\n      chars[i + 1] = chars[i + 1].toUpperCase();\n    }\n  }\n  return addHexPrefix(chars.join(\"\"));\n}\nfunction validateChecksumAddress(address) {\n  return getChecksumAddress(address) === address;\n}\n\n// src/index.ts\nvar number = num_exports;\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNvQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLCtDQUFNO0FBQ2Y7QUFDQTtBQUNBLFNBQVMsK0NBQU07QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxxQkFBcUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsU0FBUztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxlQUFlO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG1CQUFtQjtB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxRQUFRO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixTQUFTO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxJQUFJO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsSUFBSTtBQUNsQjtBQUNBLHFCQUFxQixJQUFJO0FBQ3pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBCQUEwQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxvQkFBb0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsVUFBVSxpQkFBaUI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9CQUFvQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMEJBQTBC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O0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwwREFBMEQ7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ2dDOztBQUVoQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLGlDQUFpQyxVQUFVO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0JBQXNCO0FBQ2hDLDJDQUEyQyxXQUFXO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUN5RTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsR0FBRztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQix3RUFBVztBQUM1QixrQkFBa0Isa0JBQWtCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBdUVFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydGljbGUtYXBwLy4vbm9kZV9tb2R1bGVzL3N0YXJrbmV0L2Rpc3QvaW5kZXgubWpzPzM1NmMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcblxuLy8gc3JjL2NvbnN0YW50cy50c1xudmFyIGNvbnN0YW50c19leHBvcnRzID0ge307XG5fX2V4cG9ydChjb25zdGFudHNfZXhwb3J0cywge1xuICBBRERSX0JPVU5EOiAoKSA9PiBBRERSX0JPVU5ELFxuICBBUElfVkVSU0lPTjogKCkgPT4gQVBJX1ZFUlNJT04sXG4gIEJOX0ZFRV9UUkFOU0FDVElPTl9WRVJTSU9OXzE6ICgpID0+IEJOX0ZFRV9UUkFOU0FDVElPTl9WRVJTSU9OXzEsXG4gIEJOX0ZFRV9UUkFOU0FDVElPTl9WRVJTSU9OXzI6ICgpID0+IEJOX0ZFRV9UUkFOU0FDVElPTl9WRVJTSU9OXzIsXG4gIEJOX1RSQU5TQUNUSU9OX1ZFUlNJT05fMTogKCkgPT4gQk5fVFJBTlNBQ1RJT05fVkVSU0lPTl8xLFxuICBCTl9UUkFOU0FDVElPTl9WRVJTSU9OXzI6ICgpID0+IEJOX1RSQU5TQUNUSU9OX1ZFUlNJT05fMixcbiAgQmFzZVVybDogKCkgPT4gQmFzZVVybCxcbiAgSEVYX1NUUl9UUkFOU0FDVElPTl9WRVJTSU9OXzE6ICgpID0+IEhFWF9TVFJfVFJBTlNBQ1RJT05fVkVSU0lPTl8xLFxuICBIRVhfU1RSX1RSQU5TQUNUSU9OX1ZFUlNJT05fMjogKCkgPT4gSEVYX1NUUl9UUkFOU0FDVElPTl9WRVJTSU9OXzIsXG4gIElTX0JST1dTRVI6ICgpID0+IElTX0JST1dTRVIsXG4gIE1BU0tfMjUwOiAoKSA9PiBNQVNLXzI1MCxcbiAgTUFYX1NUT1JBR0VfSVRFTV9TSVpFOiAoKSA9PiBNQVhfU1RPUkFHRV9JVEVNX1NJWkUsXG4gIE5ldHdvcmtOYW1lOiAoKSA9PiBOZXR3b3JrTmFtZSxcbiAgUlBDX0RFRkFVTFRfVkVSU0lPTjogKCkgPT4gUlBDX0RFRkFVTFRfVkVSU0lPTixcbiAgUlBDX05PREVTOiAoKSA9PiBSUENfTk9ERVMsXG4gIFN0YXJrbmV0Q2hhaW5JZDogKCkgPT4gU3RhcmtuZXRDaGFpbklkLFxuICBURVhUX1RPX0ZFTFRfTUFYX0xFTjogKCkgPT4gVEVYVF9UT19GRUxUX01BWF9MRU4sXG4gIFRyYW5zYWN0aW9uSGFzaFByZWZpeDogKCkgPT4gVHJhbnNhY3Rpb25IYXNoUHJlZml4LFxuICBVREM6ICgpID0+IFVEQyxcbiAgWkVSTzogKCkgPT4gWkVST1xufSk7XG5cbi8vIHNyYy91dGlscy9lbmNvZGUudHNcbnZhciBlbmNvZGVfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoZW5jb2RlX2V4cG9ydHMsIHtcbiAgSVNfQlJPV1NFUjogKCkgPT4gSVNfQlJPV1NFUixcbiAgYWRkSGV4UHJlZml4OiAoKSA9PiBhZGRIZXhQcmVmaXgsXG4gIGFycmF5QnVmZmVyVG9TdHJpbmc6ICgpID0+IGFycmF5QnVmZmVyVG9TdHJpbmcsXG4gIGF0b2JVbml2ZXJzYWw6ICgpID0+IGF0b2JVbml2ZXJzYWwsXG4gIGJ0b2FVbml2ZXJzYWw6ICgpID0+IGJ0b2FVbml2ZXJzYWwsXG4gIGJ1ZjJoZXg6ICgpID0+IGJ1ZjJoZXgsXG4gIGNhbGNCeXRlTGVuZ3RoOiAoKSA9PiBjYWxjQnl0ZUxlbmd0aCxcbiAgcGFkTGVmdDogKCkgPT4gcGFkTGVmdCxcbiAgcGFzY2FsVG9TbmFrZTogKCkgPT4gcGFzY2FsVG9TbmFrZSxcbiAgcmVtb3ZlSGV4UHJlZml4OiAoKSA9PiByZW1vdmVIZXhQcmVmaXgsXG4gIHNhbml0aXplQnl0ZXM6ICgpID0+IHNhbml0aXplQnl0ZXMsXG4gIHNhbml0aXplSGV4OiAoKSA9PiBzYW5pdGl6ZUhleCxcbiAgc3RyaW5nVG9BcnJheUJ1ZmZlcjogKCkgPT4gc3RyaW5nVG9BcnJheUJ1ZmZlcixcbiAgdXRmOFRvQXJyYXk6ICgpID0+IHV0ZjhUb0FycmF5XG59KTtcbmltcG9ydCB7IGJhc2U2NCB9IGZyb20gXCJAc2N1cmUvYmFzZVwiO1xudmFyIElTX0JST1dTRVIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xudmFyIFNUUklOR19aRVJPID0gXCIwXCI7XG5mdW5jdGlvbiBhcnJheUJ1ZmZlclRvU3RyaW5nKGFycmF5KSB7XG4gIHJldHVybiBuZXcgVWludDhBcnJheShhcnJheSkucmVkdWNlKChkYXRhLCBieXRlKSA9PiBkYXRhICsgU3RyaW5nLmZyb21DaGFyQ29kZShieXRlKSwgXCJcIik7XG59XG5mdW5jdGlvbiB1dGY4VG9BcnJheShzdHIpIHtcbiAgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzdHIpO1xufVxuZnVuY3Rpb24gc3RyaW5nVG9BcnJheUJ1ZmZlcihzdHIpIHtcbiAgcmV0dXJuIHV0ZjhUb0FycmF5KHN0cik7XG59XG5mdW5jdGlvbiBhdG9iVW5pdmVyc2FsKGEpIHtcbiAgcmV0dXJuIGJhc2U2NC5kZWNvZGUoYSk7XG59XG5mdW5jdGlvbiBidG9hVW5pdmVyc2FsKGIpIHtcbiAgcmV0dXJuIGJhc2U2NC5lbmNvZGUobmV3IFVpbnQ4QXJyYXkoYikpO1xufVxuZnVuY3Rpb24gYnVmMmhleChidWZmZXIpIHtcbiAgcmV0dXJuIGJ1ZmZlci5yZWR1Y2UoKHIsIHgpID0+IHIgKyB4LnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIiksIFwiXCIpO1xufVxuZnVuY3Rpb24gcmVtb3ZlSGV4UHJlZml4KGhleCkge1xuICByZXR1cm4gaGV4LnJlcGxhY2UoL14weC9pLCBcIlwiKTtcbn1cbmZ1bmN0aW9uIGFkZEhleFByZWZpeChoZXgpIHtcbiAgcmV0dXJuIGAweCR7cmVtb3ZlSGV4UHJlZml4KGhleCl9YDtcbn1cbmZ1bmN0aW9uIHBhZFN0cmluZyhzdHIsIGxlbmd0aCwgbGVmdCwgcGFkZGluZyA9IFNUUklOR19aRVJPKSB7XG4gIGNvbnN0IGRpZmYgPSBsZW5ndGggLSBzdHIubGVuZ3RoO1xuICBsZXQgcmVzdWx0ID0gc3RyO1xuICBpZiAoZGlmZiA+IDApIHtcbiAgICBjb25zdCBwYWQgPSBwYWRkaW5nLnJlcGVhdChkaWZmKTtcbiAgICByZXN1bHQgPSBsZWZ0ID8gcGFkICsgc3RyIDogc3RyICsgcGFkO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBwYWRMZWZ0KHN0ciwgbGVuZ3RoLCBwYWRkaW5nID0gU1RSSU5HX1pFUk8pIHtcbiAgcmV0dXJuIHBhZFN0cmluZyhzdHIsIGxlbmd0aCwgdHJ1ZSwgcGFkZGluZyk7XG59XG5mdW5jdGlvbiBjYWxjQnl0ZUxlbmd0aChzdHIsIGJ5dGVTaXplID0gOCkge1xuICBjb25zdCB7IGxlbmd0aCB9ID0gc3RyO1xuICBjb25zdCByZW1haW5kZXIgPSBsZW5ndGggJSBieXRlU2l6ZTtcbiAgcmV0dXJuIHJlbWFpbmRlciA/IChsZW5ndGggLSByZW1haW5kZXIpIC8gYnl0ZVNpemUgKiBieXRlU2l6ZSArIGJ5dGVTaXplIDogbGVuZ3RoO1xufVxuZnVuY3Rpb24gc2FuaXRpemVCeXRlcyhzdHIsIGJ5dGVTaXplID0gOCwgcGFkZGluZyA9IFNUUklOR19aRVJPKSB7XG4gIHJldHVybiBwYWRMZWZ0KHN0ciwgY2FsY0J5dGVMZW5ndGgoc3RyLCBieXRlU2l6ZSksIHBhZGRpbmcpO1xufVxuZnVuY3Rpb24gc2FuaXRpemVIZXgoaGV4KSB7XG4gIGhleCA9IHJlbW92ZUhleFByZWZpeChoZXgpO1xuICBoZXggPSBzYW5pdGl6ZUJ5dGVzKGhleCwgMik7XG4gIGlmIChoZXgpIHtcbiAgICBoZXggPSBhZGRIZXhQcmVmaXgoaGV4KTtcbiAgfVxuICByZXR1cm4gaGV4O1xufVxudmFyIHBhc2NhbFRvU25ha2UgPSAodGV4dCkgPT4gL1thLXpdLy50ZXN0KHRleHQpID8gdGV4dC5zcGxpdCgvKD89W0EtWl0pLykuam9pbihcIl9cIikudG9VcHBlckNhc2UoKSA6IHRleHQ7XG5cbi8vIHNyYy9jb25zdGFudHMudHNcbnZhciBURVhUX1RPX0ZFTFRfTUFYX0xFTiA9IDMxO1xudmFyIEhFWF9TVFJfVFJBTlNBQ1RJT05fVkVSU0lPTl8xID0gXCIweDFcIjtcbnZhciBIRVhfU1RSX1RSQU5TQUNUSU9OX1ZFUlNJT05fMiA9IFwiMHgyXCI7XG52YXIgQk5fVFJBTlNBQ1RJT05fVkVSU0lPTl8xID0gMW47XG52YXIgQk5fVFJBTlNBQ1RJT05fVkVSU0lPTl8yID0gMm47XG52YXIgQk5fRkVFX1RSQU5TQUNUSU9OX1ZFUlNJT05fMSA9IDJuICoqIDEyOG4gKyBCTl9UUkFOU0FDVElPTl9WRVJTSU9OXzE7XG52YXIgQk5fRkVFX1RSQU5TQUNUSU9OX1ZFUlNJT05fMiA9IDJuICoqIDEyOG4gKyBCTl9UUkFOU0FDVElPTl9WRVJTSU9OXzI7XG52YXIgWkVSTyA9IDBuO1xudmFyIE1BU0tfMjUwID0gMm4gKiogMjUwbiAtIDFuO1xudmFyIEFQSV9WRVJTSU9OID0gWkVSTztcbnZhciBNQVhfU1RPUkFHRV9JVEVNX1NJWkUgPSAyNTZuO1xudmFyIEFERFJfQk9VTkQgPSAybiAqKiAyNTFuIC0gTUFYX1NUT1JBR0VfSVRFTV9TSVpFO1xudmFyIEJhc2VVcmwgPSAvKiBAX19QVVJFX18gKi8gKChCYXNlVXJsMikgPT4ge1xuICBCYXNlVXJsMltcIlNOX01BSU5cIl0gPSBcImh0dHBzOi8vYWxwaGEtbWFpbm5ldC5zdGFya25ldC5pb1wiO1xuICBCYXNlVXJsMltcIlNOX0dPRVJMSVwiXSA9IFwiaHR0cHM6Ly9hbHBoYTQuc3RhcmtuZXQuaW9cIjtcbiAgQmFzZVVybDJbXCJTTl9TRVBPTElBXCJdID0gXCJodHRwczovL2FscGhhLXNlcG9saWEuc3RhcmtuZXQuaW9cIjtcbiAgcmV0dXJuIEJhc2VVcmwyO1xufSkoQmFzZVVybCB8fCB7fSk7XG52YXIgTmV0d29ya05hbWUgPSAvKiBAX19QVVJFX18gKi8gKChOZXR3b3JrTmFtZTIpID0+IHtcbiAgTmV0d29ya05hbWUyW1wiU05fTUFJTlwiXSA9IFwiU05fTUFJTlwiO1xuICBOZXR3b3JrTmFtZTJbXCJTTl9HT0VSTElcIl0gPSBcIlNOX0dPRVJMSVwiO1xuICBOZXR3b3JrTmFtZTJbXCJTTl9TRVBPTElBXCJdID0gXCJTTl9TRVBPTElBXCI7XG4gIHJldHVybiBOZXR3b3JrTmFtZTI7XG59KShOZXR3b3JrTmFtZSB8fCB7fSk7XG52YXIgU3RhcmtuZXRDaGFpbklkID0gLyogQF9fUFVSRV9fICovICgoU3RhcmtuZXRDaGFpbklkNCkgPT4ge1xuICBTdGFya25ldENoYWluSWQ0W1wiU05fTUFJTlwiXSA9IFwiMHg1MzRlNWY0ZDQxNDk0ZVwiO1xuICBTdGFya25ldENoYWluSWQ0W1wiU05fR09FUkxJXCJdID0gXCIweDUzNGU1ZjQ3NGY0NTUyNGM0OVwiO1xuICBTdGFya25ldENoYWluSWQ0W1wiU05fU0VQT0xJQVwiXSA9IFwiMHg1MzRlNWY1MzQ1NTA0ZjRjNDk0MVwiO1xuICByZXR1cm4gU3RhcmtuZXRDaGFpbklkNDtcbn0pKFN0YXJrbmV0Q2hhaW5JZCB8fCB7fSk7XG52YXIgVHJhbnNhY3Rpb25IYXNoUHJlZml4ID0gLyogQF9fUFVSRV9fICovICgoVHJhbnNhY3Rpb25IYXNoUHJlZml4MikgPT4ge1xuICBUcmFuc2FjdGlvbkhhc2hQcmVmaXgyW1wiREVDTEFSRVwiXSA9IFwiMHg2NDY1NjM2YzYxNzI2NVwiO1xuICBUcmFuc2FjdGlvbkhhc2hQcmVmaXgyW1wiREVQTE9ZXCJdID0gXCIweDY0NjU3MDZjNmY3OVwiO1xuICBUcmFuc2FjdGlvbkhhc2hQcmVmaXgyW1wiREVQTE9ZX0FDQ09VTlRcIl0gPSBcIjB4NjQ2NTcwNmM2Zjc5NWY2MTYzNjM2Zjc1NmU3NFwiO1xuICBUcmFuc2FjdGlvbkhhc2hQcmVmaXgyW1wiSU5WT0tFXCJdID0gXCIweDY5NmU3NjZmNmI2NVwiO1xuICBUcmFuc2FjdGlvbkhhc2hQcmVmaXgyW1wiTDFfSEFORExFUlwiXSA9IFwiMHg2YzMxNWY2ODYxNmU2NDZjNjU3MlwiO1xuICByZXR1cm4gVHJhbnNhY3Rpb25IYXNoUHJlZml4Mjtcbn0pKFRyYW5zYWN0aW9uSGFzaFByZWZpeCB8fCB7fSk7XG52YXIgVURDID0ge1xuICBBRERSRVNTOiBcIjB4MDQxYTc4ZTc0MWU1YWYyZmVjMzRiNjk1Njc5YmM2ODkxNzQyNDM5ZjdhZmI4NDg0ZWNkNzc2NjY2MWFkMDJiZlwiLFxuICBFTlRSWVBPSU5UOiBcImRlcGxveUNvbnRyYWN0XCJcbn07XG52YXIgUlBDX0RFRkFVTFRfVkVSU0lPTiA9IFwidjBfNVwiO1xudmFyIFJQQ19OT0RFUyA9IHtcbiAgU05fR09FUkxJOiBbXG4gICAgYGh0dHBzOi8vc3RhcmtuZXQtdGVzdG5ldC5wdWJsaWMuYmxhc3RhcGkuaW8vcnBjL2AsXG4gICAgYGh0dHBzOi8vZnJlZS1ycGMubmV0aGVybWluZC5pby9nb2VybGktanVuby9gXG4gIF0sXG4gIFNOX01BSU46IFtcbiAgICBgaHR0cHM6Ly9zdGFya25ldC1tYWlubmV0LnB1YmxpYy5ibGFzdGFwaS5pby9ycGMvYCxcbiAgICBgaHR0cHM6Ly9mcmVlLXJwYy5uZXRoZXJtaW5kLmlvL21haW5uZXQtanVuby9gXG4gIF0sXG4gIFNOX1NFUE9MSUE6IFtcbiAgICBgaHR0cHM6Ly9zdGFya25ldC1zZXBvbGlhLnB1YmxpYy5ibGFzdGFwaS5pby9ycGMvYCxcbiAgICBgaHR0cHM6Ly9mcmVlLXJwYy5uZXRoZXJtaW5kLmlvL3NlcG9saWEtanVuby9gXG4gIF1cbn07XG5cbi8vIHNyYy90eXBlcy9pbmRleC50c1xudmFyIHR5cGVzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHR5cGVzX2V4cG9ydHMsIHtcbiAgQmxvY2tTdGF0dXM6ICgpID0+IEJsb2NrU3RhdHVzLFxuICBCbG9ja1RhZzogKCkgPT4gQmxvY2tUYWcsXG4gIEVudHJ5UG9pbnRUeXBlOiAoKSA9PiBFbnRyeVBvaW50VHlwZSxcbiAgTGl0dGVyYWw6ICgpID0+IExpdHRlcmFsLFxuICBSUEM6ICgpID0+IHJwY19leHBvcnRzLFxuICBTSU1VTEFUSU9OX0ZMQUc6ICgpID0+IFNJTVVMQVRJT05fRkxBRyxcbiAgU2VxdWVuY2VyOiAoKSA9PiBzZXF1ZW5jZXJfZXhwb3J0cyxcbiAgVHJhbnNhY3Rpb25FeGVjdXRpb25TdGF0dXM6ICgpID0+IFRyYW5zYWN0aW9uRXhlY3V0aW9uU3RhdHVzLFxuICBUcmFuc2FjdGlvbkZpbmFsaXR5U3RhdHVzOiAoKSA9PiBUcmFuc2FjdGlvbkZpbmFsaXR5U3RhdHVzLFxuICBUcmFuc2FjdGlvblN0YXR1czogKCkgPT4gVHJhbnNhY3Rpb25TdGF0dXMsXG4gIFRyYW5zYWN0aW9uVHlwZTogKCkgPT4gVHJhbnNhY3Rpb25UeXBlLFxuICBVaW50OiAoKSA9PiBVaW50LFxuICBWYWxpZGF0ZVR5cGU6ICgpID0+IFZhbGlkYXRlVHlwZVxufSk7XG5cbi8vIHNyYy90eXBlcy9hY2NvdW50LnRzXG52YXIgU0lNVUxBVElPTl9GTEFHID0gLyogQF9fUFVSRV9fICovICgoU0lNVUxBVElPTl9GTEFHMikgPT4ge1xuICBTSU1VTEFUSU9OX0ZMQUcyW1wiU0tJUF9WQUxJREFURVwiXSA9IFwiU0tJUF9WQUxJREFURVwiO1xuICBTSU1VTEFUSU9OX0ZMQUcyW1wiU0tJUF9FWEVDVVRFXCJdID0gXCJTS0lQX0VYRUNVVEVcIjtcbiAgcmV0dXJuIFNJTVVMQVRJT05fRkxBRzI7XG59KShTSU1VTEFUSU9OX0ZMQUcgfHwge30pO1xuXG4vLyBzcmMvdHlwZXMvY2FsbGRhdGEudHNcbnZhciBWYWxpZGF0ZVR5cGUgPSAvKiBAX19QVVJFX18gKi8gKChWYWxpZGF0ZVR5cGUyKSA9PiB7XG4gIFZhbGlkYXRlVHlwZTJbXCJERVBMT1lcIl0gPSBcIkRFUExPWVwiO1xuICBWYWxpZGF0ZVR5cGUyW1wiQ0FMTFwiXSA9IFwiQ0FMTFwiO1xuICBWYWxpZGF0ZVR5cGUyW1wiSU5WT0tFXCJdID0gXCJJTlZPS0VcIjtcbiAgcmV0dXJuIFZhbGlkYXRlVHlwZTI7XG59KShWYWxpZGF0ZVR5cGUgfHwge30pO1xudmFyIFVpbnQgPSAvKiBAX19QVVJFX18gKi8gKChVaW50MikgPT4ge1xuICBVaW50MltcInU4XCJdID0gXCJjb3JlOjppbnRlZ2VyOjp1OFwiO1xuICBVaW50MltcInUxNlwiXSA9IFwiY29yZTo6aW50ZWdlcjo6dTE2XCI7XG4gIFVpbnQyW1widTMyXCJdID0gXCJjb3JlOjppbnRlZ2VyOjp1MzJcIjtcbiAgVWludDJbXCJ1NjRcIl0gPSBcImNvcmU6OmludGVnZXI6OnU2NFwiO1xuICBVaW50MltcInUxMjhcIl0gPSBcImNvcmU6OmludGVnZXI6OnUxMjhcIjtcbiAgVWludDJbXCJ1MjU2XCJdID0gXCJjb3JlOjppbnRlZ2VyOjp1MjU2XCI7XG4gIHJldHVybiBVaW50Mjtcbn0pKFVpbnQgfHwge30pO1xudmFyIExpdHRlcmFsID0gLyogQF9fUFVSRV9fICovICgoTGl0dGVyYWwyKSA9PiB7XG4gIExpdHRlcmFsMltcIkNsYXNzSGFzaFwiXSA9IFwiY29yZTo6c3RhcmtuZXQ6OmNsYXNzX2hhc2g6OkNsYXNzSGFzaFwiO1xuICBMaXR0ZXJhbDJbXCJDb250cmFjdEFkZHJlc3NcIl0gPSBcImNvcmU6OnN0YXJrbmV0Ojpjb250cmFjdF9hZGRyZXNzOjpDb250cmFjdEFkZHJlc3NcIjtcbiAgcmV0dXJuIExpdHRlcmFsMjtcbn0pKExpdHRlcmFsIHx8IHt9KTtcblxuLy8gc3JjL3R5cGVzL2xpYi9jb250cmFjdC9pbmRleC50c1xudmFyIEVudHJ5UG9pbnRUeXBlID0gLyogQF9fUFVSRV9fICovICgoRW50cnlQb2ludFR5cGUyKSA9PiB7XG4gIEVudHJ5UG9pbnRUeXBlMltcIkVYVEVSTkFMXCJdID0gXCJFWFRFUk5BTFwiO1xuICBFbnRyeVBvaW50VHlwZTJbXCJMMV9IQU5ETEVSXCJdID0gXCJMMV9IQU5ETEVSXCI7XG4gIEVudHJ5UG9pbnRUeXBlMltcIkNPTlNUUlVDVE9SXCJdID0gXCJDT05TVFJVQ1RPUlwiO1xuICByZXR1cm4gRW50cnlQb2ludFR5cGUyO1xufSkoRW50cnlQb2ludFR5cGUgfHwge30pO1xuXG4vLyBzcmMvdHlwZXMvbGliL2luZGV4LnRzXG52YXIgVHJhbnNhY3Rpb25UeXBlID0gLyogQF9fUFVSRV9fICovICgoVHJhbnNhY3Rpb25UeXBlMikgPT4ge1xuICBUcmFuc2FjdGlvblR5cGUyW1wiREVDTEFSRVwiXSA9IFwiREVDTEFSRVwiO1xuICBUcmFuc2FjdGlvblR5cGUyW1wiREVQTE9ZXCJdID0gXCJERVBMT1lcIjtcbiAgVHJhbnNhY3Rpb25UeXBlMltcIkRFUExPWV9BQ0NPVU5UXCJdID0gXCJERVBMT1lfQUNDT1VOVFwiO1xuICBUcmFuc2FjdGlvblR5cGUyW1wiSU5WT0tFXCJdID0gXCJJTlZPS0VfRlVOQ1RJT05cIjtcbiAgcmV0dXJuIFRyYW5zYWN0aW9uVHlwZTI7XG59KShUcmFuc2FjdGlvblR5cGUgfHwge30pO1xudmFyIFRyYW5zYWN0aW9uU3RhdHVzID0gLyogQF9fUFVSRV9fICovICgoVHJhbnNhY3Rpb25TdGF0dXMyKSA9PiB7XG4gIFRyYW5zYWN0aW9uU3RhdHVzMltcIk5PVF9SRUNFSVZFRFwiXSA9IFwiTk9UX1JFQ0VJVkVEXCI7XG4gIFRyYW5zYWN0aW9uU3RhdHVzMltcIlJFQ0VJVkVEXCJdID0gXCJSRUNFSVZFRFwiO1xuICBUcmFuc2FjdGlvblN0YXR1czJbXCJBQ0NFUFRFRF9PTl9MMlwiXSA9IFwiQUNDRVBURURfT05fTDJcIjtcbiAgVHJhbnNhY3Rpb25TdGF0dXMyW1wiQUNDRVBURURfT05fTDFcIl0gPSBcIkFDQ0VQVEVEX09OX0wxXCI7XG4gIFRyYW5zYWN0aW9uU3RhdHVzMltcIlJFSkVDVEVEXCJdID0gXCJSRUpFQ1RFRFwiO1xuICBUcmFuc2FjdGlvblN0YXR1czJbXCJSRVZFUlRFRFwiXSA9IFwiUkVWRVJURURcIjtcbiAgcmV0dXJuIFRyYW5zYWN0aW9uU3RhdHVzMjtcbn0pKFRyYW5zYWN0aW9uU3RhdHVzIHx8IHt9KTtcbnZhciBUcmFuc2FjdGlvbkZpbmFsaXR5U3RhdHVzID0gLyogQF9fUFVSRV9fICovICgoVHJhbnNhY3Rpb25GaW5hbGl0eVN0YXR1czIpID0+IHtcbiAgVHJhbnNhY3Rpb25GaW5hbGl0eVN0YXR1czJbXCJOT1RfUkVDRUlWRURcIl0gPSBcIk5PVF9SRUNFSVZFRFwiO1xuICBUcmFuc2FjdGlvbkZpbmFsaXR5U3RhdHVzMltcIlJFQ0VJVkVEXCJdID0gXCJSRUNFSVZFRFwiO1xuICBUcmFuc2FjdGlvbkZpbmFsaXR5U3RhdHVzMltcIkFDQ0VQVEVEX09OX0wyXCJdID0gXCJBQ0NFUFRFRF9PTl9MMlwiO1xuICBUcmFuc2FjdGlvbkZpbmFsaXR5U3RhdHVzMltcIkFDQ0VQVEVEX09OX0wxXCJdID0gXCJBQ0NFUFRFRF9PTl9MMVwiO1xuICByZXR1cm4gVHJhbnNhY3Rpb25GaW5hbGl0eVN0YXR1czI7XG59KShUcmFuc2FjdGlvbkZpbmFsaXR5U3RhdHVzIHx8IHt9KTtcbnZhciBUcmFuc2FjdGlvbkV4ZWN1dGlvblN0YXR1cyA9IC8qIEBfX1BVUkVfXyAqLyAoKFRyYW5zYWN0aW9uRXhlY3V0aW9uU3RhdHVzMikgPT4ge1xuICBUcmFuc2FjdGlvbkV4ZWN1dGlvblN0YXR1czJbXCJSRUpFQ1RFRFwiXSA9IFwiUkVKRUNURURcIjtcbiAgVHJhbnNhY3Rpb25FeGVjdXRpb25TdGF0dXMyW1wiUkVWRVJURURcIl0gPSBcIlJFVkVSVEVEXCI7XG4gIFRyYW5zYWN0aW9uRXhlY3V0aW9uU3RhdHVzMltcIlNVQ0NFRURFRFwiXSA9IFwiU1VDQ0VFREVEXCI7XG4gIHJldHVybiBUcmFuc2FjdGlvbkV4ZWN1dGlvblN0YXR1czI7XG59KShUcmFuc2FjdGlvbkV4ZWN1dGlvblN0YXR1cyB8fCB7fSk7XG52YXIgQmxvY2tTdGF0dXMgPSAvKiBAX19QVVJFX18gKi8gKChCbG9ja1N0YXR1czIpID0+IHtcbiAgQmxvY2tTdGF0dXMyW1wiUEVORElOR1wiXSA9IFwiUEVORElOR1wiO1xuICBCbG9ja1N0YXR1czJbXCJBQ0NFUFRFRF9PTl9MMVwiXSA9IFwiQUNDRVBURURfT05fTDFcIjtcbiAgQmxvY2tTdGF0dXMyW1wiQUNDRVBURURfT05fTDJcIl0gPSBcIkFDQ0VQVEVEX09OX0wyXCI7XG4gIEJsb2NrU3RhdHVzMltcIlJFSkVDVEVEXCJdID0gXCJSRUpFQ1RFRFwiO1xuICByZXR1cm4gQmxvY2tTdGF0dXMyO1xufSkoQmxvY2tTdGF0dXMgfHwge30pO1xudmFyIEJsb2NrVGFnID0gLyogQF9fUFVSRV9fICovICgoQmxvY2tUYWcyKSA9PiB7XG4gIEJsb2NrVGFnMltcInBlbmRpbmdcIl0gPSBcInBlbmRpbmdcIjtcbiAgQmxvY2tUYWcyW1wibGF0ZXN0XCJdID0gXCJsYXRlc3RcIjtcbiAgcmV0dXJuIEJsb2NrVGFnMjtcbn0pKEJsb2NrVGFnIHx8IHt9KTtcblxuLy8gc3JjL3R5cGVzL2FwaS9ycGMudHNcbnZhciBycGNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQocnBjX2V4cG9ydHMsIHtcbiAgRUJsb2NrVGFnOiAoKSA9PiBFQmxvY2tUYWcsXG4gIEVEYXRhQXZhaWxhYmlsaXR5TW9kZTogKCkgPT4gRURhdGFBdmFpbGFiaWxpdHlNb2RlLFxuICBFU2ltdWxhdGlvbkZsYWc6ICgpID0+IEVTaW11bGF0aW9uRmxhZyxcbiAgRVRyYW5zYWN0aW9uRXhlY3V0aW9uU3RhdHVzOiAoKSA9PiBFVHJhbnNhY3Rpb25FeGVjdXRpb25TdGF0dXMsXG4gIEVUcmFuc2FjdGlvbkZpbmFsaXR5U3RhdHVzOiAoKSA9PiBFVHJhbnNhY3Rpb25GaW5hbGl0eVN0YXR1cyxcbiAgRVRyYW5zYWN0aW9uU3RhdHVzOiAoKSA9PiBFVHJhbnNhY3Rpb25TdGF0dXMsXG4gIEVUcmFuc2FjdGlvblR5cGU6ICgpID0+IEVUcmFuc2FjdGlvblR5cGUsXG4gIEVycm9yczogKCkgPT4gZXJyb3JzX2V4cG9ydHMsXG4gIEpSUEM6ICgpID0+IGpzb25ycGNfZXhwb3J0cyxcbiAgU1BFQzogKCkgPT4gY29tcG9uZW50c19leHBvcnRzXG59KTtcblxuLy8gc3JjL3R5cGVzL2FwaS9qc29ucnBjL2luZGV4LnRzXG52YXIganNvbnJwY19leHBvcnRzID0ge307XG5cbi8vIHNyYy90eXBlcy9hcGkvcnBjc3BlYy9lcnJvcnMudHNcbnZhciBlcnJvcnNfZXhwb3J0cyA9IHt9O1xuXG4vLyBzcmMvdHlwZXMvYXBpL3JwY3NwZWMvY29tcG9uZW50cy50c1xudmFyIGNvbXBvbmVudHNfZXhwb3J0cyA9IHt9O1xuXG4vLyBzcmMvdHlwZXMvYXBpL3JwY3NwZWMvbm9uc3BlYy50c1xudmFyIEVUcmFuc2FjdGlvblR5cGUgPSAvKiBAX19QVVJFX18gKi8gKChFVHJhbnNhY3Rpb25UeXBlMikgPT4ge1xuICBFVHJhbnNhY3Rpb25UeXBlMltcIkRFQ0xBUkVcIl0gPSBcIkRFQ0xBUkVcIjtcbiAgRVRyYW5zYWN0aW9uVHlwZTJbXCJERVBMT1lcIl0gPSBcIkRFUExPWVwiO1xuICBFVHJhbnNhY3Rpb25UeXBlMltcIkRFUExPWV9BQ0NPVU5UXCJdID0gXCJERVBMT1lfQUNDT1VOVFwiO1xuICBFVHJhbnNhY3Rpb25UeXBlMltcIklOVk9LRVwiXSA9IFwiSU5WT0tFXCI7XG4gIEVUcmFuc2FjdGlvblR5cGUyW1wiTDFfSEFORExFUlwiXSA9IFwiTDFfSEFORExFUlwiO1xuICByZXR1cm4gRVRyYW5zYWN0aW9uVHlwZTI7XG59KShFVHJhbnNhY3Rpb25UeXBlIHx8IHt9KTtcbnZhciBFU2ltdWxhdGlvbkZsYWcgPSAvKiBAX19QVVJFX18gKi8gKChFU2ltdWxhdGlvbkZsYWcyKSA9PiB7XG4gIEVTaW11bGF0aW9uRmxhZzJbXCJTS0lQX1ZBTElEQVRFXCJdID0gXCJTS0lQX1ZBTElEQVRFXCI7XG4gIEVTaW11bGF0aW9uRmxhZzJbXCJTS0lQX0ZFRV9DSEFSR0VcIl0gPSBcIlNLSVBfRkVFX0NIQVJHRVwiO1xuICByZXR1cm4gRVNpbXVsYXRpb25GbGFnMjtcbn0pKEVTaW11bGF0aW9uRmxhZyB8fCB7fSk7XG52YXIgRVRyYW5zYWN0aW9uU3RhdHVzID0gLyogQF9fUFVSRV9fICovICgoRVRyYW5zYWN0aW9uU3RhdHVzMikgPT4ge1xuICBFVHJhbnNhY3Rpb25TdGF0dXMyW1wiUkVDRUlWRURcIl0gPSBcIlJFQ0VJVkVEXCI7XG4gIEVUcmFuc2FjdGlvblN0YXR1czJbXCJSRUpFQ1RFRFwiXSA9IFwiUkVKRUNURURcIjtcbiAgRVRyYW5zYWN0aW9uU3RhdHVzMltcIkFDQ0VQVEVEX09OX0wyXCJdID0gXCJBQ0NFUFRFRF9PTl9MMlwiO1xuICBFVHJhbnNhY3Rpb25TdGF0dXMyW1wiQUNDRVBURURfT05fTDFcIl0gPSBcIkFDQ0VQVEVEX09OX0wxXCI7XG4gIHJldHVybiBFVHJhbnNhY3Rpb25TdGF0dXMyO1xufSkoRVRyYW5zYWN0aW9uU3RhdHVzIHx8IHt9KTtcbnZhciBFVHJhbnNhY3Rpb25GaW5hbGl0eVN0YXR1cyA9IC8qIEBfX1BVUkVfXyAqLyAoKEVUcmFuc2FjdGlvbkZpbmFsaXR5U3RhdHVzMikgPT4ge1xuICBFVHJhbnNhY3Rpb25GaW5hbGl0eVN0YXR1czJbXCJBQ0NFUFRFRF9PTl9MMlwiXSA9IFwiQUNDRVBURURfT05fTDJcIjtcbiAgRVRyYW5zYWN0aW9uRmluYWxpdHlTdGF0dXMyW1wiQUNDRVBURURfT05fTDFcIl0gPSBcIkFDQ0VQVEVEX09OX0wxXCI7XG4gIHJldHVybiBFVHJhbnNhY3Rpb25GaW5hbGl0eVN0YXR1czI7XG59KShFVHJhbnNhY3Rpb25GaW5hbGl0eVN0YXR1cyB8fCB7fSk7XG52YXIgRVRyYW5zYWN0aW9uRXhlY3V0aW9uU3RhdHVzID0gLyogQF9fUFVSRV9fICovICgoRVRyYW5zYWN0aW9uRXhlY3V0aW9uU3RhdHVzMikgPT4ge1xuICBFVHJhbnNhY3Rpb25FeGVjdXRpb25TdGF0dXMyW1wiU1VDQ0VFREVEXCJdID0gXCJTVUNDRUVERURcIjtcbiAgRVRyYW5zYWN0aW9uRXhlY3V0aW9uU3RhdHVzMltcIlJFVkVSVEVEXCJdID0gXCJSRVZFUlRFRFwiO1xuICByZXR1cm4gRVRyYW5zYWN0aW9uRXhlY3V0aW9uU3RhdHVzMjtcbn0pKEVUcmFuc2FjdGlvbkV4ZWN1dGlvblN0YXR1cyB8fCB7fSk7XG52YXIgRUJsb2NrVGFnID0gLyogQF9fUFVSRV9fICovICgoRUJsb2NrVGFnMikgPT4ge1xuICBFQmxvY2tUYWcyW1wiTEFURVNUXCJdID0gXCJsYXRlc3RcIjtcbiAgRUJsb2NrVGFnMltcIlBFTkRJTkdcIl0gPSBcInBlbmRpbmdcIjtcbiAgcmV0dXJuIEVCbG9ja1RhZzI7XG59KShFQmxvY2tUYWcgfHwge30pO1xudmFyIEVEYXRhQXZhaWxhYmlsaXR5TW9kZSA9IC8qIEBfX1BVUkVfXyAqLyAoKEVEYXRhQXZhaWxhYmlsaXR5TW9kZTIpID0+IHtcbiAgRURhdGFBdmFpbGFiaWxpdHlNb2RlMltcIkwxXCJdID0gXCJMMVwiO1xuICBFRGF0YUF2YWlsYWJpbGl0eU1vZGUyW1wiTDJcIl0gPSBcIkwyXCI7XG4gIHJldHVybiBFRGF0YUF2YWlsYWJpbGl0eU1vZGUyO1xufSkoRURhdGFBdmFpbGFiaWxpdHlNb2RlIHx8IHt9KTtcblxuLy8gc3JjL3R5cGVzL2FwaS9zZXF1ZW5jZXIudHNcbnZhciBzZXF1ZW5jZXJfZXhwb3J0cyA9IHt9O1xuXG4vLyBzcmMvdXRpbHMvYXNzZXJ0LnRzXG5mdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UgfHwgXCJBc3NlcnRpb24gZmFpbHVyZVwiKTtcbiAgfVxufVxuXG4vLyBzcmMvdXRpbHMvbnVtLnRzXG52YXIgbnVtX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KG51bV9leHBvcnRzLCB7XG4gIGFzc2VydEluUmFuZ2U6ICgpID0+IGFzc2VydEluUmFuZ2UsXG4gIGJpZ051bWJlcmlzaEFycmF5VG9EZWNpbWFsU3RyaW5nQXJyYXk6ICgpID0+IGJpZ051bWJlcmlzaEFycmF5VG9EZWNpbWFsU3RyaW5nQXJyYXksXG4gIGJpZ051bWJlcmlzaEFycmF5VG9IZXhhZGVjaW1hbFN0cmluZ0FycmF5OiAoKSA9PiBiaWdOdW1iZXJpc2hBcnJheVRvSGV4YWRlY2ltYWxTdHJpbmdBcnJheSxcbiAgY2xlYW5IZXg6ICgpID0+IGNsZWFuSGV4LFxuICBnZXREZWNpbWFsU3RyaW5nOiAoKSA9PiBnZXREZWNpbWFsU3RyaW5nLFxuICBnZXRIZXhTdHJpbmc6ICgpID0+IGdldEhleFN0cmluZyxcbiAgZ2V0SGV4U3RyaW5nQXJyYXk6ICgpID0+IGdldEhleFN0cmluZ0FycmF5LFxuICBoZXhUb0J5dGVzOiAoKSA9PiBoZXhUb0J5dGVzLFxuICBoZXhUb0RlY2ltYWxTdHJpbmc6ICgpID0+IGhleFRvRGVjaW1hbFN0cmluZyxcbiAgaXNCaWdJbnQ6ICgpID0+IGlzQmlnSW50LFxuICBpc0hleDogKCkgPT4gaXNIZXgsXG4gIGlzU3RyaW5nV2hvbGVOdW1iZXI6ICgpID0+IGlzU3RyaW5nV2hvbGVOdW1iZXIsXG4gIHRvQmlnSW50OiAoKSA9PiB0b0JpZ0ludCxcbiAgdG9DYWlyb0Jvb2w6ICgpID0+IHRvQ2Fpcm9Cb29sLFxuICB0b0hleDogKCkgPT4gdG9IZXgsXG4gIHRvSGV4U3RyaW5nOiAoKSA9PiB0b0hleFN0cmluZyxcbiAgdG9TdG9yYWdlS2V5OiAoKSA9PiB0b1N0b3JhZ2VLZXlcbn0pO1xuaW1wb3J0IHsgaGV4VG9CeXRlcyBhcyBoZXhUb0J5dGVzTm9ibGUgfSBmcm9tIFwiQG5vYmxlL2N1cnZlcy9hYnN0cmFjdC91dGlsc1wiO1xuZnVuY3Rpb24gaXNIZXgoaGV4KSB7XG4gIHJldHVybiAvXjB4WzAtOWEtZl0qJC9pLnRlc3QoaGV4KTtcbn1cbmZ1bmN0aW9uIHRvQmlnSW50KHZhbHVlKSB7XG4gIHJldHVybiBCaWdJbnQodmFsdWUpO1xufVxuZnVuY3Rpb24gaXNCaWdJbnQodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJiaWdpbnRcIjtcbn1cbmZ1bmN0aW9uIHRvSGV4KG51bWJlcjIpIHtcbiAgcmV0dXJuIGFkZEhleFByZWZpeCh0b0JpZ0ludChudW1iZXIyKS50b1N0cmluZygxNikpO1xufVxudmFyIHRvSGV4U3RyaW5nID0gdG9IZXg7XG5mdW5jdGlvbiB0b1N0b3JhZ2VLZXkobnVtYmVyMikge1xuICBjb25zdCByZXMgPSBhZGRIZXhQcmVmaXgodG9CaWdJbnQobnVtYmVyMikudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDY0LCBcIjBcIikpO1xuICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gaGV4VG9EZWNpbWFsU3RyaW5nKGhleCkge1xuICByZXR1cm4gQmlnSW50KGFkZEhleFByZWZpeChoZXgpKS50b1N0cmluZygxMCk7XG59XG52YXIgY2xlYW5IZXggPSAoaGV4KSA9PiBoZXgudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9eKDB4KTArLywgXCIkMVwiKTtcbmZ1bmN0aW9uIGFzc2VydEluUmFuZ2UoaW5wdXQsIGxvd2VyQm91bmQsIHVwcGVyQm91bmQsIGlucHV0TmFtZSA9IFwiXCIpIHtcbiAgY29uc3QgbWVzc2FnZVN1ZmZpeCA9IGlucHV0TmFtZSA9PT0gXCJcIiA/IFwiaW52YWxpZCBsZW5ndGhcIiA6IGBpbnZhbGlkICR7aW5wdXROYW1lfSBsZW5ndGhgO1xuICBjb25zdCBpbnB1dEJpZ0ludCA9IEJpZ0ludChpbnB1dCk7XG4gIGNvbnN0IGxvd2VyQm91bmRCaWdJbnQgPSBCaWdJbnQobG93ZXJCb3VuZCk7XG4gIGNvbnN0IHVwcGVyQm91bmRCaWdJbnQgPSBCaWdJbnQodXBwZXJCb3VuZCk7XG4gIGFzc2VydChcbiAgICBpbnB1dEJpZ0ludCA+PSBsb3dlckJvdW5kQmlnSW50ICYmIGlucHV0QmlnSW50IDw9IHVwcGVyQm91bmRCaWdJbnQsXG4gICAgYE1lc3NhZ2Ugbm90IHNpZ25hYmxlLCAke21lc3NhZ2VTdWZmaXh9LmBcbiAgKTtcbn1cbmZ1bmN0aW9uIGJpZ051bWJlcmlzaEFycmF5VG9EZWNpbWFsU3RyaW5nQXJyYXkocmF3Q2FsbGRhdGEpIHtcbiAgcmV0dXJuIHJhd0NhbGxkYXRhLm1hcCgoeCkgPT4gdG9CaWdJbnQoeCkudG9TdHJpbmcoMTApKTtcbn1cbmZ1bmN0aW9uIGJpZ051bWJlcmlzaEFycmF5VG9IZXhhZGVjaW1hbFN0cmluZ0FycmF5KHJhd0NhbGxkYXRhKSB7XG4gIHJldHVybiByYXdDYWxsZGF0YS5tYXAoKHgpID0+IHRvSGV4KHgpKTtcbn1cbnZhciBpc1N0cmluZ1dob2xlTnVtYmVyID0gKHZhbHVlKSA9PiAvXlxcZCskLy50ZXN0KHZhbHVlKTtcbmZ1bmN0aW9uIGdldERlY2ltYWxTdHJpbmcodmFsdWUpIHtcbiAgaWYgKGlzSGV4KHZhbHVlKSkge1xuICAgIHJldHVybiBoZXhUb0RlY2ltYWxTdHJpbmcodmFsdWUpO1xuICB9XG4gIGlmIChpc1N0cmluZ1dob2xlTnVtYmVyKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYCR7dmFsdWV9IG5lZWQgdG8gYmUgaGV4LXN0cmluZyBvciB3aG9sZS1udW1iZXItc3RyaW5nYCk7XG59XG5mdW5jdGlvbiBnZXRIZXhTdHJpbmcodmFsdWUpIHtcbiAgaWYgKGlzSGV4KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTdHJpbmdXaG9sZU51bWJlcih2YWx1ZSkpIHtcbiAgICByZXR1cm4gdG9IZXhTdHJpbmcodmFsdWUpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihgJHt2YWx1ZX0gbmVlZCB0byBiZSBoZXgtc3RyaW5nIG9yIHdob2xlLW51bWJlci1zdHJpbmdgKTtcbn1cbmZ1bmN0aW9uIGdldEhleFN0cmluZ0FycmF5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5tYXAoKGVsKSA9PiBnZXRIZXhTdHJpbmcoZWwpKTtcbn1cbnZhciB0b0NhaXJvQm9vbCA9ICh2YWx1ZSkgPT4gKCt2YWx1ZSkudG9TdHJpbmcoKTtcbmZ1bmN0aW9uIGhleFRvQnl0ZXModmFsdWUpIHtcbiAgaWYgKCFpc0hleCh2YWx1ZSkpXG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3ZhbHVlfSBuZWVkIHRvIGJlIGEgaGV4LXN0cmluZ2ApO1xuICBsZXQgYWRhcHRlZFZhbHVlID0gcmVtb3ZlSGV4UHJlZml4KHZhbHVlKTtcbiAgaWYgKGFkYXB0ZWRWYWx1ZS5sZW5ndGggJSAyICE9PSAwKSB7XG4gICAgYWRhcHRlZFZhbHVlID0gYDAke2FkYXB0ZWRWYWx1ZX1gO1xuICB9XG4gIHJldHVybiBoZXhUb0J5dGVzTm9ibGUoYWRhcHRlZFZhbHVlKTtcbn1cblxuLy8gc3JjL3V0aWxzL3NlbGVjdG9yLnRzXG52YXIgc2VsZWN0b3JfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc2VsZWN0b3JfZXhwb3J0cywge1xuICBnZXRTZWxlY3RvcjogKCkgPT4gZ2V0U2VsZWN0b3IsXG4gIGdldFNlbGVjdG9yRnJvbU5hbWU6ICgpID0+IGdldFNlbGVjdG9yRnJvbU5hbWUsXG4gIGtlY2Nha0JuOiAoKSA9PiBrZWNjYWtCbixcbiAgc3RhcmtuZXRLZWNjYWs6ICgpID0+IHN0YXJrbmV0S2VjY2FrXG59KTtcbmltcG9ydCB7IGtlY2NhayB9IGZyb20gXCJAc2N1cmUvc3RhcmtuZXRcIjtcbmZ1bmN0aW9uIGtlY2Nha0JuKHZhbHVlKSB7XG4gIGNvbnN0IGhleFdpdGhvdXRQcmVmaXggPSByZW1vdmVIZXhQcmVmaXgodG9IZXgoQmlnSW50KHZhbHVlKSkpO1xuICBjb25zdCBldmVuSGV4ID0gaGV4V2l0aG91dFByZWZpeC5sZW5ndGggJSAyID09PSAwID8gaGV4V2l0aG91dFByZWZpeCA6IGAwJHtoZXhXaXRob3V0UHJlZml4fWA7XG4gIHJldHVybiBhZGRIZXhQcmVmaXgoa2VjY2FrKGhleFRvQnl0ZXMoYWRkSGV4UHJlZml4KGV2ZW5IZXgpKSkudG9TdHJpbmcoMTYpKTtcbn1cbmZ1bmN0aW9uIGtlY2Nha0hleChzdHIpIHtcbiAgcmV0dXJuIGFkZEhleFByZWZpeChrZWNjYWsodXRmOFRvQXJyYXkoc3RyKSkudG9TdHJpbmcoMTYpKTtcbn1cbmZ1bmN0aW9uIHN0YXJrbmV0S2VjY2FrKHN0cikge1xuICBjb25zdCBoYXNoID0gQmlnSW50KGtlY2Nha0hleChzdHIpKTtcbiAgcmV0dXJuIGhhc2ggJiBNQVNLXzI1MDtcbn1cbmZ1bmN0aW9uIGdldFNlbGVjdG9yRnJvbU5hbWUoZnVuY05hbWUpIHtcbiAgcmV0dXJuIHRvSGV4KHN0YXJrbmV0S2VjY2FrKGZ1bmNOYW1lKSk7XG59XG5mdW5jdGlvbiBnZXRTZWxlY3Rvcih2YWx1ZSkge1xuICBpZiAoaXNIZXgodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N0cmluZ1dob2xlTnVtYmVyKHZhbHVlKSkge1xuICAgIHJldHVybiB0b0hleFN0cmluZyh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGdldFNlbGVjdG9yRnJvbU5hbWUodmFsdWUpO1xufVxuXG4vLyBzcmMvdXRpbHMvc2hvcnRTdHJpbmcudHNcbnZhciBzaG9ydFN0cmluZ19leHBvcnRzID0ge307XG5fX2V4cG9ydChzaG9ydFN0cmluZ19leHBvcnRzLCB7XG4gIGRlY29kZVNob3J0U3RyaW5nOiAoKSA9PiBkZWNvZGVTaG9ydFN0cmluZyxcbiAgZW5jb2RlU2hvcnRTdHJpbmc6ICgpID0+IGVuY29kZVNob3J0U3RyaW5nLFxuICBpc0FTQ0lJOiAoKSA9PiBpc0FTQ0lJLFxuICBpc0RlY2ltYWxTdHJpbmc6ICgpID0+IGlzRGVjaW1hbFN0cmluZyxcbiAgaXNMb25nVGV4dDogKCkgPT4gaXNMb25nVGV4dCxcbiAgaXNTaG9ydFN0cmluZzogKCkgPT4gaXNTaG9ydFN0cmluZyxcbiAgaXNTaG9ydFRleHQ6ICgpID0+IGlzU2hvcnRUZXh0LFxuICBpc1RleHQ6ICgpID0+IGlzVGV4dCxcbiAgc3BsaXRMb25nU3RyaW5nOiAoKSA9PiBzcGxpdExvbmdTdHJpbmdcbn0pO1xuZnVuY3Rpb24gaXNBU0NJSShzdHIpIHtcbiAgcmV0dXJuIC9eW1xceDAwLVxceDdGXSokLy50ZXN0KHN0cik7XG59XG5mdW5jdGlvbiBpc1Nob3J0U3RyaW5nKHN0cikge1xuICByZXR1cm4gc3RyLmxlbmd0aCA8PSBURVhUX1RPX0ZFTFRfTUFYX0xFTjtcbn1cbmZ1bmN0aW9uIGlzRGVjaW1hbFN0cmluZyhzdHIpIHtcbiAgcmV0dXJuIC9eWzAtOV0qJC9pLnRlc3Qoc3RyKTtcbn1cbmZ1bmN0aW9uIGlzVGV4dCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgJiYgIWlzSGV4KHZhbCkgJiYgIWlzU3RyaW5nV2hvbGVOdW1iZXIodmFsKTtcbn1cbnZhciBpc1Nob3J0VGV4dCA9ICh2YWwpID0+IGlzVGV4dCh2YWwpICYmIGlzU2hvcnRTdHJpbmcodmFsKTtcbnZhciBpc0xvbmdUZXh0ID0gKHZhbCkgPT4gaXNUZXh0KHZhbCkgJiYgIWlzU2hvcnRTdHJpbmcodmFsKTtcbmZ1bmN0aW9uIHNwbGl0TG9uZ1N0cmluZyhsb25nU3RyKSB7XG4gIGNvbnN0IHJlZ2V4ID0gUmVnRXhwKGBbXl17MSwke1RFWFRfVE9fRkVMVF9NQVhfTEVOfX1gLCBcImdcIik7XG4gIHJldHVybiBsb25nU3RyLm1hdGNoKHJlZ2V4KSB8fCBbXTtcbn1cbmZ1bmN0aW9uIGVuY29kZVNob3J0U3RyaW5nKHN0cikge1xuICBpZiAoIWlzQVNDSUkoc3RyKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7c3RyfSBpcyBub3QgYW4gQVNDSUkgc3RyaW5nYCk7XG4gIGlmICghaXNTaG9ydFN0cmluZyhzdHIpKVxuICAgIHRocm93IG5ldyBFcnJvcihgJHtzdHJ9IGlzIHRvbyBsb25nYCk7XG4gIHJldHVybiBhZGRIZXhQcmVmaXgoc3RyLnJlcGxhY2UoLy4vZywgKGNoYXIpID0+IGNoYXIuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpKTtcbn1cbmZ1bmN0aW9uIGRlY29kZVNob3J0U3RyaW5nKHN0cikge1xuICBpZiAoIWlzQVNDSUkoc3RyKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7c3RyfSBpcyBub3QgYW4gQVNDSUkgc3RyaW5nYCk7XG4gIGlmIChpc0hleChzdHIpKSB7XG4gICAgcmV0dXJuIHJlbW92ZUhleFByZWZpeChzdHIpLnJlcGxhY2UoLy57Mn0vZywgKGhleCkgPT4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChoZXgsIDE2KSkpO1xuICB9XG4gIGlmIChpc0RlY2ltYWxTdHJpbmcoc3RyKSkge1xuICAgIHJldHVybiBkZWNvZGVTaG9ydFN0cmluZyhcIjBYXCIuY29uY2F0KEJpZ0ludChzdHIpLnRvU3RyaW5nKDE2KSkpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihgJHtzdHJ9IGlzIG5vdCBIZXggb3IgZGVjaW1hbGApO1xufVxuXG4vLyBzcmMvdXRpbHMvY2FsbGRhdGEvY2Fpcm8udHNcbnZhciBjYWlyb19leHBvcnRzID0ge307XG5fX2V4cG9ydChjYWlyb19leHBvcnRzLCB7XG4gIGZlbHQ6ICgpID0+IGZlbHQsXG4gIGdldEFiaUNvbnRyYWN0VmVyc2lvbjogKCkgPT4gZ2V0QWJpQ29udHJhY3RWZXJzaW9uLFxuICBnZXRBcnJheVR5cGU6ICgpID0+IGdldEFycmF5VHlwZSxcbiAgaXNDYWlybzFBYmk6ICgpID0+IGlzQ2Fpcm8xQWJpLFxuICBpc0NhaXJvMVR5cGU6ICgpID0+IGlzQ2Fpcm8xVHlwZSxcbiAgaXNMZW46ICgpID0+IGlzTGVuLFxuICBpc1R5cGVBcnJheTogKCkgPT4gaXNUeXBlQXJyYXksXG4gIGlzVHlwZUJvb2w6ICgpID0+IGlzVHlwZUJvb2wsXG4gIGlzVHlwZUNvbnRyYWN0QWRkcmVzczogKCkgPT4gaXNUeXBlQ29udHJhY3RBZGRyZXNzLFxuICBpc1R5cGVFbnVtOiAoKSA9PiBpc1R5cGVFbnVtLFxuICBpc1R5cGVFdGhBZGRyZXNzOiAoKSA9PiBpc1R5cGVFdGhBZGRyZXNzLFxuICBpc1R5cGVGZWx0OiAoKSA9PiBpc1R5cGVGZWx0LFxuICBpc1R5cGVMaXR0ZXJhbDogKCkgPT4gaXNUeXBlTGl0dGVyYWwsXG4gIGlzVHlwZU5hbWVkVHVwbGU6ICgpID0+IGlzVHlwZU5hbWVkVHVwbGUsXG4gIGlzVHlwZU9wdGlvbjogKCkgPT4gaXNUeXBlT3B0aW9uLFxuICBpc1R5cGVSZXN1bHQ6ICgpID0+IGlzVHlwZVJlc3VsdCxcbiAgaXNUeXBlU3RydWN0OiAoKSA9PiBpc1R5cGVTdHJ1Y3QsXG4gIGlzVHlwZVR1cGxlOiAoKSA9PiBpc1R5cGVUdXBsZSxcbiAgaXNUeXBlVWludDogKCkgPT4gaXNUeXBlVWludCxcbiAgaXNUeXBlVWludDI1NjogKCkgPT4gaXNUeXBlVWludDI1NixcbiAgdHVwbGU6ICgpID0+IHR1cGxlLFxuICB1aW50MjU2OiAoKSA9PiB1aW50MjU2XG59KTtcblxuLy8gc3JjL3V0aWxzL3VpbnQyNTYudHNcbnZhciB1aW50MjU2X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHVpbnQyNTZfZXhwb3J0cywge1xuICBVSU5UXzEyOF9NQVg6ICgpID0+IFVJTlRfMTI4X01BWCxcbiAgVUlOVF8yNTZfTUFYOiAoKSA9PiBVSU5UXzI1Nl9NQVgsXG4gIGJuVG9VaW50MjU2OiAoKSA9PiBiblRvVWludDI1NixcbiAgaXNVaW50MjU2OiAoKSA9PiBpc1VpbnQyNTYsXG4gIHVpbnQyNTZUb0JOOiAoKSA9PiB1aW50MjU2VG9CTlxufSk7XG52YXIgVUlOVF8xMjhfTUFYID0gKDFuIDw8IDEyOG4pIC0gMW47XG52YXIgVUlOVF8yNTZfTUFYID0gKDFuIDw8IDI1Nm4pIC0gMW47XG5mdW5jdGlvbiB1aW50MjU2VG9CTih1aW50MjU2Mikge1xuICByZXR1cm4gKHRvQmlnSW50KHVpbnQyNTYyLmhpZ2gpIDw8IDEyOG4pICsgdG9CaWdJbnQodWludDI1NjIubG93KTtcbn1cbmZ1bmN0aW9uIGlzVWludDI1Nihibikge1xuICByZXR1cm4gdG9CaWdJbnQoYm4pIDw9IFVJTlRfMjU2X01BWDtcbn1cbmZ1bmN0aW9uIGJuVG9VaW50MjU2KGJuKSB7XG4gIGNvbnN0IGJpID0gdG9CaWdJbnQoYm4pO1xuICBpZiAoIWlzVWludDI1NihiaSkpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTnVtYmVyIGlzIHRvbyBsYXJnZVwiKTtcbiAgcmV0dXJuIHtcbiAgICBsb3c6IGFkZEhleFByZWZpeCgoYmkgJiBVSU5UXzEyOF9NQVgpLnRvU3RyaW5nKDE2KSksXG4gICAgaGlnaDogYWRkSGV4UHJlZml4KChiaSA+PiAxMjhuKS50b1N0cmluZygxNikpXG4gIH07XG59XG5cbi8vIHNyYy91dGlscy9jYWxsZGF0YS9jYWlyby50c1xudmFyIGlzTGVuID0gKG5hbWUpID0+IC9fbGVuJC8udGVzdChuYW1lKTtcbnZhciBpc1R5cGVGZWx0ID0gKHR5cGUpID0+IHR5cGUgPT09IFwiZmVsdFwiIHx8IHR5cGUgPT09IFwiY29yZTo6ZmVsdDI1MlwiO1xudmFyIGlzVHlwZUFycmF5ID0gKHR5cGUpID0+IC9cXCovLnRlc3QodHlwZSkgfHwgdHlwZS5zdGFydHNXaXRoKFwiY29yZTo6YXJyYXk6OkFycmF5OjpcIikgfHwgdHlwZS5zdGFydHNXaXRoKFwiY29yZTo6YXJyYXk6OlNwYW46OlwiKTtcbnZhciBpc1R5cGVUdXBsZSA9ICh0eXBlKSA9PiAvXlxcKC4qXFwpJC9pLnRlc3QodHlwZSk7XG52YXIgaXNUeXBlTmFtZWRUdXBsZSA9ICh0eXBlKSA9PiAvXFwoLipcXCkvaS50ZXN0KHR5cGUpICYmIHR5cGUuaW5jbHVkZXMoXCI6XCIpO1xudmFyIGlzVHlwZVN0cnVjdCA9ICh0eXBlLCBzdHJ1Y3RzKSA9PiB0eXBlIGluIHN0cnVjdHM7XG52YXIgaXNUeXBlRW51bSA9ICh0eXBlLCBlbnVtcykgPT4gdHlwZSBpbiBlbnVtcztcbnZhciBpc1R5cGVPcHRpb24gPSAodHlwZSkgPT4gdHlwZS5zdGFydHNXaXRoKFwiY29yZTo6b3B0aW9uOjpPcHRpb246OlwiKTtcbnZhciBpc1R5cGVSZXN1bHQgPSAodHlwZSkgPT4gdHlwZS5zdGFydHNXaXRoKFwiY29yZTo6cmVzdWx0OjpSZXN1bHQ6OlwiKTtcbnZhciBpc1R5cGVVaW50ID0gKHR5cGUpID0+IE9iamVjdC52YWx1ZXMoVWludCkuaW5jbHVkZXModHlwZSk7XG52YXIgaXNUeXBlTGl0dGVyYWwgPSAodHlwZSkgPT4gT2JqZWN0LnZhbHVlcyhMaXR0ZXJhbCkuaW5jbHVkZXModHlwZSk7XG52YXIgaXNUeXBlVWludDI1NiA9ICh0eXBlKSA9PiB0eXBlID09PSBcImNvcmU6OmludGVnZXI6OnUyNTZcIjtcbnZhciBpc1R5cGVCb29sID0gKHR5cGUpID0+IHR5cGUgPT09IFwiY29yZTo6Ym9vbFwiO1xudmFyIGlzVHlwZUNvbnRyYWN0QWRkcmVzcyA9ICh0eXBlKSA9PiB0eXBlID09PSBcImNvcmU6OnN0YXJrbmV0Ojpjb250cmFjdF9hZGRyZXNzOjpDb250cmFjdEFkZHJlc3NcIjtcbnZhciBpc1R5cGVFdGhBZGRyZXNzID0gKHR5cGUpID0+IHR5cGUgPT09IFwiY29yZTo6c3RhcmtuZXQ6OmV0aF9hZGRyZXNzOjpFdGhBZGRyZXNzXCI7XG52YXIgaXNDYWlybzFUeXBlID0gKHR5cGUpID0+IHR5cGUuaW5jbHVkZXMoXCI6OlwiKTtcbnZhciBnZXRBcnJheVR5cGUgPSAodHlwZSkgPT4ge1xuICBpZiAoaXNDYWlybzFUeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuIHR5cGUuc3Vic3RyaW5nKHR5cGUuaW5kZXhPZihcIjxcIikgKyAxLCB0eXBlLmxhc3RJbmRleE9mKFwiPlwiKSk7XG4gIH1cbiAgcmV0dXJuIHR5cGUucmVwbGFjZShcIipcIiwgXCJcIik7XG59O1xuZnVuY3Rpb24gaXNDYWlybzFBYmkoYWJpKSB7XG4gIGNvbnN0IHsgY2Fpcm8gfSA9IGdldEFiaUNvbnRyYWN0VmVyc2lvbihhYmkpO1xuICBpZiAoY2Fpcm8gPT09IHZvaWQgMCkge1xuICAgIHRocm93IEVycm9yKFwiVW5hYmxlIHRvIGRldGVybWluZSBDYWlybyB2ZXJzaW9uXCIpO1xuICB9XG4gIHJldHVybiBjYWlybyA9PT0gXCIxXCI7XG59XG5mdW5jdGlvbiBnZXRBYmlDb250cmFjdFZlcnNpb24oYWJpKSB7XG4gIGlmIChhYmkuZmluZCgoaXQpID0+IGl0LnR5cGUgPT09IFwiaW50ZXJmYWNlXCIpKSB7XG4gICAgcmV0dXJuIHsgY2Fpcm86IFwiMVwiLCBjb21waWxlcjogXCIyXCIgfTtcbiAgfVxuICBjb25zdCB0ZXN0RnVuY3Rpb24gPSBhYmkuZmluZChcbiAgICAoaXQpID0+IGl0LnR5cGUgPT09IFwiZnVuY3Rpb25cIiAmJiAoaXQuaW5wdXRzLmxlbmd0aCB8fCBpdC5vdXRwdXRzLmxlbmd0aClcbiAgKTtcbiAgaWYgKCF0ZXN0RnVuY3Rpb24pIHtcbiAgICByZXR1cm4geyBjYWlybzogdm9pZCAwLCBjb21waWxlcjogdm9pZCAwIH07XG4gIH1cbiAgY29uc3QgaW8gPSB0ZXN0RnVuY3Rpb24uaW5wdXRzLmxlbmd0aCA/IHRlc3RGdW5jdGlvbi5pbnB1dHMgOiB0ZXN0RnVuY3Rpb24ub3V0cHV0cztcbiAgaWYgKGlzQ2Fpcm8xVHlwZShpb1swXS50eXBlKSkge1xuICAgIHJldHVybiB7IGNhaXJvOiBcIjFcIiwgY29tcGlsZXI6IFwiMVwiIH07XG4gIH1cbiAgcmV0dXJuIHsgY2Fpcm86IFwiMFwiLCBjb21waWxlcjogXCIwXCIgfTtcbn1cbnZhciB1aW50MjU2ID0gKGl0KSA9PiB7XG4gIGNvbnN0IGJuID0gQmlnSW50KGl0KTtcbiAgaWYgKCFpc1VpbnQyNTYoYm4pKVxuICAgIHRocm93IG5ldyBFcnJvcihcIk51bWJlciBpcyB0b28gbGFyZ2VcIik7XG4gIHJldHVybiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICBsb3c6IChibiAmIFVJTlRfMTI4X01BWCkudG9TdHJpbmcoMTApLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgaGlnaDogKGJuID4+IDEyOG4pLnRvU3RyaW5nKDEwKVxuICB9O1xufTtcbnZhciB0dXBsZSA9ICguLi5hcmdzKSA9PiAoeyAuLi5hcmdzIH0pO1xuZnVuY3Rpb24gZmVsdChpdCkge1xuICBpZiAoaXNCaWdJbnQoaXQpIHx8IHR5cGVvZiBpdCA9PT0gXCJudW1iZXJcIiAmJiBOdW1iZXIuaXNJbnRlZ2VyKGl0KSkge1xuICAgIHJldHVybiBpdC50b1N0cmluZygpO1xuICB9XG4gIGlmIChpc1RleHQoaXQpKSB7XG4gICAgaWYgKCFpc1Nob3J0U3RyaW5nKGl0KSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYCR7aXR9IGlzIGEgbG9uZyBzdHJpbmcgPiAzMSBjaGFycywgZmVsdCBjYW4gc3RvcmUgc2hvcnQgc3RyaW5ncywgc3BsaXQgaXQgdG8gYXJyYXkgb2Ygc2hvcnQgc3RyaW5nc2BcbiAgICAgICk7XG4gICAgY29uc3QgZW5jb2RlZCA9IGVuY29kZVNob3J0U3RyaW5nKGl0KTtcbiAgICByZXR1cm4gQmlnSW50KGVuY29kZWQpLnRvU3RyaW5nKCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBpdCA9PT0gXCJzdHJpbmdcIiAmJiBpc0hleChpdCkpIHtcbiAgICByZXR1cm4gQmlnSW50KGl0KS50b1N0cmluZygpO1xuICB9XG4gIGlmICh0eXBlb2YgaXQgPT09IFwic3RyaW5nXCIgJiYgaXNTdHJpbmdXaG9sZU51bWJlcihpdCkpIHtcbiAgICByZXR1cm4gaXQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBpdCA9PT0gXCJib29sZWFuXCIpIHtcbiAgICByZXR1cm4gYCR7K2l0fWA7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGAke2l0fSBjYW4ndCBiZSBjb21wdXRlZCBieSBmZWx0KClgKTtcbn1cblxuLy8gc3JjL3V0aWxzL2NhbGxkYXRhL2VudW0vQ2Fpcm9DdXN0b21FbnVtLnRzXG52YXIgQ2Fpcm9DdXN0b21FbnVtID0gY2xhc3Mge1xuICAvKipcbiAgICogQHBhcmFtIGVudW1Db250ZW50IGFuIG9iamVjdCB3aXRoIHRoZSB2YXJpYW50cyBhcyBrZXlzIGFuZCB0aGUgY29udGVudCBhcyB2YWx1ZS4gT25seSBvbmUgY29udGVudCBzaGFsbCBiZSBkZWZpbmVkLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZW51bUNvbnRlbnQpIHtcbiAgICBjb25zdCB2YXJpYW50c0xpc3QgPSBPYmplY3QudmFsdWVzKGVudW1Db250ZW50KTtcbiAgICBpZiAodmFyaWFudHNMaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBFbnVtIG11c3QgaGF2ZSBhIGxlYXN0IDEgdmFyaWFudFwiKTtcbiAgICB9XG4gICAgY29uc3QgbmJBY3RpdmVWYXJpYW50cyA9IHZhcmlhbnRzTGlzdC5maWx0ZXIoXG4gICAgICAoY29udGVudCkgPT4gdHlwZW9mIGNvbnRlbnQgIT09IFwidW5kZWZpbmVkXCJcbiAgICApLmxlbmd0aDtcbiAgICBpZiAobmJBY3RpdmVWYXJpYW50cyAhPT0gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBFbnVtIG11c3QgaGF2ZSBleGFjdGx5IG9uZSBhY3RpdmUgdmFyaWFudFwiKTtcbiAgICB9XG4gICAgdGhpcy52YXJpYW50ID0gZW51bUNvbnRlbnQ7XG4gIH1cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm5zIHRoZSBjb250ZW50IG9mIHRoZSB2YWxpZCB2YXJpYW50IG9mIGEgQ2Fpcm8gY3VzdG9tIEVudW0uXG4gICAqL1xuICB1bndyYXAoKSB7XG4gICAgY29uc3QgdmFyaWFudHMgPSBPYmplY3QuZW50cmllcyh0aGlzLnZhcmlhbnQpO1xuICAgIGNvbnN0IGFjdGl2ZVZhcmlhbnQgPSB2YXJpYW50cy5maW5kKChpdGVtKSA9PiB0eXBlb2YgaXRlbVsxXSAhPT0gXCJ1bmRlZmluZWRcIik7XG4gICAgaWYgKHR5cGVvZiBhY3RpdmVWYXJpYW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICByZXR1cm4gYWN0aXZlVmFyaWFudFsxXTtcbiAgfVxuICAvKipcbiAgICpcbiAgICogQHJldHVybnMgdGhlIG5hbWUgb2YgdGhlIHZhbGlkIHZhcmlhbnQgb2YgYSBDYWlybyBjdXN0b20gRW51bS5cbiAgICovXG4gIGFjdGl2ZVZhcmlhbnQoKSB7XG4gICAgY29uc3QgdmFyaWFudHMgPSBPYmplY3QuZW50cmllcyh0aGlzLnZhcmlhbnQpO1xuICAgIGNvbnN0IGFjdGl2ZVZhcmlhbnQgPSB2YXJpYW50cy5maW5kKChpdGVtKSA9PiB0eXBlb2YgaXRlbVsxXSAhPT0gXCJ1bmRlZmluZWRcIik7XG4gICAgaWYgKHR5cGVvZiBhY3RpdmVWYXJpYW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgcmV0dXJuIGFjdGl2ZVZhcmlhbnRbMF07XG4gIH1cbn07XG5cbi8vIHNyYy91dGlscy9jYWxsZGF0YS9lbnVtL0NhaXJvT3B0aW9uLnRzXG52YXIgQ2Fpcm9PcHRpb25WYXJpYW50ID0gLyogQF9fUFVSRV9fICovICgoQ2Fpcm9PcHRpb25WYXJpYW50MikgPT4ge1xuICBDYWlyb09wdGlvblZhcmlhbnQyW0NhaXJvT3B0aW9uVmFyaWFudDJbXCJTb21lXCJdID0gMF0gPSBcIlNvbWVcIjtcbiAgQ2Fpcm9PcHRpb25WYXJpYW50MltDYWlyb09wdGlvblZhcmlhbnQyW1wiTm9uZVwiXSA9IDFdID0gXCJOb25lXCI7XG4gIHJldHVybiBDYWlyb09wdGlvblZhcmlhbnQyO1xufSkoQ2Fpcm9PcHRpb25WYXJpYW50IHx8IHt9KTtcbnZhciBDYWlyb09wdGlvbiA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IodmFyaWFudCwgc29tZUNvbnRlbnQpIHtcbiAgICBpZiAoISh2YXJpYW50IGluIENhaXJvT3B0aW9uVmFyaWFudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIldyb25nIHZhcmlhbnQgOiBzaG91bGQgYmUgQ2Fpcm9PcHRpb25WYXJpYW50LlNvbWUgb3IgLk5vbmUuXCIpO1xuICAgIH1cbiAgICBpZiAodmFyaWFudCA9PT0gMCAvKiBTb21lICovKSB7XG4gICAgICBpZiAodHlwZW9mIHNvbWVDb250ZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnVGhlIGNyZWF0aW9uIG9mIGEgQ2Fpcm8gT3B0aW9uIHdpdGggXCJTb21lXCIgdmFyaWFudCBuZWVkcyBhIGNvbnRlbnQgYXMgaW5wdXQuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhpcy5Tb21lID0gc29tZUNvbnRlbnQ7XG4gICAgICB0aGlzLk5vbmUgPSB2b2lkIDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuU29tZSA9IHZvaWQgMDtcbiAgICAgIHRoaXMuTm9uZSA9IHRydWU7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJucyB0aGUgY29udGVudCBvZiB0aGUgdmFsaWQgdmFyaWFudCBvZiBhIENhaXJvIGN1c3RvbSBFbnVtLlxuICAgKiAgSWYgTm9uZSwgcmV0dXJucyAndW5kZWZpbmVkJy5cbiAgICovXG4gIHVud3JhcCgpIHtcbiAgICBpZiAodGhpcy5Ob25lKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5Tb21lO1xuICB9XG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSB2YWxpZCB2YXJpYW50IGlzICdpc1NvbWUnLlxuICAgKi9cbiAgaXNTb21lKCkge1xuICAgIHJldHVybiAhKHR5cGVvZiB0aGlzLlNvbWUgPT09IFwidW5kZWZpbmVkXCIpO1xuICB9XG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSB2YWxpZCB2YXJpYW50IGlzICdpc05vbmUnLlxuICAgKi9cbiAgaXNOb25lKCkge1xuICAgIHJldHVybiB0aGlzLk5vbmUgPT09IHRydWU7XG4gIH1cbn07XG5cbi8vIHNyYy91dGlscy9jYWxsZGF0YS9lbnVtL0NhaXJvUmVzdWx0LnRzXG52YXIgQ2Fpcm9SZXN1bHRWYXJpYW50ID0gLyogQF9fUFVSRV9fICovICgoQ2Fpcm9SZXN1bHRWYXJpYW50MikgPT4ge1xuICBDYWlyb1Jlc3VsdFZhcmlhbnQyW0NhaXJvUmVzdWx0VmFyaWFudDJbXCJPa1wiXSA9IDBdID0gXCJPa1wiO1xuICBDYWlyb1Jlc3VsdFZhcmlhbnQyW0NhaXJvUmVzdWx0VmFyaWFudDJbXCJFcnJcIl0gPSAxXSA9IFwiRXJyXCI7XG4gIHJldHVybiBDYWlyb1Jlc3VsdFZhcmlhbnQyO1xufSkoQ2Fpcm9SZXN1bHRWYXJpYW50IHx8IHt9KTtcbnZhciBDYWlyb1Jlc3VsdCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IodmFyaWFudCwgcmVzdWx0Q29udGVudCkge1xuICAgIGlmICghKHZhcmlhbnQgaW4gQ2Fpcm9SZXN1bHRWYXJpYW50KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV3JvbmcgdmFyaWFudCA6IHNob3VsZCBiZSBDYWlyb1Jlc3VsdFZhcmlhbnQuT2sgb3IgLkVyci5cIik7XG4gICAgfVxuICAgIGlmICh2YXJpYW50ID09PSAwIC8qIE9rICovKSB7XG4gICAgICB0aGlzLk9rID0gcmVzdWx0Q29udGVudDtcbiAgICAgIHRoaXMuRXJyID0gdm9pZCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLk9rID0gdm9pZCAwO1xuICAgICAgdGhpcy5FcnIgPSByZXN1bHRDb250ZW50O1xuICAgIH1cbiAgfVxuICAvKipcbiAgICpcbiAgICogQHJldHVybnMgdGhlIGNvbnRlbnQgb2YgdGhlIHZhbGlkIHZhcmlhbnQgb2YgYSBDYWlybyBSZXN1bHQuXG4gICAqL1xuICB1bndyYXAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLk9rICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdGhpcy5PaztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0aGlzLkVyciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRoaXMuRXJyO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJCb3RoIFJlc3VsdC5PayBhbmQgLkVyciBhcmUgdW5kZWZpbmVkLiBOb3QgYXV0aG9yaXplZC5cIik7XG4gIH1cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHZhbGlkIHZhcmlhbnQgaXMgJ09rJy5cbiAgICovXG4gIGlzT2soKSB7XG4gICAgcmV0dXJuICEodHlwZW9mIHRoaXMuT2sgPT09IFwidW5kZWZpbmVkXCIpO1xuICB9XG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSB2YWxpZCB2YXJpYW50IGlzICdpc0VycicuXG4gICAqL1xuICBpc0VycigpIHtcbiAgICByZXR1cm4gISh0eXBlb2YgdGhpcy5FcnIgPT09IFwidW5kZWZpbmVkXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvdXRpbHMvY2FsbGRhdGEvZm9ybWF0dGVyLnRzXG52YXIgZ3VhcmQgPSB7XG4gIGlzQk46IChkYXRhLCB0eXBlLCBrZXkpID0+IHtcbiAgICBpZiAoIWlzQmlnSW50KGRhdGFba2V5XSkpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBEYXRhIGFuZCBmb3JtYXR0ZXIgbWlzbWF0Y2ggb24gJHtrZXl9OiR7dHlwZVtrZXldfSwgZXhwZWN0ZWQgcmVzcG9uc2UgZGF0YSAke2tleX06JHtkYXRhW2tleV19IHRvIGJlIEJOIGluc3RlYWQgaXQgaXMgJHt0eXBlb2YgZGF0YVtrZXldfWBcbiAgICAgICk7XG4gIH0sXG4gIHVua25vd246IChkYXRhLCB0eXBlLCBrZXkpID0+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuaGFuZGxlZCBmb3JtYXR0ZXIgdHlwZSBvbiAke2tleX06JHt0eXBlW2tleV19IGZvciBkYXRhICR7a2V5fToke2RhdGFba2V5XX1gKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGZvcm1hdHRlcihkYXRhLCB0eXBlLCBzYW1lVHlwZSkge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMoZGF0YSkucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgIGNvbnN0IGVsVHlwZSA9IHNhbWVUeXBlID8/IHR5cGVba2V5XTtcbiAgICBpZiAoIShrZXkgaW4gdHlwZSkgJiYgIXNhbWVUeXBlKSB7XG4gICAgICBhY2Nba2V5XSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgaWYgKGVsVHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YVtrZXldKSkge1xuICAgICAgICBjb25zdCBhcnJheVN0ciA9IGZvcm1hdHRlcihcbiAgICAgICAgICBkYXRhW2tleV0sXG4gICAgICAgICAgZGF0YVtrZXldLm1hcCgoXykgPT4gZWxUeXBlKVxuICAgICAgICApO1xuICAgICAgICBhY2Nba2V5XSA9IE9iamVjdC52YWx1ZXMoYXJyYXlTdHIpLmpvaW4oXCJcIik7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG4gICAgICBndWFyZC5pc0JOKGRhdGEsIHR5cGUsIGtleSk7XG4gICAgICBhY2Nba2V5XSA9IGRlY29kZVNob3J0U3RyaW5nKHZhbHVlKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIGlmIChlbFR5cGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGd1YXJkLmlzQk4oZGF0YSwgdHlwZSwga2V5KTtcbiAgICAgIGFjY1trZXldID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZWxUeXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGFjY1trZXldID0gZWxUeXBlKHZhbHVlKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGVsVHlwZSkpIHtcbiAgICAgIGNvbnN0IGFycmF5T2JqID0gZm9ybWF0dGVyKGRhdGFba2V5XSwgZWxUeXBlLCBlbFR5cGVbMF0pO1xuICAgICAgYWNjW2tleV0gPSBPYmplY3QudmFsdWVzKGFycmF5T2JqKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZWxUeXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICBhY2Nba2V5XSA9IGZvcm1hdHRlcihkYXRhW2tleV0sIGVsVHlwZSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBndWFyZC51bmtub3duKGRhdGEsIHR5cGUsIGtleSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuXG4vLyBzcmMvdXRpbHMvY2FsbGRhdGEvcGFyc2VyL3BhcnNlci0wLTEuMS4wLnRzXG52YXIgQWJpUGFyc2VyMSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoYWJpKSB7XG4gICAgdGhpcy5hYmkgPSBhYmk7XG4gIH1cbiAgLyoqXG4gICAqIGFiaSBtZXRob2QgaW5wdXRzIGxlbmd0aCB3aXRob3V0ICdfbGVuJyBpbnB1dHNcbiAgICogY2Fpcm8gMCByZWR1Y2VyXG4gICAqIEBwYXJhbSBhYmlNZXRob2QgRnVuY3Rpb25BYmlcbiAgICogQHJldHVybnMgbnVtYmVyXG4gICAqL1xuICBtZXRob2RJbnB1dHNMZW5ndGgoYWJpTWV0aG9kKSB7XG4gICAgcmV0dXJuIGFiaU1ldGhvZC5pbnB1dHMucmVkdWNlKChhY2MsIGlucHV0KSA9PiAhaXNMZW4oaW5wdXQubmFtZSkgPyBhY2MgKyAxIDogYWNjLCAwKTtcbiAgfVxuICAvKipcbiAgICogZ2V0IG1ldGhvZCBkZWZpbml0aW9uIGZyb20gYWJpXG4gICAqIEBwYXJhbSBuYW1lIHN0cmluZ1xuICAgKiBAcmV0dXJucyBGdW5jdGlvbkFiaSB8IHVuZGVmaW5lZFxuICAgKi9cbiAgZ2V0TWV0aG9kKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5hYmkuZmluZCgoaXQpID0+IGl0Lm5hbWUgPT09IG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgQWJpIGluIGxlZ2FjeSBmb3JtYXRcbiAgICogQHJldHVybnMgQWJpXG4gICAqL1xuICBnZXRMZWdhY3lGb3JtYXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWJpO1xuICB9XG59O1xuXG4vLyBzcmMvdXRpbHMvY2FsbGRhdGEvcGFyc2VyL3BhcnNlci0yLjAuMC50c1xudmFyIEFiaVBhcnNlcjIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGFiaSkge1xuICAgIHRoaXMuYWJpID0gYWJpO1xuICB9XG4gIC8qKlxuICAgKiBhYmkgbWV0aG9kIGlucHV0cyBsZW5ndGhcbiAgICogQHBhcmFtIGFiaU1ldGhvZCBGdW5jdGlvbkFiaVxuICAgKiBAcmV0dXJucyBudW1iZXJcbiAgICovXG4gIG1ldGhvZElucHV0c0xlbmd0aChhYmlNZXRob2QpIHtcbiAgICByZXR1cm4gYWJpTWV0aG9kLmlucHV0cy5sZW5ndGg7XG4gIH1cbiAgLyoqXG4gICAqIGdldCBtZXRob2QgZGVmaW5pdGlvbiBmcm9tIGFiaVxuICAgKiBAcGFyYW0gbmFtZSBzdHJpbmdcbiAgICogQHJldHVybnMgRnVuY3Rpb25BYmkgfCB1bmRlZmluZWRcbiAgICovXG4gIGdldE1ldGhvZChuYW1lKSB7XG4gICAgY29uc3QgaW50ZiA9IHRoaXMuYWJpLmZpbmQoKGl0KSA9PiBpdC50eXBlID09PSBcImludGVyZmFjZVwiKTtcbiAgICByZXR1cm4gaW50Zi5pdGVtcy5maW5kKChpdCkgPT4gaXQubmFtZSA9PT0gbmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBBYmkgaW4gbGVnYWN5IGZvcm1hdFxuICAgKiBAcmV0dXJucyBBYmlcbiAgICovXG4gIGdldExlZ2FjeUZvcm1hdCgpIHtcbiAgICByZXR1cm4gdGhpcy5hYmkuZmxhdE1hcCgoZSkgPT4ge1xuICAgICAgaWYgKGUudHlwZSA9PT0gXCJpbnRlcmZhY2VcIikge1xuICAgICAgICByZXR1cm4gZS5pdGVtcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBlO1xuICAgIH0pO1xuICB9XG59O1xuXG4vLyBzcmMvdXRpbHMvY2FsbGRhdGEvcGFyc2VyL2luZGV4LnRzXG5mdW5jdGlvbiBjcmVhdGVBYmlQYXJzZXIoYWJpKSB7XG4gIGNvbnN0IHZlcnNpb24gPSBnZXRBYmlWZXJzaW9uKGFiaSk7XG4gIGlmICh2ZXJzaW9uID09PSAwIHx8IHZlcnNpb24gPT09IDEpIHtcbiAgICByZXR1cm4gbmV3IEFiaVBhcnNlcjEoYWJpKTtcbiAgfVxuICBpZiAodmVyc2lvbiA9PT0gMikge1xuICAgIHJldHVybiBuZXcgQWJpUGFyc2VyMihhYmkpO1xuICB9XG4gIHRocm93IEVycm9yKGBVbnN1cHBvcnRlZCBBQkkgdmVyc2lvbiAke3ZlcnNpb259YCk7XG59XG5mdW5jdGlvbiBnZXRBYmlWZXJzaW9uKGFiaSkge1xuICBpZiAoYWJpLmZpbmQoKGl0KSA9PiBpdC50eXBlID09PSBcImludGVyZmFjZVwiKSlcbiAgICByZXR1cm4gMjtcbiAgaWYgKGlzQ2Fpcm8xQWJpKGFiaSkpXG4gICAgcmV0dXJuIDE7XG4gIHJldHVybiAwO1xufVxuZnVuY3Rpb24gaXNOb0NvbnN0cnVjdG9yVmFsaWQobWV0aG9kLCBhcmdzQ2FsbGRhdGEsIGFiaU1ldGhvZCkge1xuICByZXR1cm4gbWV0aG9kID09PSBcImNvbnN0cnVjdG9yXCIgJiYgIWFiaU1ldGhvZCAmJiAhYXJnc0NhbGxkYXRhLmxlbmd0aDtcbn1cblxuLy8gc3JjL3V0aWxzL2NhbGxkYXRhL3R1cGxlLnRzXG5mdW5jdGlvbiBwYXJzZU5hbWVkVHVwbGUobmFtZWRUdXBsZSkge1xuICBjb25zdCBuYW1lID0gbmFtZWRUdXBsZS5zdWJzdHJpbmcoMCwgbmFtZWRUdXBsZS5pbmRleE9mKFwiOlwiKSk7XG4gIGNvbnN0IHR5cGUgPSBuYW1lZFR1cGxlLnN1YnN0cmluZyhuYW1lLmxlbmd0aCArIFwiOlwiLmxlbmd0aCk7XG4gIHJldHVybiB7IG5hbWUsIHR5cGUgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlU3ViVHVwbGUocykge1xuICBpZiAoIXMuaW5jbHVkZXMoXCIoXCIpKVxuICAgIHJldHVybiB7IHN1YlR1cGxlOiBbXSwgcmVzdWx0OiBzIH07XG4gIGNvbnN0IHN1YlR1cGxlID0gW107XG4gIGxldCByZXN1bHQgPSBcIlwiO1xuICBsZXQgaSA9IDA7XG4gIHdoaWxlIChpIDwgcy5sZW5ndGgpIHtcbiAgICBpZiAoc1tpXSA9PT0gXCIoXCIpIHtcbiAgICAgIGxldCBjb3VudGVyID0gMTtcbiAgICAgIGNvbnN0IGxCcmFja2V0ID0gaTtcbiAgICAgIGkrKztcbiAgICAgIHdoaWxlIChjb3VudGVyKSB7XG4gICAgICAgIGlmIChzW2ldID09PSBcIilcIilcbiAgICAgICAgICBjb3VudGVyLS07XG4gICAgICAgIGlmIChzW2ldID09PSBcIihcIilcbiAgICAgICAgICBjb3VudGVyKys7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICAgIHN1YlR1cGxlLnB1c2gocy5zdWJzdHJpbmcobEJyYWNrZXQsIGkpKTtcbiAgICAgIHJlc3VsdCArPSBcIiBcIjtcbiAgICAgIGktLTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ICs9IHNbaV07XG4gICAgfVxuICAgIGkrKztcbiAgfVxuICByZXR1cm4ge1xuICAgIHN1YlR1cGxlLFxuICAgIHJlc3VsdFxuICB9O1xufVxuZnVuY3Rpb24gZXh0cmFjdENhaXJvMFR1cGxlKHR5cGUpIHtcbiAgY29uc3QgY2xlYW5UeXBlID0gdHlwZS5yZXBsYWNlKC9cXHMvZywgXCJcIikuc2xpY2UoMSwgLTEpO1xuICBjb25zdCB7IHN1YlR1cGxlLCByZXN1bHQgfSA9IHBhcnNlU3ViVHVwbGUoY2xlYW5UeXBlKTtcbiAgbGV0IHJlY29tcG9zZWQgPSByZXN1bHQuc3BsaXQoXCIsXCIpLm1hcCgoaXQpID0+IHtcbiAgICByZXR1cm4gc3ViVHVwbGUubGVuZ3RoID8gaXQucmVwbGFjZShcIiBcIiwgc3ViVHVwbGUuc2hpZnQoKSkgOiBpdDtcbiAgfSk7XG4gIGlmIChpc1R5cGVOYW1lZFR1cGxlKHR5cGUpKSB7XG4gICAgcmVjb21wb3NlZCA9IHJlY29tcG9zZWQucmVkdWNlKChhY2MsIGl0KSA9PiB7XG4gICAgICByZXR1cm4gYWNjLmNvbmNhdChwYXJzZU5hbWVkVHVwbGUoaXQpKTtcbiAgICB9LCBbXSk7XG4gIH1cbiAgcmV0dXJuIHJlY29tcG9zZWQ7XG59XG5mdW5jdGlvbiBleHRyYWN0Q2Fpcm8xVHVwbGUodHlwZSkge1xuICBjb25zdCBjbGVhblR5cGUgPSB0eXBlLnJlcGxhY2UoL1xccy9nLCBcIlwiKS5zbGljZSgxLCAtMSk7XG4gIGNvbnN0IHsgc3ViVHVwbGUsIHJlc3VsdCB9ID0gcGFyc2VTdWJUdXBsZShjbGVhblR5cGUpO1xuICBjb25zdCByZWNvbXBvc2VkID0gcmVzdWx0LnNwbGl0KFwiLFwiKS5tYXAoKGl0KSA9PiB7XG4gICAgcmV0dXJuIHN1YlR1cGxlLmxlbmd0aCA/IGl0LnJlcGxhY2UoXCIgXCIsIHN1YlR1cGxlLnNoaWZ0KCkpIDogaXQ7XG4gIH0pO1xuICByZXR1cm4gcmVjb21wb3NlZDtcbn1cbmZ1bmN0aW9uIGV4dHJhY3RUdXBsZU1lbWJlclR5cGVzKHR5cGUpIHtcbiAgaWYgKGlzQ2Fpcm8xVHlwZSh0eXBlKSkge1xuICAgIHJldHVybiBleHRyYWN0Q2Fpcm8xVHVwbGUodHlwZSk7XG4gIH1cbiAgcmV0dXJuIGV4dHJhY3RDYWlybzBUdXBsZSh0eXBlKTtcbn1cblxuLy8gc3JjL3V0aWxzL2NhbGxkYXRhL3Byb3BlcnR5T3JkZXIudHNcbmZ1bmN0aW9uIGVycm9yVTI1NihrZXkpIHtcbiAgcmV0dXJuIEVycm9yKFxuICAgIGBZb3VyIG9iamVjdCBpbmNsdWRlcyB0aGUgcHJvcGVydHkgOiAke2tleX0sIGNvbnRhaW5pbmcgYW4gVWludDI1NiBvYmplY3Qgd2l0aG91dCB0aGUgJ2xvdycgYW5kICdoaWdoJyBrZXlzLmBcbiAgKTtcbn1cbmZ1bmN0aW9uIG9yZGVyUHJvcHNCeUFiaSh1bm9yZGVyZWRPYmplY3QsIGFiaU9mT2JqZWN0LCBzdHJ1Y3RzLCBlbnVtcykge1xuICBjb25zdCBvcmRlcklucHV0ID0gKHVub3JkZXJlZEl0ZW0sIGFiaVR5cGUpID0+IHtcbiAgICBpZiAoaXNUeXBlQXJyYXkoYWJpVHlwZSkpIHtcbiAgICAgIHJldHVybiBvcmRlckFycmF5KHVub3JkZXJlZEl0ZW0sIGFiaVR5cGUpO1xuICAgIH1cbiAgICBpZiAoaXNUeXBlRW51bShhYmlUeXBlLCBlbnVtcykpIHtcbiAgICAgIGNvbnN0IGFiaU9iaiA9IGVudW1zW2FiaVR5cGVdO1xuICAgICAgcmV0dXJuIG9yZGVyRW51bSh1bm9yZGVyZWRJdGVtLCBhYmlPYmopO1xuICAgIH1cbiAgICBpZiAoaXNUeXBlVHVwbGUoYWJpVHlwZSkpIHtcbiAgICAgIHJldHVybiBvcmRlclR1cGxlKHVub3JkZXJlZEl0ZW0sIGFiaVR5cGUpO1xuICAgIH1cbiAgICBpZiAoaXNUeXBlRXRoQWRkcmVzcyhhYmlUeXBlKSkge1xuICAgICAgcmV0dXJuIHVub3JkZXJlZEl0ZW07XG4gICAgfVxuICAgIGlmIChpc1R5cGVVaW50MjU2KGFiaVR5cGUpKSB7XG4gICAgICBjb25zdCB1MjU2ID0gdW5vcmRlcmVkSXRlbTtcbiAgICAgIGlmICh0eXBlb2YgdTI1NiAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICByZXR1cm4gdTI1NjtcbiAgICAgIH1cbiAgICAgIGlmICghKFwibG93XCIgaW4gdTI1NiAmJiBcImhpZ2hcIiBpbiB1MjU2KSkge1xuICAgICAgICB0aHJvdyBlcnJvclUyNTYoYWJpVHlwZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4geyBsb3c6IHUyNTYubG93LCBoaWdoOiB1MjU2LmhpZ2ggfTtcbiAgICB9XG4gICAgaWYgKGlzVHlwZVN0cnVjdChhYmlUeXBlLCBzdHJ1Y3RzKSkge1xuICAgICAgY29uc3QgYWJpT2ZTdHJ1Y3QgPSBzdHJ1Y3RzW2FiaVR5cGVdLm1lbWJlcnM7XG4gICAgICByZXR1cm4gb3JkZXJTdHJ1Y3QodW5vcmRlcmVkSXRlbSwgYWJpT2ZTdHJ1Y3QpO1xuICAgIH1cbiAgICByZXR1cm4gdW5vcmRlcmVkSXRlbTtcbiAgfTtcbiAgY29uc3Qgb3JkZXJTdHJ1Y3QgPSAodW5vcmRlcmVkT2JqZWN0MiwgYWJpT2JqZWN0KSA9PiB7XG4gICAgY29uc3Qgb3JkZXJlZE9iamVjdDIgPSBhYmlPYmplY3QucmVkdWNlKChvcmRlcmVkT2JqZWN0LCBhYmlQYXJhbSkgPT4ge1xuICAgICAgY29uc3Qgc2V0UHJvcGVydHkgPSAodmFsdWUpID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcmRlcmVkT2JqZWN0LCBhYmlQYXJhbS5uYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSA/PyB1bm9yZGVyZWRPYmplY3QyW2FiaVBhcmFtLm5hbWVdXG4gICAgICB9KTtcbiAgICAgIGlmICh1bm9yZGVyZWRPYmplY3QyW2FiaVBhcmFtLm5hbWVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmIChpc0NhaXJvMVR5cGUoYWJpUGFyYW0udHlwZSkgfHwgIWlzTGVuKGFiaVBhcmFtLm5hbWUpKSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoYFlvdXIgb2JqZWN0IG5lZWRzIGEgcHJvcGVydHkgd2l0aCBrZXkgOiAke2FiaVBhcmFtLm5hbWV9IC5gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2V0UHJvcGVydHkob3JkZXJJbnB1dCh1bm9yZGVyZWRPYmplY3QyW2FiaVBhcmFtLm5hbWVdLCBhYmlQYXJhbS50eXBlKSk7XG4gICAgICByZXR1cm4gb3JkZXJlZE9iamVjdDtcbiAgICB9LCB7fSk7XG4gICAgcmV0dXJuIG9yZGVyZWRPYmplY3QyO1xuICB9O1xuICBmdW5jdGlvbiBvcmRlckFycmF5KG15QXJyYXksIGFiaVBhcmFtKSB7XG4gICAgY29uc3QgdHlwZUluQXJyYXkgPSBnZXRBcnJheVR5cGUoYWJpUGFyYW0pO1xuICAgIGlmICh0eXBlb2YgbXlBcnJheSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIG15QXJyYXk7XG4gICAgfVxuICAgIHJldHVybiBteUFycmF5Lm1hcCgobXlFbGVtKSA9PiBvcmRlcklucHV0KG15RWxlbSwgdHlwZUluQXJyYXkpKTtcbiAgfVxuICBmdW5jdGlvbiBvcmRlclR1cGxlKHVub3JkZXJlZE9iamVjdDIsIGFiaVBhcmFtKSB7XG4gICAgY29uc3QgdHlwZUxpc3QgPSBleHRyYWN0VHVwbGVNZW1iZXJUeXBlcyhhYmlQYXJhbSk7XG4gICAgY29uc3Qgb3JkZXJlZE9iamVjdDIgPSB0eXBlTGlzdC5yZWR1Y2UoKG9yZGVyZWRPYmplY3QsIGFiaVR5cGVDYWlyb1gsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBteU9iaktleXMgPSBPYmplY3Qua2V5cyh1bm9yZGVyZWRPYmplY3QyKTtcbiAgICAgIGNvbnN0IHNldFByb3BlcnR5ID0gKHZhbHVlKSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkob3JkZXJlZE9iamVjdCwgaW5kZXgudG9TdHJpbmcoKSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdmFsdWUgPz8gdW5vcmRlcmVkT2JqZWN0MltteU9iaktleXNbaW5kZXhdXVxuICAgICAgfSk7XG4gICAgICBjb25zdCBhYmlUeXBlID0gYWJpVHlwZUNhaXJvWD8udHlwZSA/IGFiaVR5cGVDYWlyb1gudHlwZSA6IGFiaVR5cGVDYWlyb1g7XG4gICAgICBzZXRQcm9wZXJ0eShvcmRlcklucHV0KHVub3JkZXJlZE9iamVjdDJbbXlPYmpLZXlzW2luZGV4XV0sIGFiaVR5cGUpKTtcbiAgICAgIHJldHVybiBvcmRlcmVkT2JqZWN0O1xuICAgIH0sIHt9KTtcbiAgICByZXR1cm4gb3JkZXJlZE9iamVjdDI7XG4gIH1cbiAgY29uc3Qgb3JkZXJFbnVtID0gKHVub3JkZXJlZE9iamVjdDIsIGFiaU9iamVjdCkgPT4ge1xuICAgIGlmIChpc1R5cGVSZXN1bHQoYWJpT2JqZWN0Lm5hbWUpKSB7XG4gICAgICBjb25zdCB1bm9yZGVyZWRSZXN1bHQgPSB1bm9yZGVyZWRPYmplY3QyO1xuICAgICAgY29uc3QgcmVzdWx0T2tUeXBlID0gYWJpT2JqZWN0Lm5hbWUuc3Vic3RyaW5nKFxuICAgICAgICBhYmlPYmplY3QubmFtZS5pbmRleE9mKFwiPFwiKSArIDEsXG4gICAgICAgIGFiaU9iamVjdC5uYW1lLmxhc3RJbmRleE9mKFwiLFwiKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlc3VsdEVyclR5cGUgPSBhYmlPYmplY3QubmFtZS5zdWJzdHJpbmcoXG4gICAgICAgIGFiaU9iamVjdC5uYW1lLmluZGV4T2YoXCIsXCIpICsgMSxcbiAgICAgICAgYWJpT2JqZWN0Lm5hbWUubGFzdEluZGV4T2YoXCI+XCIpXG4gICAgICApO1xuICAgICAgaWYgKHVub3JkZXJlZFJlc3VsdC5pc09rKCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDYWlyb1Jlc3VsdChcbiAgICAgICAgICAwIC8qIE9rICovLFxuICAgICAgICAgIG9yZGVySW5wdXQodW5vcmRlcmVkT2JqZWN0Mi51bndyYXAoKSwgcmVzdWx0T2tUeXBlKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBDYWlyb1Jlc3VsdChcbiAgICAgICAgMSAvKiBFcnIgKi8sXG4gICAgICAgIG9yZGVySW5wdXQodW5vcmRlcmVkT2JqZWN0Mi51bndyYXAoKSwgcmVzdWx0RXJyVHlwZSlcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChpc1R5cGVPcHRpb24oYWJpT2JqZWN0Lm5hbWUpKSB7XG4gICAgICBjb25zdCB1bm9yZGVyZWRPcHRpb24gPSB1bm9yZGVyZWRPYmplY3QyO1xuICAgICAgY29uc3QgcmVzdWx0U29tZVR5cGUgPSBhYmlPYmplY3QubmFtZS5zdWJzdHJpbmcoXG4gICAgICAgIGFiaU9iamVjdC5uYW1lLmluZGV4T2YoXCI8XCIpICsgMSxcbiAgICAgICAgYWJpT2JqZWN0Lm5hbWUubGFzdEluZGV4T2YoXCI+XCIpXG4gICAgICApO1xuICAgICAgaWYgKHVub3JkZXJlZE9wdGlvbi5pc1NvbWUoKSkge1xuICAgICAgICByZXR1cm4gbmV3IENhaXJvT3B0aW9uKFxuICAgICAgICAgIDAgLyogU29tZSAqLyxcbiAgICAgICAgICBvcmRlcklucHV0KHVub3JkZXJlZE9wdGlvbi51bndyYXAoKSwgcmVzdWx0U29tZVR5cGUpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IENhaXJvT3B0aW9uKDEgLyogTm9uZSAqLywge30pO1xuICAgIH1cbiAgICBjb25zdCB1bm9yZGVyZWRDdXN0b21FbnVtID0gdW5vcmRlcmVkT2JqZWN0MjtcbiAgICBjb25zdCB2YXJpYW50cyA9IE9iamVjdC5lbnRyaWVzKHVub3JkZXJlZEN1c3RvbUVudW0udmFyaWFudCk7XG4gICAgY29uc3QgbmV3RW50cmllcyA9IHZhcmlhbnRzLm1hcCgodmFyaWFudCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB2YXJpYW50WzFdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiB2YXJpYW50O1xuICAgICAgfVxuICAgICAgY29uc3QgdmFyaWFudFR5cGUgPSBhYmlPYmplY3QudHlwZS5zdWJzdHJpbmcoXG4gICAgICAgIGFiaU9iamVjdC50eXBlLmxhc3RJbmRleE9mKFwiPFwiKSArIDEsXG4gICAgICAgIGFiaU9iamVjdC50eXBlLmxhc3RJbmRleE9mKFwiPlwiKVxuICAgICAgKTtcbiAgICAgIGlmICh2YXJpYW50VHlwZSA9PT0gXCIoKVwiKSB7XG4gICAgICAgIHJldHVybiB2YXJpYW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIFt2YXJpYW50WzBdLCBvcmRlcklucHV0KHVub3JkZXJlZEN1c3RvbUVudW0udW53cmFwKCksIHZhcmlhbnRUeXBlKV07XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBDYWlyb0N1c3RvbUVudW0oT2JqZWN0LmZyb21FbnRyaWVzKG5ld0VudHJpZXMpKTtcbiAgfTtcbiAgY29uc3QgZmluYWxPcmRlcmVkT2JqZWN0ID0gYWJpT2ZPYmplY3QucmVkdWNlKChvcmRlcmVkT2JqZWN0LCBhYmlQYXJhbSkgPT4ge1xuICAgIGNvbnN0IHNldFByb3BlcnR5ID0gKHZhbHVlKSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkob3JkZXJlZE9iamVjdCwgYWJpUGFyYW0ubmFtZSwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlXG4gICAgfSk7XG4gICAgaWYgKGlzTGVuKGFiaVBhcmFtLm5hbWUpICYmICFpc0NhaXJvMVR5cGUoYWJpUGFyYW0udHlwZSkpIHtcbiAgICAgIHJldHVybiBvcmRlcmVkT2JqZWN0O1xuICAgIH1cbiAgICBzZXRQcm9wZXJ0eShvcmRlcklucHV0KHVub3JkZXJlZE9iamVjdFthYmlQYXJhbS5uYW1lXSwgYWJpUGFyYW0udHlwZSkpO1xuICAgIHJldHVybiBvcmRlcmVkT2JqZWN0O1xuICB9LCB7fSk7XG4gIHJldHVybiBmaW5hbE9yZGVyZWRPYmplY3Q7XG59XG5cbi8vIHNyYy91dGlscy9jYWxsZGF0YS9yZXF1ZXN0UGFyc2VyLnRzXG5mdW5jdGlvbiBwYXJzZUJhc2VUeXBlcyh0eXBlLCB2YWwpIHtcbiAgc3dpdGNoICh0cnVlKSB7XG4gICAgY2FzZSBpc1R5cGVVaW50MjU2KHR5cGUpOlxuICAgICAgY29uc3QgZWxfdWludDI1NiA9IHVpbnQyNTYodmFsKTtcbiAgICAgIHJldHVybiBbZmVsdChlbF91aW50MjU2LmxvdyksIGZlbHQoZWxfdWludDI1Ni5oaWdoKV07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmZWx0KHZhbCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHBhcnNlVHVwbGUoZWxlbWVudCwgdHlwZVN0cikge1xuICBjb25zdCBtZW1iZXJUeXBlcyA9IGV4dHJhY3RUdXBsZU1lbWJlclR5cGVzKHR5cGVTdHIpO1xuICBjb25zdCBlbGVtZW50cyA9IE9iamVjdC52YWx1ZXMoZWxlbWVudCk7XG4gIGlmIChlbGVtZW50cy5sZW5ndGggIT09IG1lbWJlclR5cGVzLmxlbmd0aCkge1xuICAgIHRocm93IEVycm9yKFxuICAgICAgYFBhcnNlVHVwbGU6IHByb3ZpZGVkIGFuZCBleHBlY3RlZCBhYmkgdHVwbGUgc2l6ZSBkbyBub3QgbWF0Y2guXG4gICAgICBwcm92aWRlZDogJHtlbGVtZW50c30gXG4gICAgICBleHBlY3RlZDogJHttZW1iZXJUeXBlc31gXG4gICAgKTtcbiAgfVxuICByZXR1cm4gbWVtYmVyVHlwZXMubWFwKChpdCwgZHgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgZWxlbWVudDogZWxlbWVudHNbZHhdLFxuICAgICAgdHlwZTogaXQudHlwZSA/PyBpdFxuICAgIH07XG4gIH0pO1xufVxuZnVuY3Rpb24gcGFyc2VVaW50MjU2KGVsZW1lbnQpIHtcbiAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSBcIm9iamVjdFwiKSB7XG4gICAgY29uc3QgeyBsb3csIGhpZ2ggfSA9IGVsZW1lbnQ7XG4gICAgcmV0dXJuIFtmZWx0KGxvdyksIGZlbHQoaGlnaCldO1xuICB9XG4gIGNvbnN0IGVsX3VpbnQyNTYgPSB1aW50MjU2KGVsZW1lbnQpO1xuICByZXR1cm4gW2ZlbHQoZWxfdWludDI1Ni5sb3cpLCBmZWx0KGVsX3VpbnQyNTYuaGlnaCldO1xufVxuZnVuY3Rpb24gcGFyc2VDYWxsZGF0YVZhbHVlKGVsZW1lbnQsIHR5cGUsIHN0cnVjdHMsIGVudW1zKSB7XG4gIGlmIChlbGVtZW50ID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBFcnJvcihgTWlzc2luZyBwYXJhbWV0ZXIgZm9yIHR5cGUgJHt0eXBlfWApO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGVsZW1lbnQpKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0LnB1c2goZmVsdChlbGVtZW50Lmxlbmd0aCkpO1xuICAgIGNvbnN0IGFycmF5VHlwZSA9IGdldEFycmF5VHlwZSh0eXBlKTtcbiAgICByZXR1cm4gZWxlbWVudC5yZWR1Y2UoKGFjYywgaXQpID0+IHtcbiAgICAgIHJldHVybiBhY2MuY29uY2F0KHBhcnNlQ2FsbGRhdGFWYWx1ZShpdCwgYXJyYXlUeXBlLCBzdHJ1Y3RzLCBlbnVtcykpO1xuICAgIH0sIHJlc3VsdCk7XG4gIH1cbiAgaWYgKHN0cnVjdHNbdHlwZV0gJiYgc3RydWN0c1t0eXBlXS5tZW1iZXJzLmxlbmd0aCkge1xuICAgIGlmIChpc1R5cGVVaW50MjU2KHR5cGUpKSB7XG4gICAgICByZXR1cm4gcGFyc2VVaW50MjU2KGVsZW1lbnQpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gXCJjb3JlOjpzdGFya25ldDo6ZXRoX2FkZHJlc3M6OkV0aEFkZHJlc3NcIilcbiAgICAgIHJldHVybiBwYXJzZUJhc2VUeXBlcyh0eXBlLCBlbGVtZW50KTtcbiAgICBjb25zdCB7IG1lbWJlcnMgfSA9IHN0cnVjdHNbdHlwZV07XG4gICAgY29uc3Qgc3ViRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgcmV0dXJuIG1lbWJlcnMucmVkdWNlKChhY2MsIGl0KSA9PiB7XG4gICAgICByZXR1cm4gYWNjLmNvbmNhdChwYXJzZUNhbGxkYXRhVmFsdWUoc3ViRWxlbWVudFtpdC5uYW1lXSwgaXQudHlwZSwgc3RydWN0cywgZW51bXMpKTtcbiAgICB9LCBbXSk7XG4gIH1cbiAgaWYgKGlzVHlwZVR1cGxlKHR5cGUpKSB7XG4gICAgY29uc3QgdHVwbGVkID0gcGFyc2VUdXBsZShlbGVtZW50LCB0eXBlKTtcbiAgICByZXR1cm4gdHVwbGVkLnJlZHVjZSgoYWNjLCBpdCkgPT4ge1xuICAgICAgY29uc3QgcGFyc2VkRGF0YSA9IHBhcnNlQ2FsbGRhdGFWYWx1ZShpdC5lbGVtZW50LCBpdC50eXBlLCBzdHJ1Y3RzLCBlbnVtcyk7XG4gICAgICByZXR1cm4gYWNjLmNvbmNhdChwYXJzZWREYXRhKTtcbiAgICB9LCBbXSk7XG4gIH1cbiAgaWYgKGlzVHlwZVVpbnQyNTYodHlwZSkpIHtcbiAgICByZXR1cm4gcGFyc2VVaW50MjU2KGVsZW1lbnQpO1xuICB9XG4gIGlmIChpc1R5cGVFbnVtKHR5cGUsIGVudW1zKSkge1xuICAgIGNvbnN0IHsgdmFyaWFudHMgfSA9IGVudW1zW3R5cGVdO1xuICAgIGlmIChpc1R5cGVPcHRpb24odHlwZSkpIHtcbiAgICAgIGNvbnN0IG15T3B0aW9uID0gZWxlbWVudDtcbiAgICAgIGlmIChteU9wdGlvbi5pc1NvbWUoKSkge1xuICAgICAgICBjb25zdCBsaXN0VHlwZVZhcmlhbnQyID0gdmFyaWFudHMuZmluZCgodmFyaWFudCkgPT4gdmFyaWFudC5uYW1lID09PSBcIlNvbWVcIik7XG4gICAgICAgIGlmICh0eXBlb2YgbGlzdFR5cGVWYXJpYW50MiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIHRocm93IEVycm9yKGBFcnJvciBpbiBhYmkgOiBPcHRpb24gaGFzIG5vICdTb21lJyB2YXJpYW50LmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHR5cGVWYXJpYW50U29tZSA9IGxpc3RUeXBlVmFyaWFudDIudHlwZTtcbiAgICAgICAgaWYgKHR5cGVWYXJpYW50U29tZSA9PT0gXCIoKVwiKSB7XG4gICAgICAgICAgcmV0dXJuIDAgLyogU29tZSAqLy50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZFBhcmFtZXRlcjIgPSBwYXJzZUNhbGxkYXRhVmFsdWUoXG4gICAgICAgICAgbXlPcHRpb24udW53cmFwKCksXG4gICAgICAgICAgdHlwZVZhcmlhbnRTb21lLFxuICAgICAgICAgIHN0cnVjdHMsXG4gICAgICAgICAgZW51bXNcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyc2VkUGFyYW1ldGVyMikpIHtcbiAgICAgICAgICByZXR1cm4gWzAgLyogU29tZSAqLy50b1N0cmluZygpLCAuLi5wYXJzZWRQYXJhbWV0ZXIyXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gWzAgLyogU29tZSAqLy50b1N0cmluZygpLCBwYXJzZWRQYXJhbWV0ZXIyXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAxIC8qIE5vbmUgKi8udG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKGlzVHlwZVJlc3VsdCh0eXBlKSkge1xuICAgICAgY29uc3QgbXlSZXN1bHQgPSBlbGVtZW50O1xuICAgICAgaWYgKG15UmVzdWx0LmlzT2soKSkge1xuICAgICAgICBjb25zdCBsaXN0VHlwZVZhcmlhbnQzID0gdmFyaWFudHMuZmluZCgodmFyaWFudCkgPT4gdmFyaWFudC5uYW1lID09PSBcIk9rXCIpO1xuICAgICAgICBpZiAodHlwZW9mIGxpc3RUeXBlVmFyaWFudDMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcihgRXJyb3IgaW4gYWJpIDogUmVzdWx0IGhhcyBubyAnT2snIHZhcmlhbnQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHlwZVZhcmlhbnRPayA9IGxpc3RUeXBlVmFyaWFudDMudHlwZTtcbiAgICAgICAgaWYgKHR5cGVWYXJpYW50T2sgPT09IFwiKClcIikge1xuICAgICAgICAgIHJldHVybiAwIC8qIE9rICovLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyc2VkUGFyYW1ldGVyMyA9IHBhcnNlQ2FsbGRhdGFWYWx1ZShcbiAgICAgICAgICBteVJlc3VsdC51bndyYXAoKSxcbiAgICAgICAgICB0eXBlVmFyaWFudE9rLFxuICAgICAgICAgIHN0cnVjdHMsXG4gICAgICAgICAgZW51bXNcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyc2VkUGFyYW1ldGVyMykpIHtcbiAgICAgICAgICByZXR1cm4gWzAgLyogT2sgKi8udG9TdHJpbmcoKSwgLi4ucGFyc2VkUGFyYW1ldGVyM107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFswIC8qIE9rICovLnRvU3RyaW5nKCksIHBhcnNlZFBhcmFtZXRlcjNdO1xuICAgICAgfVxuICAgICAgY29uc3QgbGlzdFR5cGVWYXJpYW50MiA9IHZhcmlhbnRzLmZpbmQoKHZhcmlhbnQpID0+IHZhcmlhbnQubmFtZSA9PT0gXCJFcnJcIik7XG4gICAgICBpZiAodHlwZW9mIGxpc3RUeXBlVmFyaWFudDIgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoYEVycm9yIGluIGFiaSA6IFJlc3VsdCBoYXMgbm8gJ0VycicgdmFyaWFudC5gKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHR5cGVWYXJpYW50RXJyID0gbGlzdFR5cGVWYXJpYW50Mi50eXBlO1xuICAgICAgaWYgKHR5cGVWYXJpYW50RXJyID09PSBcIigpXCIpIHtcbiAgICAgICAgcmV0dXJuIDEgLyogRXJyICovLnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgICBjb25zdCBwYXJzZWRQYXJhbWV0ZXIyID0gcGFyc2VDYWxsZGF0YVZhbHVlKG15UmVzdWx0LnVud3JhcCgpLCB0eXBlVmFyaWFudEVyciwgc3RydWN0cywgZW51bXMpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyc2VkUGFyYW1ldGVyMikpIHtcbiAgICAgICAgcmV0dXJuIFsxIC8qIEVyciAqLy50b1N0cmluZygpLCAuLi5wYXJzZWRQYXJhbWV0ZXIyXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbMSAvKiBFcnIgKi8udG9TdHJpbmcoKSwgcGFyc2VkUGFyYW1ldGVyMl07XG4gICAgfVxuICAgIGNvbnN0IG15RW51bSA9IGVsZW1lbnQ7XG4gICAgY29uc3QgYWN0aXZlVmFyaWFudCA9IG15RW51bS5hY3RpdmVWYXJpYW50KCk7XG4gICAgY29uc3QgbGlzdFR5cGVWYXJpYW50ID0gdmFyaWFudHMuZmluZCgodmFyaWFudCkgPT4gdmFyaWFudC5uYW1lID09PSBhY3RpdmVWYXJpYW50KTtcbiAgICBpZiAodHlwZW9mIGxpc3RUeXBlVmFyaWFudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgRXJyb3IoYE5vdCBmaW5kIGluIGFiaSA6IEVudW0gaGFzIG5vICcke2FjdGl2ZVZhcmlhbnR9JyB2YXJpYW50LmApO1xuICAgIH1cbiAgICBjb25zdCB0eXBlQWN0aXZlVmFyaWFudCA9IGxpc3RUeXBlVmFyaWFudC50eXBlO1xuICAgIGNvbnN0IG51bUFjdGl2ZVZhcmlhbnQgPSB2YXJpYW50cy5maW5kSW5kZXgoKHZhcmlhbnQpID0+IHZhcmlhbnQubmFtZSA9PT0gYWN0aXZlVmFyaWFudCk7XG4gICAgaWYgKHR5cGVBY3RpdmVWYXJpYW50ID09PSBcIigpXCIpIHtcbiAgICAgIHJldHVybiBudW1BY3RpdmVWYXJpYW50LnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGNvbnN0IHBhcnNlZFBhcmFtZXRlciA9IHBhcnNlQ2FsbGRhdGFWYWx1ZShteUVudW0udW53cmFwKCksIHR5cGVBY3RpdmVWYXJpYW50LCBzdHJ1Y3RzLCBlbnVtcyk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocGFyc2VkUGFyYW1ldGVyKSkge1xuICAgICAgcmV0dXJuIFtudW1BY3RpdmVWYXJpYW50LnRvU3RyaW5nKCksIC4uLnBhcnNlZFBhcmFtZXRlcl07XG4gICAgfVxuICAgIHJldHVybiBbbnVtQWN0aXZlVmFyaWFudC50b1N0cmluZygpLCBwYXJzZWRQYXJhbWV0ZXJdO1xuICB9XG4gIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gXCJvYmplY3RcIikge1xuICAgIHRocm93IEVycm9yKGBQYXJhbWV0ZXIgJHtlbGVtZW50fSBkbyBub3QgYWxpZ24gd2l0aCBhYmkgcGFyYW1ldGVyICR7dHlwZX1gKTtcbiAgfVxuICByZXR1cm4gcGFyc2VCYXNlVHlwZXModHlwZSwgZWxlbWVudCk7XG59XG5mdW5jdGlvbiBwYXJzZUNhbGxkYXRhRmllbGQoYXJnc0l0ZXJhdG9yLCBpbnB1dCwgc3RydWN0cywgZW51bXMpIHtcbiAgY29uc3QgeyBuYW1lLCB0eXBlIH0gPSBpbnB1dDtcbiAgbGV0IHsgdmFsdWUgfSA9IGFyZ3NJdGVyYXRvci5uZXh0KCk7XG4gIHN3aXRjaCAodHJ1ZSkge1xuICAgIGNhc2UgaXNUeXBlQXJyYXkodHlwZSk6XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpICYmICFpc1RleHQodmFsdWUpKSB7XG4gICAgICAgIHRocm93IEVycm9yKGBBQkkgZXhwZWN0ZWQgcGFyYW1ldGVyICR7bmFtZX0gdG8gYmUgYXJyYXkgb3IgbG9uZyBzdHJpbmcsIGdvdCAke3ZhbHVlfWApO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YWx1ZSA9IHNwbGl0TG9uZ1N0cmluZyh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyc2VDYWxsZGF0YVZhbHVlKHZhbHVlLCBpbnB1dC50eXBlLCBzdHJ1Y3RzLCBlbnVtcyk7XG4gICAgY2FzZSB0eXBlID09PSBcImNvcmU6OnN0YXJrbmV0OjpldGhfYWRkcmVzczo6RXRoQWRkcmVzc1wiOlxuICAgICAgcmV0dXJuIHBhcnNlQmFzZVR5cGVzKHR5cGUsIHZhbHVlKTtcbiAgICBjYXNlIChpc1R5cGVTdHJ1Y3QodHlwZSwgc3RydWN0cykgfHwgaXNUeXBlVHVwbGUodHlwZSkgfHwgaXNUeXBlVWludDI1Nih0eXBlKSk6XG4gICAgICByZXR1cm4gcGFyc2VDYWxsZGF0YVZhbHVlKHZhbHVlLCB0eXBlLCBzdHJ1Y3RzLCBlbnVtcyk7XG4gICAgY2FzZSBpc1R5cGVFbnVtKHR5cGUsIGVudW1zKTpcbiAgICAgIHJldHVybiBwYXJzZUNhbGxkYXRhVmFsdWUoXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB0eXBlLFxuICAgICAgICBzdHJ1Y3RzLFxuICAgICAgICBlbnVtc1xuICAgICAgKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHBhcnNlQmFzZVR5cGVzKHR5cGUsIHZhbHVlKTtcbiAgfVxufVxuXG4vLyBzcmMvdXRpbHMvY2FsbGRhdGEvcmVzcG9uc2VQYXJzZXIudHNcbmZ1bmN0aW9uIHBhcnNlQmFzZVR5cGVzMih0eXBlLCBpdCkge1xuICBsZXQgdGVtcDtcbiAgc3dpdGNoICh0cnVlKSB7XG4gICAgY2FzZSBpc1R5cGVCb29sKHR5cGUpOlxuICAgICAgdGVtcCA9IGl0Lm5leHQoKS52YWx1ZTtcbiAgICAgIHJldHVybiBCb29sZWFuKEJpZ0ludCh0ZW1wKSk7XG4gICAgY2FzZSBpc1R5cGVVaW50MjU2KHR5cGUpOlxuICAgICAgY29uc3QgbG93ID0gaXQubmV4dCgpLnZhbHVlO1xuICAgICAgY29uc3QgaGlnaCA9IGl0Lm5leHQoKS52YWx1ZTtcbiAgICAgIHJldHVybiB1aW50MjU2VG9CTih7IGxvdywgaGlnaCB9KTtcbiAgICBjYXNlIHR5cGUgPT09IFwiY29yZTo6c3RhcmtuZXQ6OmV0aF9hZGRyZXNzOjpFdGhBZGRyZXNzXCI6XG4gICAgICB0ZW1wID0gaXQubmV4dCgpLnZhbHVlO1xuICAgICAgcmV0dXJuIEJpZ0ludCh0ZW1wKTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGVtcCA9IGl0Lm5leHQoKS52YWx1ZTtcbiAgICAgIHJldHVybiBCaWdJbnQodGVtcCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHBhcnNlUmVzcG9uc2VWYWx1ZShyZXNwb25zZUl0ZXJhdG9yLCBlbGVtZW50LCBzdHJ1Y3RzLCBlbnVtcykge1xuICBpZiAoZWxlbWVudC50eXBlID09PSBcIigpXCIpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgaWYgKGlzVHlwZVVpbnQyNTYoZWxlbWVudC50eXBlKSkge1xuICAgIGNvbnN0IGxvdyA9IHJlc3BvbnNlSXRlcmF0b3IubmV4dCgpLnZhbHVlO1xuICAgIGNvbnN0IGhpZ2ggPSByZXNwb25zZUl0ZXJhdG9yLm5leHQoKS52YWx1ZTtcbiAgICByZXR1cm4gdWludDI1NlRvQk4oeyBsb3csIGhpZ2ggfSk7XG4gIH1cbiAgaWYgKGlzVHlwZUFycmF5KGVsZW1lbnQudHlwZSkpIHtcbiAgICBjb25zdCBwYXJzZWREYXRhQXJyID0gW107XG4gICAgY29uc3QgZWwgPSB7IG5hbWU6IFwiXCIsIHR5cGU6IGdldEFycmF5VHlwZShlbGVtZW50LnR5cGUpIH07XG4gICAgY29uc3QgbGVuID0gQmlnSW50KHJlc3BvbnNlSXRlcmF0b3IubmV4dCgpLnZhbHVlKTtcbiAgICB3aGlsZSAocGFyc2VkRGF0YUFyci5sZW5ndGggPCBsZW4pIHtcbiAgICAgIHBhcnNlZERhdGFBcnIucHVzaChwYXJzZVJlc3BvbnNlVmFsdWUocmVzcG9uc2VJdGVyYXRvciwgZWwsIHN0cnVjdHMsIGVudW1zKSk7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWREYXRhQXJyO1xuICB9XG4gIGlmIChzdHJ1Y3RzICYmIGVsZW1lbnQudHlwZSBpbiBzdHJ1Y3RzICYmIHN0cnVjdHNbZWxlbWVudC50eXBlXSkge1xuICAgIGlmIChlbGVtZW50LnR5cGUgPT09IFwiY29yZTo6c3RhcmtuZXQ6OmV0aF9hZGRyZXNzOjpFdGhBZGRyZXNzXCIpIHtcbiAgICAgIHJldHVybiBwYXJzZUJhc2VUeXBlczIoZWxlbWVudC50eXBlLCByZXNwb25zZUl0ZXJhdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cnVjdHNbZWxlbWVudC50eXBlXS5tZW1iZXJzLnJlZHVjZSgoYWNjLCBlbCkgPT4ge1xuICAgICAgYWNjW2VsLm5hbWVdID0gcGFyc2VSZXNwb25zZVZhbHVlKHJlc3BvbnNlSXRlcmF0b3IsIGVsLCBzdHJ1Y3RzLCBlbnVtcyk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuICBpZiAoZW51bXMgJiYgZWxlbWVudC50eXBlIGluIGVudW1zICYmIGVudW1zW2VsZW1lbnQudHlwZV0pIHtcbiAgICBjb25zdCB2YXJpYW50TnVtID0gTnVtYmVyKHJlc3BvbnNlSXRlcmF0b3IubmV4dCgpLnZhbHVlKTtcbiAgICBjb25zdCByYXdFbnVtID0gZW51bXNbZWxlbWVudC50eXBlXS52YXJpYW50cy5yZWR1Y2UoKGFjYywgdmFyaWFudCwgbnVtKSA9PiB7XG4gICAgICBpZiAobnVtID09PSB2YXJpYW50TnVtKSB7XG4gICAgICAgIGFjY1t2YXJpYW50Lm5hbWVdID0gcGFyc2VSZXNwb25zZVZhbHVlKFxuICAgICAgICAgIHJlc3BvbnNlSXRlcmF0b3IsXG4gICAgICAgICAgeyBuYW1lOiBcIlwiLCB0eXBlOiB2YXJpYW50LnR5cGUgfSxcbiAgICAgICAgICBzdHJ1Y3RzLFxuICAgICAgICAgIGVudW1zXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG4gICAgICBhY2NbdmFyaWFudC5uYW1lXSA9IHZvaWQgMDtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICAgIGlmIChlbGVtZW50LnR5cGUuc3RhcnRzV2l0aChcImNvcmU6Om9wdGlvbjo6T3B0aW9uXCIpKSB7XG4gICAgICBjb25zdCBjb250ZW50ID0gdmFyaWFudE51bSA9PT0gMCAvKiBTb21lICovID8gcmF3RW51bS5Tb21lIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIG5ldyBDYWlyb09wdGlvbih2YXJpYW50TnVtLCBjb250ZW50KTtcbiAgICB9XG4gICAgaWYgKGVsZW1lbnQudHlwZS5zdGFydHNXaXRoKFwiY29yZTo6cmVzdWx0OjpSZXN1bHRcIikpIHtcbiAgICAgIGxldCBjb250ZW50O1xuICAgICAgaWYgKHZhcmlhbnROdW0gPT09IDAgLyogT2sgKi8pIHtcbiAgICAgICAgY29udGVudCA9IHJhd0VudW0uT2s7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZW50ID0gcmF3RW51bS5FcnI7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IENhaXJvUmVzdWx0KHZhcmlhbnROdW0sIGNvbnRlbnQpO1xuICAgIH1cbiAgICBjb25zdCBjdXN0b21FbnVtID0gbmV3IENhaXJvQ3VzdG9tRW51bShyYXdFbnVtKTtcbiAgICByZXR1cm4gY3VzdG9tRW51bTtcbiAgfVxuICBpZiAoaXNUeXBlVHVwbGUoZWxlbWVudC50eXBlKSkge1xuICAgIGNvbnN0IG1lbWJlclR5cGVzID0gZXh0cmFjdFR1cGxlTWVtYmVyVHlwZXMoZWxlbWVudC50eXBlKTtcbiAgICByZXR1cm4gbWVtYmVyVHlwZXMucmVkdWNlKChhY2MsIGl0LCBpZHgpID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSBpdD8ubmFtZSA/IGl0Lm5hbWUgOiBpZHg7XG4gICAgICBjb25zdCB0eXBlID0gaXQ/LnR5cGUgPyBpdC50eXBlIDogaXQ7XG4gICAgICBjb25zdCBlbCA9IHsgbmFtZSwgdHlwZSB9O1xuICAgICAgYWNjW25hbWVdID0gcGFyc2VSZXNwb25zZVZhbHVlKHJlc3BvbnNlSXRlcmF0b3IsIGVsLCBzdHJ1Y3RzLCBlbnVtcyk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuICBpZiAoaXNUeXBlQXJyYXkoZWxlbWVudC50eXBlKSkge1xuICAgIGNvbnN0IHBhcnNlZERhdGFBcnIgPSBbXTtcbiAgICBjb25zdCBlbCA9IHsgbmFtZTogXCJcIiwgdHlwZTogZ2V0QXJyYXlUeXBlKGVsZW1lbnQudHlwZSkgfTtcbiAgICBjb25zdCBsZW4gPSBCaWdJbnQocmVzcG9uc2VJdGVyYXRvci5uZXh0KCkudmFsdWUpO1xuICAgIHdoaWxlIChwYXJzZWREYXRhQXJyLmxlbmd0aCA8IGxlbikge1xuICAgICAgcGFyc2VkRGF0YUFyci5wdXNoKHBhcnNlUmVzcG9uc2VWYWx1ZShyZXNwb25zZUl0ZXJhdG9yLCBlbCwgc3RydWN0cywgZW51bXMpKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZERhdGFBcnI7XG4gIH1cbiAgcmV0dXJuIHBhcnNlQmFzZVR5cGVzMihlbGVtZW50LnR5cGUsIHJlc3BvbnNlSXRlcmF0b3IpO1xufVxuZnVuY3Rpb24gcmVzcG9uc2VQYXJzZXIocmVzcG9uc2VJdGVyYXRvciwgb3V0cHV0LCBzdHJ1Y3RzLCBlbnVtcywgcGFyc2VkUmVzdWx0KSB7XG4gIGNvbnN0IHsgbmFtZSwgdHlwZSB9ID0gb3V0cHV0O1xuICBsZXQgdGVtcDtcbiAgc3dpdGNoICh0cnVlKSB7XG4gICAgY2FzZSBpc0xlbihuYW1lKTpcbiAgICAgIHRlbXAgPSByZXNwb25zZUl0ZXJhdG9yLm5leHQoKS52YWx1ZTtcbiAgICAgIHJldHVybiBCaWdJbnQodGVtcCk7XG4gICAgY2FzZSAoc3RydWN0cyAmJiB0eXBlIGluIHN0cnVjdHMgfHwgaXNUeXBlVHVwbGUodHlwZSkpOlxuICAgICAgcmV0dXJuIHBhcnNlUmVzcG9uc2VWYWx1ZShyZXNwb25zZUl0ZXJhdG9yLCBvdXRwdXQsIHN0cnVjdHMsIGVudW1zKTtcbiAgICBjYXNlIChlbnVtcyAmJiBpc1R5cGVFbnVtKHR5cGUsIGVudW1zKSk6XG4gICAgICByZXR1cm4gcGFyc2VSZXNwb25zZVZhbHVlKHJlc3BvbnNlSXRlcmF0b3IsIG91dHB1dCwgc3RydWN0cywgZW51bXMpO1xuICAgIGNhc2UgaXNUeXBlQXJyYXkodHlwZSk6XG4gICAgICBpZiAoaXNDYWlybzFUeXBlKHR5cGUpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZVJlc3BvbnNlVmFsdWUocmVzcG9uc2VJdGVyYXRvciwgb3V0cHV0LCBzdHJ1Y3RzLCBlbnVtcyk7XG4gICAgICB9XG4gICAgICBjb25zdCBwYXJzZWREYXRhQXJyID0gW107XG4gICAgICBpZiAocGFyc2VkUmVzdWx0ICYmIHBhcnNlZFJlc3VsdFtgJHtuYW1lfV9sZW5gXSkge1xuICAgICAgICBjb25zdCBhcnJMZW4gPSBwYXJzZWRSZXN1bHRbYCR7bmFtZX1fbGVuYF07XG4gICAgICAgIHdoaWxlIChwYXJzZWREYXRhQXJyLmxlbmd0aCA8IGFyckxlbikge1xuICAgICAgICAgIHBhcnNlZERhdGFBcnIucHVzaChcbiAgICAgICAgICAgIHBhcnNlUmVzcG9uc2VWYWx1ZShcbiAgICAgICAgICAgICAgcmVzcG9uc2VJdGVyYXRvcixcbiAgICAgICAgICAgICAgeyBuYW1lLCB0eXBlOiBvdXRwdXQudHlwZS5yZXBsYWNlKFwiKlwiLCBcIlwiKSB9LFxuICAgICAgICAgICAgICBzdHJ1Y3RzLFxuICAgICAgICAgICAgICBlbnVtc1xuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJzZWREYXRhQXJyO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gcGFyc2VCYXNlVHlwZXMyKHR5cGUsIHJlc3BvbnNlSXRlcmF0b3IpO1xuICB9XG59XG5cbi8vIHNyYy91dGlscy9jYWxsZGF0YS92YWxpZGF0ZS50c1xudmFyIHZhbGlkYXRlRmVsdCA9IChwYXJhbWV0ZXIsIGlucHV0KSA9PiB7XG4gIGFzc2VydChcbiAgICB0eXBlb2YgcGFyYW1ldGVyID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBwYXJhbWV0ZXIgPT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHBhcmFtZXRlciA9PT0gXCJiaWdpbnRcIixcbiAgICBgVmFsaWRhdGU6IGFyZyAke2lucHV0Lm5hbWV9IHNob3VsZCBiZSBhIGZlbHQgdHlwZWQgYXMgKFN0cmluZywgTnVtYmVyIG9yIEJpZ0ludClgXG4gICk7XG4gIGlmICh0eXBlb2YgcGFyYW1ldGVyID09PSBcInN0cmluZ1wiICYmICFpc0hleChwYXJhbWV0ZXIpKVxuICAgIHJldHVybjtcbiAgY29uc3QgcGFyYW0gPSBCaWdJbnQocGFyYW1ldGVyLnRvU3RyaW5nKDEwKSk7XG4gIGFzc2VydChcbiAgICAvLyBmcm9tIDogaHR0cHM6Ly9naXRodWIuY29tL3N0YXJrd2FyZS1saWJzL3N0YXJrbmV0LXNwZWNzL2Jsb2IvMjliYWI2NTBiZTZiMTg0N2M5MmQ0NDYxZDRjMzMwMDhiNWU1MGIxYS9hcGkvc3RhcmtuZXRfYXBpX29wZW5ycGMuanNvbiNMMTI2NlxuICAgIHBhcmFtID49IDBuICYmIHBhcmFtIDw9IDJuICoqIDI1Mm4gLSAxbixcbiAgICBgVmFsaWRhdGU6IGFyZyAke2lucHV0Lm5hbWV9IGNhaXJvIHR5cGVkICR7aW5wdXQudHlwZX0gc2hvdWxkIGJlIGluIHJhbmdlIFswLCAyXjI1Mi0xXWBcbiAgKTtcbn07XG52YXIgdmFsaWRhdGVVaW50ID0gKHBhcmFtZXRlciwgaW5wdXQpID0+IHtcbiAgaWYgKHR5cGVvZiBwYXJhbWV0ZXIgPT09IFwibnVtYmVyXCIpIHtcbiAgICBhc3NlcnQoXG4gICAgICBwYXJhbWV0ZXIgPD0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsXG4gICAgICBgVmFsaWRhdGlvbjogUGFyYW1ldGVyIGlzIHRvIGxhcmdlIHRvIGJlIHR5cGVkIGFzIE51bWJlciB1c2UgKEJpZ0ludCBvciBTdHJpbmcpYFxuICAgICk7XG4gIH1cbiAgYXNzZXJ0KFxuICAgIHR5cGVvZiBwYXJhbWV0ZXIgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHBhcmFtZXRlciA9PT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgcGFyYW1ldGVyID09PSBcImJpZ2ludFwiIHx8IHR5cGVvZiBwYXJhbWV0ZXIgPT09IFwib2JqZWN0XCIgJiYgXCJsb3dcIiBpbiBwYXJhbWV0ZXIgJiYgXCJoaWdoXCIgaW4gcGFyYW1ldGVyLFxuICAgIGBWYWxpZGF0ZTogYXJnICR7aW5wdXQubmFtZX0gb2YgY2Fpcm8gdHlwZSAke2lucHV0LnR5cGV9IHNob3VsZCBiZSB0eXBlIChTdHJpbmcsIE51bWJlciBvciBCaWdJbnQpLCBidXQgaXMgJHt0eXBlb2YgcGFyYW1ldGVyfSAke3BhcmFtZXRlcn0uYFxuICApO1xuICBjb25zdCBwYXJhbSA9IHR5cGVvZiBwYXJhbWV0ZXIgPT09IFwib2JqZWN0XCIgPyB1aW50MjU2VG9CTihwYXJhbWV0ZXIpIDogdG9CaWdJbnQocGFyYW1ldGVyKTtcbiAgc3dpdGNoIChpbnB1dC50eXBlKSB7XG4gICAgY2FzZSBcImNvcmU6OmludGVnZXI6OnU4XCIgLyogdTggKi86XG4gICAgICBhc3NlcnQoXG4gICAgICAgIHBhcmFtID49IDBuICYmIHBhcmFtIDw9IDI1NW4sXG4gICAgICAgIGBWYWxpZGF0ZTogYXJnICR7aW5wdXQubmFtZX0gY2Fpcm8gdHlwZWQgJHtpbnB1dC50eXBlfSBzaG91bGQgYmUgaW4gcmFuZ2UgWzAgLSAyNTVdYFxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjb3JlOjppbnRlZ2VyOjp1MTZcIiAvKiB1MTYgKi86XG4gICAgICBhc3NlcnQoXG4gICAgICAgIHBhcmFtID49IDBuICYmIHBhcmFtIDw9IDY1NTM1bixcbiAgICAgICAgYFZhbGlkYXRlOiBhcmcgJHtpbnB1dC5uYW1lfSBjYWlybyB0eXBlZCAke2lucHV0LnR5cGV9IHNob3VsZCBiZSBpbiByYW5nZSBbMCwgNjU1MzVdYFxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjb3JlOjppbnRlZ2VyOjp1MzJcIiAvKiB1MzIgKi86XG4gICAgICBhc3NlcnQoXG4gICAgICAgIHBhcmFtID49IDBuICYmIHBhcmFtIDw9IDQyOTQ5NjcyOTVuLFxuICAgICAgICBgVmFsaWRhdGU6IGFyZyAke2lucHV0Lm5hbWV9IGNhaXJvIHR5cGVkICR7aW5wdXQudHlwZX0gc2hvdWxkIGJlIGluIHJhbmdlIFswLCA0Mjk0OTY3Mjk1XWBcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY29yZTo6aW50ZWdlcjo6dTY0XCIgLyogdTY0ICovOlxuICAgICAgYXNzZXJ0KFxuICAgICAgICBwYXJhbSA+PSAwbiAmJiBwYXJhbSA8PSAybiAqKiA2NG4gLSAxbixcbiAgICAgICAgYFZhbGlkYXRlOiBhcmcgJHtpbnB1dC5uYW1lfSBjYWlybyB0eXBlZCAke2lucHV0LnR5cGV9IHNob3VsZCBiZSBpbiByYW5nZSBbMCwgMl42NC0xXWBcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY29yZTo6aW50ZWdlcjo6dTEyOFwiIC8qIHUxMjggKi86XG4gICAgICBhc3NlcnQoXG4gICAgICAgIHBhcmFtID49IDBuICYmIHBhcmFtIDw9IDJuICoqIDEyOG4gLSAxbixcbiAgICAgICAgYFZhbGlkYXRlOiBhcmcgJHtpbnB1dC5uYW1lfSBjYWlybyB0eXBlZCAke2lucHV0LnR5cGV9IHNob3VsZCBiZSBpbiByYW5nZSBbMCwgMl4xMjgtMV1gXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNvcmU6OmludGVnZXI6OnUyNTZcIiAvKiB1MjU2ICovOlxuICAgICAgYXNzZXJ0KFxuICAgICAgICBwYXJhbSA+PSAwbiAmJiBwYXJhbSA8PSAybiAqKiAyNTZuIC0gMW4sXG4gICAgICAgIGBWYWxpZGF0ZTogYXJnICR7aW5wdXQubmFtZX0gaXMgJHtpbnB1dC50eXBlfSAwIC0gMl4yNTYtMWBcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY29yZTo6c3RhcmtuZXQ6OmNsYXNzX2hhc2g6OkNsYXNzSGFzaFwiIC8qIENsYXNzSGFzaCAqLzpcbiAgICAgIGFzc2VydChcbiAgICAgICAgLy8gZnJvbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zdGFya3dhcmUtbGlicy9zdGFya25ldC1zcGVjcy9ibG9iLzI5YmFiNjUwYmU2YjE4NDdjOTJkNDQ2MWQ0YzMzMDA4YjVlNTBiMWEvYXBpL3N0YXJrbmV0X2FwaV9vcGVucnBjLmpzb24jTDE2NzBcbiAgICAgICAgcGFyYW0gPj0gMG4gJiYgcGFyYW0gPD0gMm4gKiogMjUybiAtIDFuLFxuICAgICAgICBgVmFsaWRhdGU6IGFyZyAke2lucHV0Lm5hbWV9IGNhaXJvIHR5cGVkICR7aW5wdXQudHlwZX0gc2hvdWxkIGJlIGluIHJhbmdlIFswLCAyXjI1Mi0xXWBcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY29yZTo6c3RhcmtuZXQ6OmNvbnRyYWN0X2FkZHJlc3M6OkNvbnRyYWN0QWRkcmVzc1wiIC8qIENvbnRyYWN0QWRkcmVzcyAqLzpcbiAgICAgIGFzc2VydChcbiAgICAgICAgLy8gZnJvbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zdGFya3dhcmUtbGlicy9zdGFya25ldC1zcGVjcy9ibG9iLzI5YmFiNjUwYmU2YjE4NDdjOTJkNDQ2MWQ0YzMzMDA4YjVlNTBiMWEvYXBpL3N0YXJrbmV0X2FwaV9vcGVucnBjLmpzb24jTDEyNDVcbiAgICAgICAgcGFyYW0gPj0gMG4gJiYgcGFyYW0gPD0gMm4gKiogMjUybiAtIDFuLFxuICAgICAgICBgVmFsaWRhdGU6IGFyZyAke2lucHV0Lm5hbWV9IGNhaXJvIHR5cGVkICR7aW5wdXQudHlwZX0gc2hvdWxkIGJlIGluIHJhbmdlIFswLCAyXjI1Mi0xXWBcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgYnJlYWs7XG4gIH1cbn07XG52YXIgdmFsaWRhdGVCb29sID0gKHBhcmFtZXRlciwgaW5wdXQpID0+IHtcbiAgYXNzZXJ0KFxuICAgIHR5cGVvZiBwYXJhbWV0ZXIgPT09IFwiYm9vbGVhblwiLFxuICAgIGBWYWxpZGF0ZTogYXJnICR7aW5wdXQubmFtZX0gb2YgY2Fpcm8gdHlwZSAke2lucHV0LnR5cGV9IHNob3VsZCBiZSB0eXBlIChCb29sZWFuKWBcbiAgKTtcbn07XG52YXIgdmFsaWRhdGVTdHJ1Y3QgPSAocGFyYW1ldGVyLCBpbnB1dCwgc3RydWN0cykgPT4ge1xuICBpZiAoaW5wdXQudHlwZSA9PT0gXCJjb3JlOjppbnRlZ2VyOjp1MjU2XCIgLyogdTI1NiAqLykge1xuICAgIHZhbGlkYXRlVWludChwYXJhbWV0ZXIsIGlucHV0KTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGlucHV0LnR5cGUgPT09IFwiY29yZTo6c3RhcmtuZXQ6OmV0aF9hZGRyZXNzOjpFdGhBZGRyZXNzXCIpIHtcbiAgICBhc3NlcnQoXG4gICAgICB0eXBlb2YgcGFyYW1ldGVyICE9PSBcIm9iamVjdFwiLFxuICAgICAgYEV0aEFkZHJlc3MgdHlwZSBpcyB3YWl0aW5nIGEgQmlnTnVtYmVyaXNoLiBHb3QgJHtwYXJhbWV0ZXJ9YFxuICAgICk7XG4gICAgY29uc3QgcGFyYW0gPSBCaWdJbnQocGFyYW1ldGVyLnRvU3RyaW5nKDEwKSk7XG4gICAgYXNzZXJ0KFxuICAgICAgLy8gZnJvbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zdGFya3dhcmUtbGlicy9zdGFya25ldC1zcGVjcy9ibG9iLzI5YmFiNjUwYmU2YjE4NDdjOTJkNDQ2MWQ0YzMzMDA4YjVlNTBiMWEvYXBpL3N0YXJrbmV0X2FwaV9vcGVucnBjLmpzb24jTDEyNTlcbiAgICAgIHBhcmFtID49IDBuICYmIHBhcmFtIDw9IDJuICoqIDE2MG4gLSAxbixcbiAgICAgIGBWYWxpZGF0ZTogYXJnICR7aW5wdXQubmFtZX0gY2Fpcm8gdHlwZWQgJHtpbnB1dC50eXBlfSBzaG91bGQgYmUgaW4gcmFuZ2UgWzAsIDJeMTYwLTFdYFxuICAgICk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGFzc2VydChcbiAgICB0eXBlb2YgcGFyYW1ldGVyID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KHBhcmFtZXRlciksXG4gICAgYFZhbGlkYXRlOiBhcmcgJHtpbnB1dC5uYW1lfSBpcyBjYWlybyB0eXBlIHN0cnVjdCAoJHtpbnB1dC50eXBlfSksIGFuZCBzaG91bGQgYmUgZGVmaW5lZCBhcyBqcyBvYmplY3QgKG5vdCBhcnJheSlgXG4gICk7XG4gIHN0cnVjdHNbaW5wdXQudHlwZV0ubWVtYmVycy5mb3JFYWNoKCh7IG5hbWUgfSkgPT4ge1xuICAgIGFzc2VydChcbiAgICAgIE9iamVjdC5rZXlzKHBhcmFtZXRlcikuaW5jbHVkZXMobmFtZSksXG4gICAgICBgVmFsaWRhdGU6IGFyZyAke2lucHV0Lm5hbWV9IHNob3VsZCBoYXZlIGEgcHJvcGVydHkgJHtuYW1lfWBcbiAgICApO1xuICB9KTtcbn07XG52YXIgdmFsaWRhdGVFbnVtID0gKHBhcmFtZXRlciwgaW5wdXQpID0+IHtcbiAgYXNzZXJ0KFxuICAgIHR5cGVvZiBwYXJhbWV0ZXIgPT09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkocGFyYW1ldGVyKSxcbiAgICBgVmFsaWRhdGU6IGFyZyAke2lucHV0Lm5hbWV9IGlzIGNhaXJvIHR5cGUgRW51bSAoJHtpbnB1dC50eXBlfSksIGFuZCBzaG91bGQgYmUgZGVmaW5lZCBhcyBqcyBvYmplY3QgKG5vdCBhcnJheSlgXG4gICk7XG4gIGNvbnN0IG1ldGhvZHNLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT2JqZWN0LmdldFByb3RvdHlwZU9mKHBhcmFtZXRlcikpO1xuICBjb25zdCBrZXlzID0gWy4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHBhcmFtZXRlciksIC4uLm1ldGhvZHNLZXlzXTtcbiAgaWYgKGlzVHlwZU9wdGlvbihpbnB1dC50eXBlKSAmJiBrZXlzLmluY2x1ZGVzKFwiaXNTb21lXCIpICYmIGtleXMuaW5jbHVkZXMoXCJpc05vbmVcIikpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGlzVHlwZVJlc3VsdChpbnB1dC50eXBlKSAmJiBrZXlzLmluY2x1ZGVzKFwiaXNPa1wiKSAmJiBrZXlzLmluY2x1ZGVzKFwiaXNFcnJcIikpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGtleXMuaW5jbHVkZXMoXCJ2YXJpYW50XCIpICYmIGtleXMuaW5jbHVkZXMoXCJhY3RpdmVWYXJpYW50XCIpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICBgVmFsaWRhdGUgRW51bTogYXJndW1lbnQgJHtpbnB1dC5uYW1lfSwgdHlwZSAke2lucHV0LnR5cGV9LCB2YWx1ZSByZWNlaXZlZCAke3BhcmFtZXRlcn0sIGlzIG5vdCBhbiBFbnVtLmBcbiAgKTtcbn07XG52YXIgdmFsaWRhdGVUdXBsZSA9IChwYXJhbWV0ZXIsIGlucHV0KSA9PiB7XG4gIGFzc2VydChcbiAgICB0eXBlb2YgcGFyYW1ldGVyID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KHBhcmFtZXRlciksXG4gICAgYFZhbGlkYXRlOiBhcmcgJHtpbnB1dC5uYW1lfSBzaG91bGQgYmUgYSB0dXBsZSAoZGVmaW5lZCBhcyBvYmplY3QpYFxuICApO1xufTtcbnZhciB2YWxpZGF0ZUFycmF5ID0gKHBhcmFtZXRlciwgaW5wdXQsIHN0cnVjdHMsIGVudW1zKSA9PiB7XG4gIGNvbnN0IGJhc2VUeXBlID0gZ2V0QXJyYXlUeXBlKGlucHV0LnR5cGUpO1xuICBpZiAoaXNUeXBlRmVsdChiYXNlVHlwZSkgJiYgaXNMb25nVGV4dChwYXJhbWV0ZXIpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGFzc2VydChBcnJheS5pc0FycmF5KHBhcmFtZXRlciksIGBWYWxpZGF0ZTogYXJnICR7aW5wdXQubmFtZX0gc2hvdWxkIGJlIGFuIEFycmF5YCk7XG4gIHN3aXRjaCAodHJ1ZSkge1xuICAgIGNhc2UgaXNUeXBlRmVsdChiYXNlVHlwZSk6XG4gICAgICBwYXJhbWV0ZXIuZm9yRWFjaCgocGFyYW0pID0+IHZhbGlkYXRlRmVsdChwYXJhbSwgaW5wdXQpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgaXNUeXBlVHVwbGUoYmFzZVR5cGUpOlxuICAgICAgcGFyYW1ldGVyLmZvckVhY2goKGl0KSA9PiB2YWxpZGF0ZVR1cGxlKGl0LCB7IG5hbWU6IGlucHV0Lm5hbWUsIHR5cGU6IGJhc2VUeXBlIH0pKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgaXNUeXBlQXJyYXkoYmFzZVR5cGUpOlxuICAgICAgcGFyYW1ldGVyLmZvckVhY2goXG4gICAgICAgIChwYXJhbSkgPT4gdmFsaWRhdGVBcnJheShwYXJhbSwgeyBuYW1lOiBcIlwiLCB0eXBlOiBiYXNlVHlwZSB9LCBzdHJ1Y3RzLCBlbnVtcylcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGlzVHlwZVN0cnVjdChiYXNlVHlwZSwgc3RydWN0cyk6XG4gICAgICBwYXJhbWV0ZXIuZm9yRWFjaChcbiAgICAgICAgKGl0KSA9PiB2YWxpZGF0ZVN0cnVjdChpdCwgeyBuYW1lOiBpbnB1dC5uYW1lLCB0eXBlOiBiYXNlVHlwZSB9LCBzdHJ1Y3RzKVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgaXNUeXBlRW51bShiYXNlVHlwZSwgZW51bXMpOlxuICAgICAgcGFyYW1ldGVyLmZvckVhY2goKGl0KSA9PiB2YWxpZGF0ZUVudW0oaXQsIHsgbmFtZTogaW5wdXQubmFtZSwgdHlwZTogYmFzZVR5cGUgfSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAoaXNUeXBlVWludChiYXNlVHlwZSkgfHwgaXNUeXBlTGl0dGVyYWwoYmFzZVR5cGUpKTpcbiAgICAgIHBhcmFtZXRlci5mb3JFYWNoKChwYXJhbSkgPT4gdmFsaWRhdGVVaW50KHBhcmFtLCBpbnB1dCkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBpc1R5cGVCb29sKGJhc2VUeXBlKTpcbiAgICAgIHBhcmFtZXRlci5mb3JFYWNoKChwYXJhbSkgPT4gdmFsaWRhdGVCb29sKHBhcmFtLCBpbnB1dCkpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFZhbGlkYXRlIFVuaGFuZGxlZDogYXJndW1lbnQgJHtpbnB1dC5uYW1lfSwgdHlwZSAke2lucHV0LnR5cGV9LCB2YWx1ZSAke3BhcmFtZXRlcn1gXG4gICAgICApO1xuICB9XG59O1xuZnVuY3Rpb24gdmFsaWRhdGVGaWVsZHMoYWJpTWV0aG9kLCBhcmdzLCBzdHJ1Y3RzLCBlbnVtcykge1xuICBhYmlNZXRob2QuaW5wdXRzLnJlZHVjZSgoYWNjLCBpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHBhcmFtZXRlciA9IGFyZ3NbYWNjXTtcbiAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgIGNhc2UgaXNMZW4oaW5wdXQubmFtZSk6XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICBjYXNlIGlzVHlwZUZlbHQoaW5wdXQudHlwZSk6XG4gICAgICAgIHZhbGlkYXRlRmVsdChwYXJhbWV0ZXIsIGlucHV0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIChpc1R5cGVVaW50KGlucHV0LnR5cGUpIHx8IGlzVHlwZUxpdHRlcmFsKGlucHV0LnR5cGUpKTpcbiAgICAgICAgdmFsaWRhdGVVaW50KHBhcmFtZXRlciwgaW5wdXQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaXNUeXBlQm9vbChpbnB1dC50eXBlKTpcbiAgICAgICAgdmFsaWRhdGVCb29sKHBhcmFtZXRlciwgaW5wdXQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaXNUeXBlQXJyYXkoaW5wdXQudHlwZSk6XG4gICAgICAgIHZhbGlkYXRlQXJyYXkocGFyYW1ldGVyLCBpbnB1dCwgc3RydWN0cywgZW51bXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaXNUeXBlU3RydWN0KGlucHV0LnR5cGUsIHN0cnVjdHMpOlxuICAgICAgICB2YWxpZGF0ZVN0cnVjdChwYXJhbWV0ZXIsIGlucHV0LCBzdHJ1Y3RzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlzVHlwZUVudW0oaW5wdXQudHlwZSwgZW51bXMpOlxuICAgICAgICB2YWxpZGF0ZUVudW0ocGFyYW1ldGVyLCBpbnB1dCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpc1R5cGVUdXBsZShpbnB1dC50eXBlKTpcbiAgICAgICAgdmFsaWRhdGVUdXBsZShwYXJhbWV0ZXIsIGlucHV0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFZhbGlkYXRlIFVuaGFuZGxlZDogYXJndW1lbnQgJHtpbnB1dC5uYW1lfSwgdHlwZSAke2lucHV0LnR5cGV9LCB2YWx1ZSAke3BhcmFtZXRlcn1gXG4gICAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBhY2MgKyAxO1xuICB9LCAwKTtcbn1cblxuLy8gc3JjL3V0aWxzL2NhbGxkYXRhL2luZGV4LnRzXG52YXIgQ2FsbERhdGEgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGFiaSkge1xuICAgIHRoaXMuc3RydWN0cyA9IENhbGxEYXRhLmdldEFiaVN0cnVjdChhYmkpO1xuICAgIHRoaXMuZW51bXMgPSBDYWxsRGF0YS5nZXRBYmlFbnVtKGFiaSk7XG4gICAgdGhpcy5wYXJzZXIgPSBjcmVhdGVBYmlQYXJzZXIoYWJpKTtcbiAgICB0aGlzLmFiaSA9IHRoaXMucGFyc2VyLmdldExlZ2FjeUZvcm1hdCgpO1xuICB9XG4gIC8qKlxuICAgKiBWYWxpZGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBtZXRob2QgYXMgY29ycmVzcG9uZGluZyB0byB0aGUgb25lcyBpbiB0aGUgYWJpXG4gICAqIEBwYXJhbSB0eXBlIFZhbGlkYXRlVHlwZSAtIHR5cGUgb2YgdGhlIG1ldGhvZFxuICAgKiBAcGFyYW0gbWV0aG9kIHN0cmluZyAtIG5hbWUgb2YgdGhlIG1ldGhvZFxuICAgKiBAcGFyYW0gYXJncyBBcmdzT3JDYWxsZGF0YSAtIGFyZ3VtZW50cyB0aGF0IGFyZSBwYXNzZWQgdG8gdGhlIG1ldGhvZFxuICAgKi9cbiAgdmFsaWRhdGUodHlwZSwgbWV0aG9kLCBhcmdzID0gW10pIHtcbiAgICBpZiAodHlwZSAhPT0gXCJERVBMT1lcIiAvKiBERVBMT1kgKi8pIHtcbiAgICAgIGNvbnN0IGludm9jYWJsZUZ1bmN0aW9uTmFtZXMgPSB0aGlzLmFiaS5maWx0ZXIoKGFiaSkgPT4ge1xuICAgICAgICBpZiAoYWJpLnR5cGUgIT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IGlzVmlldyA9IGFiaS5zdGF0ZU11dGFiaWxpdHkgPT09IFwidmlld1wiIHx8IGFiaS5zdGF0ZV9tdXRhYmlsaXR5ID09PSBcInZpZXdcIjtcbiAgICAgICAgcmV0dXJuIHR5cGUgPT09IFwiSU5WT0tFXCIgLyogSU5WT0tFICovID8gIWlzVmlldyA6IGlzVmlldztcbiAgICAgIH0pLm1hcCgoYWJpKSA9PiBhYmkubmFtZSk7XG4gICAgICBhc3NlcnQoXG4gICAgICAgIGludm9jYWJsZUZ1bmN0aW9uTmFtZXMuaW5jbHVkZXMobWV0aG9kKSxcbiAgICAgICAgYCR7dHlwZSA9PT0gXCJJTlZPS0VcIiAvKiBJTlZPS0UgKi8gPyBcImludm9jYWJsZVwiIDogXCJ2aWV3YWJsZVwifSBtZXRob2Qgbm90IGZvdW5kIGluIGFiaWBcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IGFiaU1ldGhvZCA9IHRoaXMuYWJpLmZpbmQoXG4gICAgICAoYWJpKSA9PiB0eXBlID09PSBcIkRFUExPWVwiIC8qIERFUExPWSAqLyA/IGFiaS5uYW1lID09PSBtZXRob2QgJiYgYWJpLnR5cGUgPT09IFwiY29uc3RydWN0b3JcIiA6IGFiaS5uYW1lID09PSBtZXRob2QgJiYgYWJpLnR5cGUgPT09IFwiZnVuY3Rpb25cIlxuICAgICk7XG4gICAgaWYgKGlzTm9Db25zdHJ1Y3RvclZhbGlkKG1ldGhvZCwgYXJncywgYWJpTWV0aG9kKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbnB1dHNMZW5ndGggPSB0aGlzLnBhcnNlci5tZXRob2RJbnB1dHNMZW5ndGgoYWJpTWV0aG9kKTtcbiAgICBpZiAoYXJncy5sZW5ndGggIT09IGlucHV0c0xlbmd0aCkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIGBJbnZhbGlkIG51bWJlciBvZiBhcmd1bWVudHMsIGV4cGVjdGVkICR7aW5wdXRzTGVuZ3RofSBhcmd1bWVudHMsIGJ1dCBnb3QgJHthcmdzLmxlbmd0aH1gXG4gICAgICApO1xuICAgIH1cbiAgICB2YWxpZGF0ZUZpZWxkcyhhYmlNZXRob2QsIGFyZ3MsIHRoaXMuc3RydWN0cywgdGhpcy5lbnVtcyk7XG4gIH1cbiAgLyoqXG4gICAqIENvbXBpbGUgY29udHJhY3QgY2FsbERhdGEgd2l0aCBhYmlcbiAgICogUGFyc2UgdGhlIGNhbGxkYXRhIGJ5IHVzaW5nIGlucHV0IGZpZWxkcyBmcm9tIHRoZSBhYmkgZm9yIHRoYXQgbWV0aG9kXG4gICAqIEBwYXJhbSBtZXRob2Qgc3RyaW5nIC0gbWV0aG9kIG5hbWVcbiAgICogQHBhcmFtIGFyZ3MgUmF3QXJncyAtIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIG1ldGhvZC4gQ2FuIGJlIGFuIGFycmF5IG9mIGFyZ3VtZW50cyAoaW4gdGhlIG9yZGVyIG9mIGFiaSBkZWZpbml0aW9uKSwgb3IgYW4gb2JqZWN0IGNvbnN0cnVjdGVkIGluIGNvbmZvcm1pdHkgd2l0aCBhYmkgKGluIHRoaXMgY2FzZSwgdGhlIHBhcmFtZXRlciBjYW4gYmUgaW4gYSB3cm9uZyBvcmRlcikuXG4gICAqIEByZXR1cm4gQ2FsbGRhdGEgLSBwYXJzZWQgYXJndW1lbnRzIGluIGZvcm1hdCB0aGF0IGNvbnRyYWN0IGlzIGV4cGVjdGluZ1xuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IGNhbGxkYXRhID0gbXlDYWxsRGF0YS5jb21waWxlKFwiY29uc3RydWN0b3JcIiwgW1wiMHgzNGFcIiwgWzEsIDNuXV0pO1xuICAgKiBgYGBcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCBjYWxsZGF0YTIgPSBteUNhbGxEYXRhLmNvbXBpbGUoXCJjb25zdHJ1Y3RvclwiLCB7bGlzdDpbMSwgM25dLCBiYWxhbmNlOlwiMHgzNFwifSk7IC8vIHdyb25nIG9yZGVyIGlzIHZhbGlkXG4gICAqIGBgYFxuICAgKi9cbiAgY29tcGlsZShtZXRob2QsIGFyZ3NDYWxsZGF0YSkge1xuICAgIGNvbnN0IGFiaU1ldGhvZCA9IHRoaXMuYWJpLmZpbmQoKGFiaUZ1bmN0aW9uKSA9PiBhYmlGdW5jdGlvbi5uYW1lID09PSBtZXRob2QpO1xuICAgIGlmIChpc05vQ29uc3RydWN0b3JWYWxpZChtZXRob2QsIGFyZ3NDYWxsZGF0YSwgYWJpTWV0aG9kKSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBsZXQgYXJncztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcmdzQ2FsbGRhdGEpKSB7XG4gICAgICBhcmdzID0gYXJnc0NhbGxkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBvcmRlcmVkT2JqZWN0ID0gb3JkZXJQcm9wc0J5QWJpKFxuICAgICAgICBhcmdzQ2FsbGRhdGEsXG4gICAgICAgIGFiaU1ldGhvZC5pbnB1dHMsXG4gICAgICAgIHRoaXMuc3RydWN0cyxcbiAgICAgICAgdGhpcy5lbnVtc1xuICAgICAgKTtcbiAgICAgIGFyZ3MgPSBPYmplY3QudmFsdWVzKG9yZGVyZWRPYmplY3QpO1xuICAgICAgdmFsaWRhdGVGaWVsZHMoYWJpTWV0aG9kLCBhcmdzLCB0aGlzLnN0cnVjdHMsIHRoaXMuZW51bXMpO1xuICAgIH1cbiAgICBjb25zdCBhcmdzSXRlcmF0b3IgPSBhcmdzW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICBjb25zdCBjYWxsQXJyYXkgPSBhYmlNZXRob2QuaW5wdXRzLnJlZHVjZShcbiAgICAgIChhY2MsIGlucHV0KSA9PiBpc0xlbihpbnB1dC5uYW1lKSAmJiAhaXNDYWlybzFUeXBlKGlucHV0LnR5cGUpID8gYWNjIDogYWNjLmNvbmNhdChwYXJzZUNhbGxkYXRhRmllbGQoYXJnc0l0ZXJhdG9yLCBpbnB1dCwgdGhpcy5zdHJ1Y3RzLCB0aGlzLmVudW1zKSksXG4gICAgICBbXVxuICAgICk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNhbGxBcnJheSwgXCJfX2NvbXBpbGVkX19cIiwge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICB2YWx1ZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBjYWxsQXJyYXk7XG4gIH1cbiAgLyoqXG4gICAqIENvbXBpbGUgY29udHJhY3QgY2FsbERhdGEgd2l0aG91dCBhYmlcbiAgICogQHBhcmFtIHJhd0FyZ3MgUmF3QXJncyByZXByZXNlbnRpbmcgY2Fpcm8gbWV0aG9kIGFyZ3VtZW50cyBvciBzdHJpbmcgYXJyYXkgb2YgY29tcGlsZWQgZGF0YVxuICAgKiBAcmV0dXJucyBDYWxsZGF0YVxuICAgKi9cbiAgc3RhdGljIGNvbXBpbGUocmF3QXJncykge1xuICAgIGNvbnN0IGNyZWF0ZVRyZWUgPSAob2JqKSA9PiB7XG4gICAgICBjb25zdCBnZXRFbnRyaWVzID0gKG8sIHByZWZpeCA9IFwiLlwiKSA9PiB7XG4gICAgICAgIGNvbnN0IG9lID0gQXJyYXkuaXNBcnJheShvKSA/IFtvLmxlbmd0aC50b1N0cmluZygpLCAuLi5vXSA6IG87XG4gICAgICAgIHJldHVybiBPYmplY3QuZW50cmllcyhvZSkuZmxhdE1hcCgoW2ssIHZdKSA9PiB7XG4gICAgICAgICAgbGV0IHZhbHVlID0gdjtcbiAgICAgICAgICBpZiAoayA9PT0gXCJlbnRyeXBvaW50XCIpXG4gICAgICAgICAgICB2YWx1ZSA9IGdldFNlbGVjdG9yRnJvbU5hbWUodmFsdWUpO1xuICAgICAgICAgIGVsc2UgaWYgKGlzTG9uZ1RleHQodmFsdWUpKVxuICAgICAgICAgICAgdmFsdWUgPSBzcGxpdExvbmdTdHJpbmcodmFsdWUpO1xuICAgICAgICAgIGNvbnN0IGtrID0gQXJyYXkuaXNBcnJheShvZSkgJiYgayA9PT0gXCIwXCIgPyBcIiQkbGVuXCIgOiBrO1xuICAgICAgICAgIGlmIChpc0JpZ0ludCh2YWx1ZSkpXG4gICAgICAgICAgICByZXR1cm4gW1tgJHtwcmVmaXh9JHtra31gLCBmZWx0KHZhbHVlKV1dO1xuICAgICAgICAgIGlmIChPYmplY3QodmFsdWUpID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgbWV0aG9kc0tleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpKTtcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBbLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpLCAuLi5tZXRob2RzS2V5c107XG4gICAgICAgICAgICBpZiAoa2V5cy5pbmNsdWRlcyhcImlzU29tZVwiKSAmJiBrZXlzLmluY2x1ZGVzKFwiaXNOb25lXCIpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG15T3B0aW9uID0gdmFsdWU7XG4gICAgICAgICAgICAgIGNvbnN0IHZhcmlhbnROYiA9IG15T3B0aW9uLmlzU29tZSgpID8gMCAvKiBTb21lICovIDogMSAvKiBOb25lICovO1xuICAgICAgICAgICAgICBpZiAobXlPcHRpb24uaXNTb21lKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEVudHJpZXMoeyAwOiB2YXJpYW50TmIsIDE6IG15T3B0aW9uLnVud3JhcCgpIH0sIGAke3ByZWZpeH0ke2trfS5gKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFtbYCR7cHJlZml4fSR7a2t9YCwgZmVsdCh2YXJpYW50TmIpXV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa2V5cy5pbmNsdWRlcyhcImlzT2tcIikgJiYga2V5cy5pbmNsdWRlcyhcImlzRXJyXCIpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG15UmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgICAgIGNvbnN0IHZhcmlhbnROYiA9IG15UmVzdWx0LmlzT2soKSA/IDAgLyogT2sgKi8gOiAxIC8qIEVyciAqLztcbiAgICAgICAgICAgICAgcmV0dXJuIGdldEVudHJpZXMoeyAwOiB2YXJpYW50TmIsIDE6IG15UmVzdWx0LnVud3JhcCgpIH0sIGAke3ByZWZpeH0ke2trfS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChrZXlzLmluY2x1ZGVzKFwidmFyaWFudFwiKSAmJiBrZXlzLmluY2x1ZGVzKFwiYWN0aXZlVmFyaWFudFwiKSkge1xuICAgICAgICAgICAgICBjb25zdCBteUVudW0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgY29uc3QgYWN0aXZlVmFyaWFudCA9IG15RW51bS5hY3RpdmVWYXJpYW50KCk7XG4gICAgICAgICAgICAgIGNvbnN0IGxpc3RWYXJpYW50cyA9IE9iamVjdC5rZXlzKG15RW51bS52YXJpYW50KTtcbiAgICAgICAgICAgICAgY29uc3QgYWN0aXZlVmFyaWFudE5iID0gbGlzdFZhcmlhbnRzLmZpbmRJbmRleChcbiAgICAgICAgICAgICAgICAodmFyaWFudCkgPT4gdmFyaWFudCA9PT0gYWN0aXZlVmFyaWFudFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIG15RW51bS51bndyYXAoKSA9PT0gXCJvYmplY3RcIiAmJiBPYmplY3Qua2V5cyhteUVudW0udW53cmFwKCkpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbW2Ake3ByZWZpeH0ke2trfWAsIGZlbHQoYWN0aXZlVmFyaWFudE5iKV1dO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBnZXRFbnRyaWVzKHsgMDogYWN0aXZlVmFyaWFudE5iLCAxOiBteUVudW0udW53cmFwKCkgfSwgYCR7cHJlZml4fSR7a2t9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGdldEVudHJpZXModmFsdWUsIGAke3ByZWZpeH0ke2trfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFtbYCR7cHJlZml4fSR7a2t9YCwgZmVsdCh2YWx1ZSldXTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmZyb21FbnRyaWVzKGdldEVudHJpZXMob2JqKSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgbGV0IGNhbGxUcmVlQXJyYXk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHJhd0FyZ3MpKSB7XG4gICAgICBjb25zdCBjYWxsVHJlZSA9IGNyZWF0ZVRyZWUocmF3QXJncyk7XG4gICAgICBjYWxsVHJlZUFycmF5ID0gT2JqZWN0LnZhbHVlcyhjYWxsVHJlZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNhbGxPYmogPSB7IC4uLnJhd0FyZ3MgfTtcbiAgICAgIGNvbnN0IGNhbGxUcmVlID0gY3JlYXRlVHJlZShjYWxsT2JqKTtcbiAgICAgIGNhbGxUcmVlQXJyYXkgPSBPYmplY3QudmFsdWVzKGNhbGxUcmVlKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNhbGxUcmVlQXJyYXksIFwiX19jb21waWxlZF9fXCIsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgdmFsdWU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gY2FsbFRyZWVBcnJheTtcbiAgfVxuICAvKipcbiAgICogUGFyc2UgZWxlbWVudHMgb2YgdGhlIHJlc3BvbnNlIGFycmF5IGFuZCBzdHJ1Y3R1cmluZyB0aGVtIGludG8gcmVzcG9uc2Ugb2JqZWN0XG4gICAqIEBwYXJhbSBtZXRob2Qgc3RyaW5nIC0gbWV0aG9kIG5hbWVcbiAgICogQHBhcmFtIHJlc3BvbnNlIHN0cmluZ1tdIC0gcmVzcG9uc2UgZnJvbSB0aGUgbWV0aG9kXG4gICAqIEByZXR1cm4gUmVzdWx0IC0gcGFyc2VkIHJlc3BvbnNlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGFiaVxuICAgKi9cbiAgcGFyc2UobWV0aG9kLCByZXNwb25zZSkge1xuICAgIGNvbnN0IHsgb3V0cHV0cyB9ID0gdGhpcy5hYmkuZmluZCgoYWJpKSA9PiBhYmkubmFtZSA9PT0gbWV0aG9kKTtcbiAgICBjb25zdCByZXNwb25zZUl0ZXJhdG9yID0gcmVzcG9uc2UuZmxhdCgpW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICBjb25zdCBwYXJzZWQgPSBvdXRwdXRzLmZsYXQoKS5yZWR1Y2UoKGFjYywgb3V0cHV0LCBpZHgpID0+IHtcbiAgICAgIGNvbnN0IHByb3BOYW1lID0gb3V0cHV0Lm5hbWUgPz8gaWR4O1xuICAgICAgYWNjW3Byb3BOYW1lXSA9IHJlc3BvbnNlUGFyc2VyKHJlc3BvbnNlSXRlcmF0b3IsIG91dHB1dCwgdGhpcy5zdHJ1Y3RzLCB0aGlzLmVudW1zLCBhY2MpO1xuICAgICAgaWYgKGFjY1twcm9wTmFtZV0gJiYgYWNjW2Ake3Byb3BOYW1lfV9sZW5gXSkge1xuICAgICAgICBkZWxldGUgYWNjW2Ake3Byb3BOYW1lfV9sZW5gXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwYXJzZWQpLmxlbmd0aCA9PT0gMSAmJiAwIGluIHBhcnNlZCA/IHBhcnNlZFswXSA6IHBhcnNlZDtcbiAgfVxuICAvKipcbiAgICogRm9ybWF0IGNhaXJvIG1ldGhvZCByZXNwb25zZSBkYXRhIHRvIG5hdGl2ZSBqcyB2YWx1ZXMgYmFzZWQgb24gcHJvdmlkZWQgZm9ybWF0IHNjaGVtYVxuICAgKiBAcGFyYW0gbWV0aG9kIHN0cmluZyAtIGNhaXJvIG1ldGhvZCBuYW1lXG4gICAqIEBwYXJhbSByZXNwb25zZSBzdHJpbmdbXSAtIGNhaXJvIG1ldGhvZCByZXNwb25zZVxuICAgKiBAcGFyYW0gZm9ybWF0IG9iamVjdCAtIGZvcm1hdHRlciBvYmplY3Qgc2NoZW1hXG4gICAqIEByZXR1cm5zIFJlc3VsdCAtIHBhcnNlZCBhbmQgZm9ybWF0dGVkIHJlc3BvbnNlIG9iamVjdFxuICAgKi9cbiAgZm9ybWF0KG1ldGhvZCwgcmVzcG9uc2UsIGZvcm1hdCkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMucGFyc2UobWV0aG9kLCByZXNwb25zZSk7XG4gICAgcmV0dXJuIGZvcm1hdHRlcihwYXJzZWQsIGZvcm1hdCk7XG4gIH1cbiAgLyoqXG4gICAqIEhlbHBlciB0byBleHRyYWN0IHN0cnVjdHMgZnJvbSBhYmlcbiAgICogQHBhcmFtIGFiaSBBYmlcbiAgICogQHJldHVybnMgQWJpU3RydWN0cyAtIHN0cnVjdHMgZnJvbSBhYmlcbiAgICovXG4gIHN0YXRpYyBnZXRBYmlTdHJ1Y3QoYWJpKSB7XG4gICAgcmV0dXJuIGFiaS5maWx0ZXIoKGFiaUVudHJ5KSA9PiBhYmlFbnRyeS50eXBlID09PSBcInN0cnVjdFwiKS5yZWR1Y2UoXG4gICAgICAoYWNjLCBhYmlFbnRyeSkgPT4gKHtcbiAgICAgICAgLi4uYWNjLFxuICAgICAgICBbYWJpRW50cnkubmFtZV06IGFiaUVudHJ5XG4gICAgICB9KSxcbiAgICAgIHt9XG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogSGVscGVyIHRvIGV4dHJhY3QgZW51bXMgZnJvbSBhYmlcbiAgICogQHBhcmFtIGFiaSBBYmlcbiAgICogQHJldHVybnMgQWJpRW51bXMgLSBlbnVtcyBmcm9tIGFiaVxuICAgKi9cbiAgc3RhdGljIGdldEFiaUVudW0oYWJpKSB7XG4gICAgY29uc3QgZnVsbEVudW1MaXN0ID0gYWJpLmZpbHRlcigoYWJpRW50cnkpID0+IGFiaUVudHJ5LnR5cGUgPT09IFwiZW51bVwiKS5yZWR1Y2UoXG4gICAgICAoYWNjLCBhYmlFbnRyeSkgPT4gKHtcbiAgICAgICAgLi4uYWNjLFxuICAgICAgICBbYWJpRW50cnkubmFtZV06IGFiaUVudHJ5XG4gICAgICB9KSxcbiAgICAgIHt9XG4gICAgKTtcbiAgICBkZWxldGUgZnVsbEVudW1MaXN0W1wiY29yZTo6Ym9vbFwiXTtcbiAgICByZXR1cm4gZnVsbEVudW1MaXN0O1xuICB9XG4gIC8qKlxuICAgKiBIZWxwZXI6IENvbXBpbGUgSGV4Q2FsbGRhdGEgfCBSYXdDYWxsZGF0YSB8IFJhd0FyZ3NcbiAgICogQHBhcmFtIHJhd0NhbGxkYXRhIEhleENhbGxkYXRhIHwgUmF3Q2FsbGRhdGEgfCBSYXdBcmdzXG4gICAqIEByZXR1cm5zIENhbGxkYXRhXG4gICAqL1xuICBzdGF0aWMgdG9DYWxsZGF0YShyYXdDYWxsZGF0YSA9IFtdKSB7XG4gICAgcmV0dXJuIENhbGxEYXRhLmNvbXBpbGUocmF3Q2FsbGRhdGEpO1xuICB9XG4gIC8qKlxuICAgKiBIZWxwZXI6IENvbnZlcnQgcmF3IHRvIEhleENhbGxkYXRhXG4gICAqIEBwYXJhbSByYXcgSGV4Q2FsbGRhdGEgfCBSYXdDYWxsZGF0YSB8IFJhd0FyZ3NcbiAgICogQHJldHVybnMgSGV4Q2FsbGRhdGFcbiAgICovXG4gIHN0YXRpYyB0b0hleChyYXcgPSBbXSkge1xuICAgIGNvbnN0IGNhbGxkYXRhID0gQ2FsbERhdGEuY29tcGlsZShyYXcpO1xuICAgIHJldHVybiBjYWxsZGF0YS5tYXAoKGl0KSA9PiB0b0hleChpdCkpO1xuICB9XG59O1xuXG4vLyBzcmMvdXRpbHMvaGFzaC50c1xudmFyIGhhc2hfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoaGFzaF9leHBvcnRzLCB7XG4gIGNhbGN1bGF0ZUNvbnRyYWN0QWRkcmVzc0Zyb21IYXNoOiAoKSA9PiBjYWxjdWxhdGVDb250cmFjdEFkZHJlc3NGcm9tSGFzaCxcbiAgY2FsY3VsYXRlRGVjbGFyZVRyYW5zYWN0aW9uSGFzaDogKCkgPT4gY2FsY3VsYXRlRGVjbGFyZVRyYW5zYWN0aW9uSGFzaCxcbiAgY2FsY3VsYXRlRGVwbG95QWNjb3VudFRyYW5zYWN0aW9uSGFzaDogKCkgPT4gY2FsY3VsYXRlRGVwbG95QWNjb3VudFRyYW5zYWN0aW9uSGFzaCxcbiAgY2FsY3VsYXRlRGVwbG95VHJhbnNhY3Rpb25IYXNoOiAoKSA9PiBjYWxjdWxhdGVEZXBsb3lUcmFuc2FjdGlvbkhhc2gsXG4gIGNhbGN1bGF0ZVRyYW5zYWN0aW9uSGFzaDogKCkgPT4gY2FsY3VsYXRlVHJhbnNhY3Rpb25IYXNoLFxuICBjYWxjdWxhdGVUcmFuc2FjdGlvbkhhc2hDb21tb246ICgpID0+IGNhbGN1bGF0ZVRyYW5zYWN0aW9uSGFzaENvbW1vbixcbiAgY29tcHV0ZUNvbXBpbGVkQ2xhc3NIYXNoOiAoKSA9PiBjb21wdXRlQ29tcGlsZWRDbGFzc0hhc2gsXG4gIGNvbXB1dGVDb250cmFjdENsYXNzSGFzaDogKCkgPT4gY29tcHV0ZUNvbnRyYWN0Q2xhc3NIYXNoLFxuICBjb21wdXRlSGFzaE9uRWxlbWVudHM6ICgpID0+IGNvbXB1dGVIYXNoT25FbGVtZW50cyxcbiAgY29tcHV0ZUxlZ2FjeUNvbnRyYWN0Q2xhc3NIYXNoOiAoKSA9PiBjb21wdXRlTGVnYWN5Q29udHJhY3RDbGFzc0hhc2gsXG4gIGNvbXB1dGVTaWVycmFDb250cmFjdENsYXNzSGFzaDogKCkgPT4gY29tcHV0ZVNpZXJyYUNvbnRyYWN0Q2xhc3NIYXNoLFxuICBkZWZhdWx0OiAoKSA9PiBjb21wdXRlSGludGVkQ2xhc3NIYXNoLFxuICBmZWVUcmFuc2FjdGlvblZlcnNpb246ICgpID0+IGZlZVRyYW5zYWN0aW9uVmVyc2lvbixcbiAgZmVlVHJhbnNhY3Rpb25WZXJzaW9uXzI6ICgpID0+IGZlZVRyYW5zYWN0aW9uVmVyc2lvbl8yLFxuICBmb3JtYXRTcGFjZXM6ICgpID0+IGZvcm1hdFNwYWNlcyxcbiAgZ2V0U2VsZWN0b3I6ICgpID0+IGdldFNlbGVjdG9yLFxuICBnZXRTZWxlY3RvckZyb21OYW1lOiAoKSA9PiBnZXRTZWxlY3RvckZyb21OYW1lLFxuICBnZXRWZXJzaW9uc0J5VHlwZTogKCkgPT4gZ2V0VmVyc2lvbnNCeVR5cGUsXG4gIGtlY2Nha0JuOiAoKSA9PiBrZWNjYWtCbixcbiAgcG9zZWlkb246ICgpID0+IHBvc2VpZG9uLFxuICBzdGFya25ldEtlY2NhazogKCkgPT4gc3RhcmtuZXRLZWNjYWssXG4gIHRyYW5zYWN0aW9uVmVyc2lvbjogKCkgPT4gdHJhbnNhY3Rpb25WZXJzaW9uLFxuICB0cmFuc2FjdGlvblZlcnNpb25fMjogKCkgPT4gdHJhbnNhY3Rpb25WZXJzaW9uXzJcbn0pO1xuaW1wb3J0IHsgcG9zZWlkb25IYXNoTWFueSB9IGZyb20gXCJAc2N1cmUvc3RhcmtuZXRcIjtcblxuLy8gc3JjL3V0aWxzL2VjLnRzXG52YXIgZWNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoZWNfZXhwb3J0cywge1xuICBzdGFya0N1cnZlOiAoKSA9PiBzdGFya0N1cnZlLFxuICB3ZWllcnN0cmFzczogKCkgPT4gd2VpZXJzdHJhc3Ncbn0pO1xuaW1wb3J0ICogYXMgc3RhcmtDdXJ2ZSBmcm9tIFwiQHNjdXJlL3N0YXJrbmV0XCI7XG5pbXBvcnQgKiBhcyB3ZWllcnN0cmFzcyBmcm9tIFwiQG5vYmxlL2N1cnZlcy9hYnN0cmFjdC93ZWllcnN0cmFzc1wiO1xuXG4vLyBzcmMvdXRpbHMvanNvbi50c1xudmFyIGpzb25fZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoanNvbl9leHBvcnRzLCB7XG4gIHBhcnNlOiAoKSA9PiBwYXJzZTIsXG4gIHBhcnNlQWx3YXlzQXNCaWc6ICgpID0+IHBhcnNlQWx3YXlzQXNCaWcsXG4gIHN0cmluZ2lmeTogKCkgPT4gc3RyaW5naWZ5MixcbiAgc3RyaW5naWZ5QWx3YXlzQXNCaWc6ICgpID0+IHN0cmluZ2lmeUFsd2F5c0FzQmlnXG59KTtcbmltcG9ydCAqIGFzIGpzb24gZnJvbSBcImxvc3NsZXNzLWpzb25cIjtcbnZhciBwYXJzZUludEFzTnVtYmVyT3JCaWdJbnQgPSAoeCkgPT4ge1xuICBpZiAoIWpzb24uaXNJbnRlZ2VyKHgpKVxuICAgIHJldHVybiBwYXJzZUZsb2F0KHgpO1xuICBjb25zdCB2ID0gcGFyc2VJbnQoeCwgMTApO1xuICByZXR1cm4gTnVtYmVyLmlzU2FmZUludGVnZXIodikgPyB2IDogQmlnSW50KHgpO1xufTtcbnZhciBwYXJzZTIgPSAoeCkgPT4ganNvbi5wYXJzZShTdHJpbmcoeCksIHZvaWQgMCwgcGFyc2VJbnRBc051bWJlck9yQmlnSW50KTtcbnZhciBwYXJzZUFsd2F5c0FzQmlnID0gKHgpID0+IGpzb24ucGFyc2UoU3RyaW5nKHgpLCB2b2lkIDAsIGpzb24ucGFyc2VOdW1iZXJBbmRCaWdJbnQpO1xudmFyIHN0cmluZ2lmeTIgPSAodmFsdWUsIHJlcGxhY2VyLCBzcGFjZSwgbnVtYmVyU3RyaW5naWZpZXJzKSA9PiBqc29uLnN0cmluZ2lmeSh2YWx1ZSwgcmVwbGFjZXIsIHNwYWNlLCBudW1iZXJTdHJpbmdpZmllcnMpO1xudmFyIHN0cmluZ2lmeUFsd2F5c0FzQmlnID0gc3RyaW5naWZ5MjtcblxuLy8gc3JjL3V0aWxzL2hhc2gudHNcbmltcG9ydCAqIGFzIHBvc2VpZG9uIGZyb20gXCJAbm9ibGUvY3VydmVzL2Fic3RyYWN0L3Bvc2VpZG9uXCI7XG52YXIgdHJhbnNhY3Rpb25WZXJzaW9uID0gQk5fVFJBTlNBQ1RJT05fVkVSU0lPTl8xO1xudmFyIHRyYW5zYWN0aW9uVmVyc2lvbl8yID0gQk5fVFJBTlNBQ1RJT05fVkVSU0lPTl8yO1xudmFyIGZlZVRyYW5zYWN0aW9uVmVyc2lvbiA9IEJOX0ZFRV9UUkFOU0FDVElPTl9WRVJTSU9OXzE7XG52YXIgZmVlVHJhbnNhY3Rpb25WZXJzaW9uXzIgPSBCTl9GRUVfVFJBTlNBQ1RJT05fVkVSU0lPTl8yO1xuZnVuY3Rpb24gZ2V0VmVyc2lvbnNCeVR5cGUodmVyc2lvblR5cGUpIHtcbiAgcmV0dXJuIHZlcnNpb25UeXBlID09PSBcImZlZVwiID8geyB2MTogZmVlVHJhbnNhY3Rpb25WZXJzaW9uLCB2MjogZmVlVHJhbnNhY3Rpb25WZXJzaW9uXzIgfSA6IHsgdjE6IHRyYW5zYWN0aW9uVmVyc2lvbiwgdjI6IHRyYW5zYWN0aW9uVmVyc2lvbl8yIH07XG59XG5mdW5jdGlvbiBjb21wdXRlSGFzaE9uRWxlbWVudHMoZGF0YSkge1xuICByZXR1cm4gWy4uLmRhdGEsIGRhdGEubGVuZ3RoXS5yZWR1Y2UoKHgsIHkpID0+IHN0YXJrQ3VydmUucGVkZXJzZW4odG9CaWdJbnQoeCksIHRvQmlnSW50KHkpKSwgMCkudG9TdHJpbmcoKTtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZVRyYW5zYWN0aW9uSGFzaENvbW1vbih0eEhhc2hQcmVmaXgsIHZlcnNpb24sIGNvbnRyYWN0QWRkcmVzcywgZW50cnlQb2ludFNlbGVjdG9yLCBjYWxsZGF0YSwgbWF4RmVlLCBjaGFpbklkLCBhZGRpdGlvbmFsRGF0YSA9IFtdKSB7XG4gIGNvbnN0IGNhbGxkYXRhSGFzaCA9IGNvbXB1dGVIYXNoT25FbGVtZW50cyhjYWxsZGF0YSk7XG4gIGNvbnN0IGRhdGFUb0hhc2ggPSBbXG4gICAgdHhIYXNoUHJlZml4LFxuICAgIHZlcnNpb24sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICAgIGVudHJ5UG9pbnRTZWxlY3RvcixcbiAgICBjYWxsZGF0YUhhc2gsXG4gICAgbWF4RmVlLFxuICAgIGNoYWluSWQsXG4gICAgLi4uYWRkaXRpb25hbERhdGFcbiAgXTtcbiAgcmV0dXJuIGNvbXB1dGVIYXNoT25FbGVtZW50cyhkYXRhVG9IYXNoKTtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZURlcGxveVRyYW5zYWN0aW9uSGFzaChjb250cmFjdEFkZHJlc3MsIGNvbnN0cnVjdG9yQ2FsbGRhdGEsIHZlcnNpb24sIGNoYWluSWQsIGNvbnN0cnVjdG9yTmFtZSA9IFwiY29uc3RydWN0b3JcIikge1xuICByZXR1cm4gY2FsY3VsYXRlVHJhbnNhY3Rpb25IYXNoQ29tbW9uKFxuICAgIFwiMHg2NDY1NzA2YzZmNzlcIiAvKiBERVBMT1kgKi8sXG4gICAgdmVyc2lvbixcbiAgICBjb250cmFjdEFkZHJlc3MsXG4gICAgZ2V0U2VsZWN0b3JGcm9tTmFtZShjb25zdHJ1Y3Rvck5hbWUpLFxuICAgIGNvbnN0cnVjdG9yQ2FsbGRhdGEsXG4gICAgMCxcbiAgICBjaGFpbklkXG4gICk7XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVEZWNsYXJlVHJhbnNhY3Rpb25IYXNoKGNsYXNzSGFzaCwgc2VuZGVyQWRkcmVzcywgdmVyc2lvbiwgbWF4RmVlLCBjaGFpbklkLCBub25jZSwgY29tcGlsZWRDbGFzc0hhc2gpIHtcbiAgcmV0dXJuIGNhbGN1bGF0ZVRyYW5zYWN0aW9uSGFzaENvbW1vbihcbiAgICBcIjB4NjQ2NTYzNmM2MTcyNjVcIiAvKiBERUNMQVJFICovLFxuICAgIHZlcnNpb24sXG4gICAgc2VuZGVyQWRkcmVzcyxcbiAgICAwLFxuICAgIFtjbGFzc0hhc2hdLFxuICAgIG1heEZlZSxcbiAgICBjaGFpbklkLFxuICAgIFtub25jZSwgLi4uY29tcGlsZWRDbGFzc0hhc2ggPyBbY29tcGlsZWRDbGFzc0hhc2hdIDogW11dXG4gICk7XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVEZXBsb3lBY2NvdW50VHJhbnNhY3Rpb25IYXNoKGNvbnRyYWN0QWRkcmVzcywgY2xhc3NIYXNoLCBjb25zdHJ1Y3RvckNhbGxkYXRhLCBzYWx0LCB2ZXJzaW9uLCBtYXhGZWUsIGNoYWluSWQsIG5vbmNlKSB7XG4gIGNvbnN0IGNhbGxkYXRhID0gW2NsYXNzSGFzaCwgc2FsdCwgLi4uY29uc3RydWN0b3JDYWxsZGF0YV07XG4gIHJldHVybiBjYWxjdWxhdGVUcmFuc2FjdGlvbkhhc2hDb21tb24oXG4gICAgXCIweDY0NjU3MDZjNmY3OTVmNjE2MzYzNmY3NTZlNzRcIiAvKiBERVBMT1lfQUNDT1VOVCAqLyxcbiAgICB2ZXJzaW9uLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgICAwLFxuICAgIGNhbGxkYXRhLFxuICAgIG1heEZlZSxcbiAgICBjaGFpbklkLFxuICAgIFtub25jZV1cbiAgKTtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZVRyYW5zYWN0aW9uSGFzaChjb250cmFjdEFkZHJlc3MsIHZlcnNpb24sIGNhbGxkYXRhLCBtYXhGZWUsIGNoYWluSWQsIG5vbmNlKSB7XG4gIHJldHVybiBjYWxjdWxhdGVUcmFuc2FjdGlvbkhhc2hDb21tb24oXG4gICAgXCIweDY5NmU3NjZmNmI2NVwiIC8qIElOVk9LRSAqLyxcbiAgICB2ZXJzaW9uLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgICAwLFxuICAgIGNhbGxkYXRhLFxuICAgIG1heEZlZSxcbiAgICBjaGFpbklkLFxuICAgIFtub25jZV1cbiAgKTtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZUNvbnRyYWN0QWRkcmVzc0Zyb21IYXNoKHNhbHQsIGNsYXNzSGFzaCwgY29uc3RydWN0b3JDYWxsZGF0YSwgZGVwbG95ZXJBZGRyZXNzKSB7XG4gIGNvbnN0IGNvbXBpbGVkQ2FsbGRhdGEgPSBDYWxsRGF0YS5jb21waWxlKGNvbnN0cnVjdG9yQ2FsbGRhdGEpO1xuICBjb25zdCBjb25zdHJ1Y3RvckNhbGxkYXRhSGFzaCA9IGNvbXB1dGVIYXNoT25FbGVtZW50cyhjb21waWxlZENhbGxkYXRhKTtcbiAgY29uc3QgQ09OVFJBQ1RfQUREUkVTU19QUkVGSVggPSBmZWx0KFwiMHg1MzU0NDE1MjRiNGU0NTU0NWY0MzRmNGU1NDUyNDE0MzU0NWY0MTQ0NDQ1MjQ1NTM1M1wiKTtcbiAgY29uc3QgaGFzaCA9IGNvbXB1dGVIYXNoT25FbGVtZW50cyhbXG4gICAgQ09OVFJBQ1RfQUREUkVTU19QUkVGSVgsXG4gICAgZGVwbG95ZXJBZGRyZXNzLFxuICAgIHNhbHQsXG4gICAgY2xhc3NIYXNoLFxuICAgIGNvbnN0cnVjdG9yQ2FsbGRhdGFIYXNoXG4gIF0pO1xuICByZXR1cm4gdG9IZXgoQmlnSW50KGhhc2gpICUgQUREUl9CT1VORCk7XG59XG5mdW5jdGlvbiBudWxsU2tpcFJlcGxhY2VyKGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSA9PT0gXCJhdHRyaWJ1dGVzXCIgfHwga2V5ID09PSBcImFjY2Vzc2libGVfc2NvcGVzXCIpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwID8gdm9pZCAwIDogdmFsdWU7XG4gIH1cbiAgaWYgKGtleSA9PT0gXCJkZWJ1Z19pbmZvXCIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyB2b2lkIDAgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFNwYWNlcyhqc29uMikge1xuICBsZXQgaW5zaWRlUXVvdGVzID0gZmFsc2U7XG4gIGNvbnN0IG5ld1N0cmluZyA9IFtdO1xuICBmb3IgKGNvbnN0IGNoYXIgb2YganNvbjIpIHtcbiAgICBpZiAoY2hhciA9PT0gJ1wiJyAmJiAobmV3U3RyaW5nLmxlbmd0aCA+IDAgJiYgbmV3U3RyaW5nLnNsaWNlKC0xKVswXSA9PT0gXCJcXFxcXCIpID09PSBmYWxzZSkge1xuICAgICAgaW5zaWRlUXVvdGVzID0gIWluc2lkZVF1b3RlcztcbiAgICB9XG4gICAgaWYgKGluc2lkZVF1b3Rlcykge1xuICAgICAgbmV3U3RyaW5nLnB1c2goY2hhcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0cmluZy5wdXNoKGNoYXIgPT09IFwiOlwiID8gXCI6IFwiIDogY2hhciA9PT0gXCIsXCIgPyBcIiwgXCIgOiBjaGFyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ld1N0cmluZy5qb2luKFwiXCIpO1xufVxuZnVuY3Rpb24gY29tcHV0ZUhpbnRlZENsYXNzSGFzaChjb21waWxlZENvbnRyYWN0KSB7XG4gIGNvbnN0IHsgYWJpLCBwcm9ncmFtIH0gPSBjb21waWxlZENvbnRyYWN0O1xuICBjb25zdCBjb250cmFjdENsYXNzID0geyBhYmksIHByb2dyYW0gfTtcbiAgY29uc3Qgc2VyaWFsaXplZEpzb24gPSBmb3JtYXRTcGFjZXMoc3RyaW5naWZ5Mihjb250cmFjdENsYXNzLCBudWxsU2tpcFJlcGxhY2VyKSk7XG4gIHJldHVybiBhZGRIZXhQcmVmaXgoc3RhcmtDdXJ2ZS5rZWNjYWsodXRmOFRvQXJyYXkoc2VyaWFsaXplZEpzb24pKS50b1N0cmluZygxNikpO1xufVxuZnVuY3Rpb24gY29tcHV0ZUxlZ2FjeUNvbnRyYWN0Q2xhc3NIYXNoKGNvbnRyYWN0KSB7XG4gIGNvbnN0IGNvbXBpbGVkQ29udHJhY3QgPSB0eXBlb2YgY29udHJhY3QgPT09IFwic3RyaW5nXCIgPyBwYXJzZTIoY29udHJhY3QpIDogY29udHJhY3Q7XG4gIGNvbnN0IGFwaVZlcnNpb24gPSB0b0hleChBUElfVkVSU0lPTik7XG4gIGNvbnN0IGV4dGVybmFsRW50cnlQb2ludHNIYXNoID0gY29tcHV0ZUhhc2hPbkVsZW1lbnRzKFxuICAgIGNvbXBpbGVkQ29udHJhY3QuZW50cnlfcG9pbnRzX2J5X3R5cGUuRVhURVJOQUwuZmxhdE1hcCgoZSkgPT4gW2Uuc2VsZWN0b3IsIGUub2Zmc2V0XSlcbiAgKTtcbiAgY29uc3QgbDFIYW5kbGVyRW50cnlQb2ludHNIYXNoID0gY29tcHV0ZUhhc2hPbkVsZW1lbnRzKFxuICAgIGNvbXBpbGVkQ29udHJhY3QuZW50cnlfcG9pbnRzX2J5X3R5cGUuTDFfSEFORExFUi5mbGF0TWFwKChlKSA9PiBbZS5zZWxlY3RvciwgZS5vZmZzZXRdKVxuICApO1xuICBjb25zdCBjb25zdHJ1Y3RvckVudHJ5UG9pbnRIYXNoID0gY29tcHV0ZUhhc2hPbkVsZW1lbnRzKFxuICAgIGNvbXBpbGVkQ29udHJhY3QuZW50cnlfcG9pbnRzX2J5X3R5cGUuQ09OU1RSVUNUT1IuZmxhdE1hcCgoZSkgPT4gW2Uuc2VsZWN0b3IsIGUub2Zmc2V0XSlcbiAgKTtcbiAgY29uc3QgYnVpbHRpbnNIYXNoID0gY29tcHV0ZUhhc2hPbkVsZW1lbnRzKFxuICAgIGNvbXBpbGVkQ29udHJhY3QucHJvZ3JhbS5idWlsdGlucy5tYXAoKHMpID0+IGVuY29kZVNob3J0U3RyaW5nKHMpKVxuICApO1xuICBjb25zdCBoaW50ZWRDbGFzc0hhc2ggPSBjb21wdXRlSGludGVkQ2xhc3NIYXNoKGNvbXBpbGVkQ29udHJhY3QpO1xuICBjb25zdCBkYXRhSGFzaCA9IGNvbXB1dGVIYXNoT25FbGVtZW50cyhjb21waWxlZENvbnRyYWN0LnByb2dyYW0uZGF0YSk7XG4gIHJldHVybiBjb21wdXRlSGFzaE9uRWxlbWVudHMoW1xuICAgIGFwaVZlcnNpb24sXG4gICAgZXh0ZXJuYWxFbnRyeVBvaW50c0hhc2gsXG4gICAgbDFIYW5kbGVyRW50cnlQb2ludHNIYXNoLFxuICAgIGNvbnN0cnVjdG9yRW50cnlQb2ludEhhc2gsXG4gICAgYnVpbHRpbnNIYXNoLFxuICAgIGhpbnRlZENsYXNzSGFzaCxcbiAgICBkYXRhSGFzaFxuICBdKTtcbn1cbmZ1bmN0aW9uIGhhc2hCdWlsdGlucyhidWlsdGlucykge1xuICByZXR1cm4gcG9zZWlkb25IYXNoTWFueShcbiAgICBidWlsdGlucy5mbGF0TWFwKChpdCkgPT4ge1xuICAgICAgcmV0dXJuIEJpZ0ludChlbmNvZGVTaG9ydFN0cmluZyhpdCkpO1xuICAgIH0pXG4gICk7XG59XG5mdW5jdGlvbiBoYXNoRW50cnlQb2ludChkYXRhKSB7XG4gIGNvbnN0IGJhc2UgPSBkYXRhLmZsYXRNYXAoKGl0KSA9PiB7XG4gICAgcmV0dXJuIFtCaWdJbnQoaXQuc2VsZWN0b3IpLCBCaWdJbnQoaXQub2Zmc2V0KSwgaGFzaEJ1aWx0aW5zKGl0LmJ1aWx0aW5zKV07XG4gIH0pO1xuICByZXR1cm4gcG9zZWlkb25IYXNoTWFueShiYXNlKTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVDb21waWxlZENsYXNzSGFzaChjYXNtKSB7XG4gIGNvbnN0IENPTVBJTEVEX0NMQVNTX1ZFUlNJT04gPSBcIkNPTVBJTEVEX0NMQVNTX1YxXCI7XG4gIGNvbnN0IGNvbXBpbGVkQ2xhc3NWZXJzaW9uID0gQmlnSW50KGVuY29kZVNob3J0U3RyaW5nKENPTVBJTEVEX0NMQVNTX1ZFUlNJT04pKTtcbiAgY29uc3QgZXh0ZXJuYWxFbnRyeVBvaW50c0hhc2ggPSBoYXNoRW50cnlQb2ludChjYXNtLmVudHJ5X3BvaW50c19ieV90eXBlLkVYVEVSTkFMKTtcbiAgY29uc3QgbDFIYW5kbGVycyA9IGhhc2hFbnRyeVBvaW50KGNhc20uZW50cnlfcG9pbnRzX2J5X3R5cGUuTDFfSEFORExFUik7XG4gIGNvbnN0IGNvbnN0cnVjdG9yID0gaGFzaEVudHJ5UG9pbnQoY2FzbS5lbnRyeV9wb2ludHNfYnlfdHlwZS5DT05TVFJVQ1RPUik7XG4gIGNvbnN0IGJ5dGVjb2RlID0gcG9zZWlkb25IYXNoTWFueShjYXNtLmJ5dGVjb2RlLm1hcCgoaXQpID0+IEJpZ0ludChpdCkpKTtcbiAgcmV0dXJuIHRvSGV4KFxuICAgIHBvc2VpZG9uSGFzaE1hbnkoW1xuICAgICAgY29tcGlsZWRDbGFzc1ZlcnNpb24sXG4gICAgICBleHRlcm5hbEVudHJ5UG9pbnRzSGFzaCxcbiAgICAgIGwxSGFuZGxlcnMsXG4gICAgICBjb25zdHJ1Y3RvcixcbiAgICAgIGJ5dGVjb2RlXG4gICAgXSlcbiAgKTtcbn1cbmZ1bmN0aW9uIGhhc2hFbnRyeVBvaW50U2llcnJhKGRhdGEpIHtcbiAgY29uc3QgYmFzZSA9IGRhdGEuZmxhdE1hcCgoaXQpID0+IHtcbiAgICByZXR1cm4gW0JpZ0ludChpdC5zZWxlY3RvciksIEJpZ0ludChpdC5mdW5jdGlvbl9pZHgpXTtcbiAgfSk7XG4gIHJldHVybiBwb3NlaWRvbkhhc2hNYW55KGJhc2UpO1xufVxuZnVuY3Rpb24gaGFzaEFiaShzaWVycmEpIHtcbiAgY29uc3QgaW5kZW50U3RyaW5nID0gZm9ybWF0U3BhY2VzKHN0cmluZ2lmeTIoc2llcnJhLmFiaSwgbnVsbCkpO1xuICByZXR1cm4gQmlnSW50KGFkZEhleFByZWZpeChzdGFya0N1cnZlLmtlY2Nhayh1dGY4VG9BcnJheShpbmRlbnRTdHJpbmcpKS50b1N0cmluZygxNikpKTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVTaWVycmFDb250cmFjdENsYXNzSGFzaChzaWVycmEpIHtcbiAgY29uc3QgQ09OVFJBQ1RfQ0xBU1NfVkVSU0lPTiA9IFwiQ09OVFJBQ1RfQ0xBU1NfVjAuMS4wXCI7XG4gIGNvbnN0IGNvbXBpbGVkQ2xhc3NWZXJzaW9uID0gQmlnSW50KGVuY29kZVNob3J0U3RyaW5nKENPTlRSQUNUX0NMQVNTX1ZFUlNJT04pKTtcbiAgY29uc3QgZXh0ZXJuYWxFbnRyeVBvaW50c0hhc2ggPSBoYXNoRW50cnlQb2ludFNpZXJyYShzaWVycmEuZW50cnlfcG9pbnRzX2J5X3R5cGUuRVhURVJOQUwpO1xuICBjb25zdCBsMUhhbmRsZXJzID0gaGFzaEVudHJ5UG9pbnRTaWVycmEoc2llcnJhLmVudHJ5X3BvaW50c19ieV90eXBlLkwxX0hBTkRMRVIpO1xuICBjb25zdCBjb25zdHJ1Y3RvciA9IGhhc2hFbnRyeVBvaW50U2llcnJhKHNpZXJyYS5lbnRyeV9wb2ludHNfYnlfdHlwZS5DT05TVFJVQ1RPUik7XG4gIGNvbnN0IGFiaUhhc2ggPSBoYXNoQWJpKHNpZXJyYSk7XG4gIGNvbnN0IHNpZXJyYVByb2dyYW0gPSBwb3NlaWRvbkhhc2hNYW55KHNpZXJyYS5zaWVycmFfcHJvZ3JhbS5tYXAoKGl0KSA9PiBCaWdJbnQoaXQpKSk7XG4gIHJldHVybiB0b0hleChcbiAgICBwb3NlaWRvbkhhc2hNYW55KFtcbiAgICAgIGNvbXBpbGVkQ2xhc3NWZXJzaW9uLFxuICAgICAgZXh0ZXJuYWxFbnRyeVBvaW50c0hhc2gsXG4gICAgICBsMUhhbmRsZXJzLFxuICAgICAgY29uc3RydWN0b3IsXG4gICAgICBhYmlIYXNoLFxuICAgICAgc2llcnJhUHJvZ3JhbVxuICAgIF0pXG4gICk7XG59XG5mdW5jdGlvbiBjb21wdXRlQ29udHJhY3RDbGFzc0hhc2goY29udHJhY3QpIHtcbiAgY29uc3QgY29tcGlsZWRDb250cmFjdCA9IHR5cGVvZiBjb250cmFjdCA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlMihjb250cmFjdCkgOiBjb250cmFjdDtcbiAgaWYgKFwic2llcnJhX3Byb2dyYW1cIiBpbiBjb21waWxlZENvbnRyYWN0KSB7XG4gICAgcmV0dXJuIGNvbXB1dGVTaWVycmFDb250cmFjdENsYXNzSGFzaChjb21waWxlZENvbnRyYWN0KTtcbiAgfVxuICByZXR1cm4gY29tcHV0ZUxlZ2FjeUNvbnRyYWN0Q2xhc3NIYXNoKGNvbXBpbGVkQ29udHJhY3QpO1xufVxuXG4vLyBzcmMvdXRpbHMvc3RhcmsudHNcbnZhciBzdGFya19leHBvcnRzID0ge307XG5fX2V4cG9ydChzdGFya19leHBvcnRzLCB7XG4gIGNvbXByZXNzUHJvZ3JhbTogKCkgPT4gY29tcHJlc3NQcm9ncmFtLFxuICBkZWNvbXByZXNzUHJvZ3JhbTogKCkgPT4gZGVjb21wcmVzc1Byb2dyYW0sXG4gIGVzdGltYXRlZEZlZVRvTWF4RmVlOiAoKSA9PiBlc3RpbWF0ZWRGZWVUb01heEZlZSxcbiAgZm9ybWF0U2lnbmF0dXJlOiAoKSA9PiBmb3JtYXRTaWduYXR1cmUsXG4gIG1ha2VBZGRyZXNzOiAoKSA9PiBtYWtlQWRkcmVzcyxcbiAgcmFuZG9tQWRkcmVzczogKCkgPT4gcmFuZG9tQWRkcmVzcyxcbiAgc2lnbmF0dXJlVG9EZWNpbWFsQXJyYXk6ICgpID0+IHNpZ25hdHVyZVRvRGVjaW1hbEFycmF5LFxuICBzaWduYXR1cmVUb0hleEFycmF5OiAoKSA9PiBzaWduYXR1cmVUb0hleEFycmF5XG59KTtcbmltcG9ydCB7IGdldFN0YXJrS2V5LCB1dGlscyB9IGZyb20gXCJAc2N1cmUvc3RhcmtuZXRcIjtcbmltcG9ydCB7IGd6aXAsIHVuZ3ppcCB9IGZyb20gXCJwYWtvXCI7XG5mdW5jdGlvbiBjb21wcmVzc1Byb2dyYW0oanNvblByb2dyYW0pIHtcbiAgY29uc3Qgc3RyaW5naWZpZWQgPSB0eXBlb2YganNvblByb2dyYW0gPT09IFwic3RyaW5nXCIgPyBqc29uUHJvZ3JhbSA6IHN0cmluZ2lmeTIoanNvblByb2dyYW0pO1xuICBjb25zdCBjb21wcmVzc2VkUHJvZ3JhbSA9IGd6aXAoc3RyaW5naWZpZWQpO1xuICByZXR1cm4gYnRvYVVuaXZlcnNhbChjb21wcmVzc2VkUHJvZ3JhbSk7XG59XG5mdW5jdGlvbiBkZWNvbXByZXNzUHJvZ3JhbShiYXNlNjQyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJhc2U2NDIpKVxuICAgIHJldHVybiBiYXNlNjQyO1xuICBjb25zdCBkZWNvbXByZXNzZWQgPSBhcnJheUJ1ZmZlclRvU3RyaW5nKHVuZ3ppcChhdG9iVW5pdmVyc2FsKGJhc2U2NDIpKSk7XG4gIHJldHVybiBwYXJzZTIoZGVjb21wcmVzc2VkKTtcbn1cbmZ1bmN0aW9uIHJhbmRvbUFkZHJlc3MoKSB7XG4gIGNvbnN0IHJhbmRvbUtleVBhaXIgPSB1dGlscy5yYW5kb21Qcml2YXRlS2V5KCk7XG4gIHJldHVybiBnZXRTdGFya0tleShyYW5kb21LZXlQYWlyKTtcbn1cbmZ1bmN0aW9uIG1ha2VBZGRyZXNzKGlucHV0KSB7XG4gIHJldHVybiBhZGRIZXhQcmVmaXgoaW5wdXQpLnRvTG93ZXJDYXNlKCk7XG59XG5mdW5jdGlvbiBmb3JtYXRTaWduYXR1cmUoc2lnKSB7XG4gIGlmICghc2lnKVxuICAgIHRocm93IEVycm9yKFwiZm9ybWF0U2lnbmF0dXJlOiBwcm92aWRlZCBzaWduYXR1cmUgaXMgdW5kZWZpbmVkXCIpO1xuICBpZiAoQXJyYXkuaXNBcnJheShzaWcpKSB7XG4gICAgcmV0dXJuIHNpZy5tYXAoKGl0KSA9PiB0b0hleChpdCkpO1xuICB9XG4gIHRyeSB7XG4gICAgY29uc3QgeyByLCBzIH0gPSBzaWc7XG4gICAgcmV0dXJuIFt0b0hleChyKSwgdG9IZXgocyldO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU2lnbmF0dXJlIG5lZWQgdG8gYmUgd2VpZXJzdHJhc3MuU2lnbmF0dXJlVHlwZSBvciBhbiBhcnJheSBmb3IgY3VzdG9tXCIpO1xuICB9XG59XG5mdW5jdGlvbiBzaWduYXR1cmVUb0RlY2ltYWxBcnJheShzaWcpIHtcbiAgcmV0dXJuIGJpZ051bWJlcmlzaEFycmF5VG9EZWNpbWFsU3RyaW5nQXJyYXkoZm9ybWF0U2lnbmF0dXJlKHNpZykpO1xufVxuZnVuY3Rpb24gc2lnbmF0dXJlVG9IZXhBcnJheShzaWcpIHtcbiAgcmV0dXJuIGJpZ051bWJlcmlzaEFycmF5VG9IZXhhZGVjaW1hbFN0cmluZ0FycmF5KGZvcm1hdFNpZ25hdHVyZShzaWcpKTtcbn1cbmZ1bmN0aW9uIGVzdGltYXRlZEZlZVRvTWF4RmVlKGVzdGltYXRlZEZlZSwgb3ZlcmhlYWQgPSAwLjUpIHtcbiAgY29uc3Qgb3ZlckhlYWRQZXJjZW50ID0gTWF0aC5yb3VuZCgoMSArIG92ZXJoZWFkKSAqIDEwMCk7XG4gIHJldHVybiB0b0JpZ0ludChlc3RpbWF0ZWRGZWUpICogdG9CaWdJbnQob3ZlckhlYWRQZXJjZW50KSAvIDEwMG47XG59XG5cbi8vIHNyYy91dGlscy9jb250cmFjdC50c1xuZnVuY3Rpb24gaXNTaWVycmEoY29udHJhY3QpIHtcbiAgY29uc3QgY29tcGlsZWRDb250cmFjdCA9IHR5cGVvZiBjb250cmFjdCA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlMihjb250cmFjdCkgOiBjb250cmFjdDtcbiAgcmV0dXJuIFwic2llcnJhX3Byb2dyYW1cIiBpbiBjb21waWxlZENvbnRyYWN0O1xufVxuZnVuY3Rpb24gZXh0cmFjdENvbnRyYWN0SGFzaGVzKHBheWxvYWQpIHtcbiAgY29uc3QgcmVzcG9uc2UgPSB7IC4uLnBheWxvYWQgfTtcbiAgaWYgKGlzU2llcnJhKHBheWxvYWQuY29udHJhY3QpKSB7XG4gICAgaWYgKCFwYXlsb2FkLmNvbXBpbGVkQ2xhc3NIYXNoICYmIHBheWxvYWQuY2FzbSkge1xuICAgICAgcmVzcG9uc2UuY29tcGlsZWRDbGFzc0hhc2ggPSBjb21wdXRlQ29tcGlsZWRDbGFzc0hhc2gocGF5bG9hZC5jYXNtKTtcbiAgICB9XG4gICAgaWYgKCFyZXNwb25zZS5jb21waWxlZENsYXNzSGFzaClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJFeHRyYWN0IGNvbXBpbGVkQ2xhc3NIYXNoIGZhaWxlZCwgcHJvdmlkZSAoQ2Fpcm9Bc3NlbWJseSkuY2FzbSBmaWxlIG9yIGNvbXBpbGVkQ2xhc3NIYXNoXCJcbiAgICAgICk7XG4gIH1cbiAgcmVzcG9uc2UuY2xhc3NIYXNoID0gcGF5bG9hZC5jbGFzc0hhc2ggPz8gY29tcHV0ZUNvbnRyYWN0Q2xhc3NIYXNoKHBheWxvYWQuY29udHJhY3QpO1xuICBpZiAoIXJlc3BvbnNlLmNsYXNzSGFzaClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHRyYWN0IGNsYXNzSGFzaCBmYWlsZWQsIHByb3ZpZGUgKENvbXBpbGVkQ29udHJhY3QpLmpzb24gZmlsZSBvciBjbGFzc0hhc2hcIik7XG4gIHJldHVybiByZXNwb25zZTtcbn1cbmZ1bmN0aW9uIGNvbnRyYWN0Q2xhc3NSZXNwb25zZVRvTGVnYWN5Q29tcGlsZWRDb250cmFjdChjY3IpIHtcbiAgaWYgKGlzU2llcnJhKGNjcikpIHtcbiAgICB0aHJvdyBFcnJvcihcIkNvbnRyYWN0Q2xhc3NSZXNwb25zZSBuZWVkIHRvIGJlIExlZ2FjeUNvbnRyYWN0Q2xhc3MgKGNhaXJvMCByZXNwb25zZSBjbGFzcylcIik7XG4gIH1cbiAgY29uc3QgY29udHJhY3QgPSBjY3I7XG4gIHJldHVybiB7IC4uLmNvbnRyYWN0LCBwcm9ncmFtOiBkZWNvbXByZXNzUHJvZ3JhbShjb250cmFjdC5wcm9ncmFtKSB9O1xufVxuXG4vLyBzcmMvdXRpbHMvZmV0Y2hQb255ZmlsbC50c1xuaW1wb3J0IGlzb21vcnBoaWNGZXRjaCBmcm9tIFwiaXNvbW9ycGhpYy1mZXRjaFwiO1xudmFyIGZldGNoUG9ueWZpbGxfZGVmYXVsdCA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmZldGNoIHx8IC8vIHVzZSBidWlsZGluIGZldGNoIGluIGJyb3dzZXIgaWYgYXZhaWxhYmxlXG50eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5mZXRjaCB8fCAvLyB1c2UgYnVpbGRpbiBmZXRjaCBpbiBub2RlLCByZWFjdC1uYXRpdmUgYW5kIHNlcnZpY2Ugd29ya2VyIGlmIGF2YWlsYWJsZVxuaXNvbW9ycGhpY0ZldGNoO1xuXG4vLyBzcmMvdXRpbHMvcHJvdmlkZXIudHNcbnZhciBwcm92aWRlcl9leHBvcnRzID0ge307XG5fX2V4cG9ydChwcm92aWRlcl9leHBvcnRzLCB7XG4gIGNyZWF0ZVNpZXJyYUNvbnRyYWN0Q2xhc3M6ICgpID0+IGNyZWF0ZVNpZXJyYUNvbnRyYWN0Q2xhc3MsXG4gIHBhcnNlQ29udHJhY3Q6ICgpID0+IHBhcnNlQ29udHJhY3QsXG4gIHdhaXQ6ICgpID0+IHdhaXRcbn0pO1xuZnVuY3Rpb24gd2FpdChkZWxheSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlcykgPT4ge1xuICAgIHNldFRpbWVvdXQocmVzLCBkZWxheSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlU2llcnJhQ29udHJhY3RDbGFzcyhjb250cmFjdCkge1xuICBjb25zdCByZXN1bHQgPSB7IC4uLmNvbnRyYWN0IH07XG4gIGRlbGV0ZSByZXN1bHQuc2llcnJhX3Byb2dyYW1fZGVidWdfaW5mbztcbiAgcmVzdWx0LmFiaSA9IGZvcm1hdFNwYWNlcyhzdHJpbmdpZnkyKGNvbnRyYWN0LmFiaSkpO1xuICByZXN1bHQuc2llcnJhX3Byb2dyYW0gPSBmb3JtYXRTcGFjZXMoc3RyaW5naWZ5Mihjb250cmFjdC5zaWVycmFfcHJvZ3JhbSkpO1xuICByZXN1bHQuc2llcnJhX3Byb2dyYW0gPSBjb21wcmVzc1Byb2dyYW0ocmVzdWx0LnNpZXJyYV9wcm9ncmFtKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHBhcnNlQ29udHJhY3QoY29udHJhY3QpIHtcbiAgY29uc3QgcGFyc2VkQ29udHJhY3QgPSB0eXBlb2YgY29udHJhY3QgPT09IFwic3RyaW5nXCIgPyBwYXJzZTIoY29udHJhY3QpIDogY29udHJhY3Q7XG4gIGlmICghaXNTaWVycmEoY29udHJhY3QpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnBhcnNlZENvbnRyYWN0LFxuICAgICAgLi4uXCJwcm9ncmFtXCIgaW4gcGFyc2VkQ29udHJhY3QgJiYgeyBwcm9ncmFtOiBjb21wcmVzc1Byb2dyYW0ocGFyc2VkQ29udHJhY3QucHJvZ3JhbSkgfVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZVNpZXJyYUNvbnRyYWN0Q2xhc3MocGFyc2VkQ29udHJhY3QpO1xufVxuXG4vLyBzcmMvdXRpbHMvcmVzcG9uc2VQYXJzZXIvcnBjLnRzXG52YXIgUlBDUmVzcG9uc2VQYXJzZXIgPSBjbGFzcyB7XG4gIHBhcnNlR2V0QmxvY2tSZXNwb25zZShyZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGltZXN0YW1wOiByZXMudGltZXN0YW1wLFxuICAgICAgYmxvY2tfaGFzaDogXCJibG9ja19oYXNoXCIgaW4gcmVzID8gcmVzLmJsb2NrX2hhc2ggOiBcIlwiLFxuICAgICAgYmxvY2tfbnVtYmVyOiBcImJsb2NrX251bWJlclwiIGluIHJlcyA/IHJlcy5ibG9ja19udW1iZXIgOiAtMSxcbiAgICAgIG5ld19yb290OiBcIm5ld19yb290XCIgaW4gcmVzID8gcmVzLm5ld19yb290IDogXCJcIixcbiAgICAgIHBhcmVudF9oYXNoOiByZXMucGFyZW50X2hhc2gsXG4gICAgICBzdGF0dXM6IFwic3RhdHVzXCIgaW4gcmVzID8gcmVzLnN0YXR1cyA6IFwiUEVORElOR1wiIC8qIFBFTkRJTkcgKi8sXG4gICAgICB0cmFuc2FjdGlvbnM6IHJlcy50cmFuc2FjdGlvbnNcbiAgICB9O1xuICB9XG4gIHBhcnNlR2V0VHJhbnNhY3Rpb25SZXNwb25zZShyZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2FsbGRhdGE6IFwiY2FsbGRhdGFcIiBpbiByZXMgPyByZXMuY2FsbGRhdGEgOiBbXSxcbiAgICAgIGNvbnRyYWN0X2FkZHJlc3M6IFwiY29udHJhY3RfYWRkcmVzc1wiIGluIHJlcyA/IHJlcy5jb250cmFjdF9hZGRyZXNzIDogXCJcIixcbiAgICAgIHNlbmRlcl9hZGRyZXNzOiBcInNlbmRlcl9hZGRyZXNzXCIgaW4gcmVzID8gcmVzLnNlbmRlcl9hZGRyZXNzIDogXCJcIixcbiAgICAgIG1heF9mZWU6IFwibWF4X2ZlZVwiIGluIHJlcyA/IHJlcy5tYXhfZmVlIDogXCJcIixcbiAgICAgIG5vbmNlOiBcIm5vbmNlXCIgaW4gcmVzID8gcmVzLm5vbmNlIDogXCJcIixcbiAgICAgIHNpZ25hdHVyZTogXCJzaWduYXR1cmVcIiBpbiByZXMgPyByZXMuc2lnbmF0dXJlIDogW10sXG4gICAgICB0cmFuc2FjdGlvbl9oYXNoOiByZXMudHJhbnNhY3Rpb25faGFzaCxcbiAgICAgIHZlcnNpb246IHJlcy52ZXJzaW9uXG4gICAgfTtcbiAgfVxuICBwYXJzZUZlZUVzdGltYXRlUmVzcG9uc2UocmVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG92ZXJhbGxfZmVlOiB0b0JpZ0ludChyZXNbMF0ub3ZlcmFsbF9mZWUpLFxuICAgICAgZ2FzX2NvbnN1bWVkOiB0b0JpZ0ludChyZXNbMF0uZ2FzX2NvbnN1bWVkKSxcbiAgICAgIGdhc19wcmljZTogdG9CaWdJbnQocmVzWzBdLmdhc19wcmljZSlcbiAgICB9O1xuICB9XG4gIHBhcnNlRmVlRXN0aW1hdGVCdWxrUmVzcG9uc2UocmVzKSB7XG4gICAgcmV0dXJuIHJlcy5tYXAoKHZhbCkgPT4gKHtcbiAgICAgIG92ZXJhbGxfZmVlOiB0b0JpZ0ludCh2YWwub3ZlcmFsbF9mZWUpLFxuICAgICAgZ2FzX2NvbnN1bWVkOiB0b0JpZ0ludCh2YWwuZ2FzX2NvbnN1bWVkKSxcbiAgICAgIGdhc19wcmljZTogdG9CaWdJbnQodmFsLmdhc19wcmljZSlcbiAgICB9KSk7XG4gIH1cbiAgcGFyc2VDYWxsQ29udHJhY3RSZXNwb25zZShyZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdWx0OiByZXNcbiAgICB9O1xuICB9XG4gIHBhcnNlU2ltdWxhdGVUcmFuc2FjdGlvblJlc3BvbnNlKHJlcykge1xuICAgIHJldHVybiByZXMubWFwKChpdCkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uaXQsXG4gICAgICAgIHN1Z2dlc3RlZE1heEZlZTogZXN0aW1hdGVkRmVlVG9NYXhGZWUoQmlnSW50KGl0LmZlZV9lc3RpbWF0aW9uLm92ZXJhbGxfZmVlKSlcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgcGFyc2VDb250cmFjdENsYXNzUmVzcG9uc2UocmVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnJlcyxcbiAgICAgIGFiaTogdHlwZW9mIHJlcy5hYmkgPT09IFwic3RyaW5nXCIgPyBKU09OLnBhcnNlKHJlcy5hYmkpIDogcmVzLmFiaVxuICAgIH07XG4gIH1cbn07XG5cbi8vIHNyYy9wcm92aWRlci9lcnJvcnMudHNcbmZ1bmN0aW9uIGZpeFN0YWNrKHRhcmdldCwgZm4gPSB0YXJnZXQuY29uc3RydWN0b3IpIHtcbiAgY29uc3QgeyBjYXB0dXJlU3RhY2tUcmFjZSB9ID0gRXJyb3I7XG4gIGNhcHR1cmVTdGFja1RyYWNlICYmIGNhcHR1cmVTdGFja1RyYWNlKHRhcmdldCwgZm4pO1xufVxuZnVuY3Rpb24gZml4UHJvdG8odGFyZ2V0LCBwcm90b3R5cGUpIHtcbiAgY29uc3QgeyBzZXRQcm90b3R5cGVPZiB9ID0gT2JqZWN0O1xuICBzZXRQcm90b3R5cGVPZiA/IHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG90eXBlKSA6IHRhcmdldC5fX3Byb3RvX18gPSBwcm90b3R5cGU7XG59XG52YXIgQ3VzdG9tRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgdmFsdWU6IG5ldy50YXJnZXQubmFtZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgZml4UHJvdG8odGhpcywgbmV3LnRhcmdldC5wcm90b3R5cGUpO1xuICAgIGZpeFN0YWNrKHRoaXMpO1xuICB9XG59O1xudmFyIExpYnJhcnlFcnJvciA9IGNsYXNzIGV4dGVuZHMgQ3VzdG9tRXJyb3Ige1xufTtcbnZhciBHYXRld2F5RXJyb3IgPSBjbGFzcyBleHRlbmRzIExpYnJhcnlFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGVycm9yQ29kZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMuZXJyb3JDb2RlID0gZXJyb3JDb2RlO1xuICB9XG59O1xudmFyIEh0dHBFcnJvciA9IGNsYXNzIGV4dGVuZHMgTGlicmFyeUVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgZXJyb3JDb2RlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5lcnJvckNvZGUgPSBlcnJvckNvZGU7XG4gIH1cbn07XG5cbi8vIHNyYy91dGlscy9zdGFya25ldElkLnRzXG52YXIgc3RhcmtuZXRJZF9leHBvcnRzID0ge307XG5fX2V4cG9ydChzdGFya25ldElkX2V4cG9ydHMsIHtcbiAgU3RhcmtuZXRJZENvbnRyYWN0OiAoKSA9PiBTdGFya25ldElkQ29udHJhY3QsXG4gIGdldFN0YXJrbmV0SWRDb250cmFjdDogKCkgPT4gZ2V0U3RhcmtuZXRJZENvbnRyYWN0LFxuICB1c2VEZWNvZGVkOiAoKSA9PiB1c2VEZWNvZGVkLFxuICB1c2VFbmNvZGVkOiAoKSA9PiB1c2VFbmNvZGVkXG59KTtcbnZhciBiYXNpY0FscGhhYmV0ID0gXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODktXCI7XG52YXIgYmFzaWNTaXplUGx1c09uZSA9IEJpZ0ludChiYXNpY0FscGhhYmV0Lmxlbmd0aCArIDEpO1xudmFyIGJpZ0FscGhhYmV0ID0gXCJcXHU4RkQ5XFx1Njc2NVwiO1xudmFyIGJhc2ljQWxwaGFiZXRTaXplID0gQmlnSW50KGJhc2ljQWxwaGFiZXQubGVuZ3RoKTtcbnZhciBiaWdBbHBoYWJldFNpemUgPSBCaWdJbnQoYmlnQWxwaGFiZXQubGVuZ3RoKTtcbnZhciBiaWdBbHBoYWJldFNpemVQbHVzT25lID0gQmlnSW50KGJpZ0FscGhhYmV0Lmxlbmd0aCArIDEpO1xuZnVuY3Rpb24gZXh0cmFjdFN0YXJzKHN0cikge1xuICBsZXQgayA9IDA7XG4gIHdoaWxlIChzdHIuZW5kc1dpdGgoYmlnQWxwaGFiZXRbYmlnQWxwaGFiZXQubGVuZ3RoIC0gMV0pKSB7XG4gICAgc3RyID0gc3RyLnN1YnN0cmluZygwLCBzdHIubGVuZ3RoIC0gMSk7XG4gICAgayArPSAxO1xuICB9XG4gIHJldHVybiBbc3RyLCBrXTtcbn1cbmZ1bmN0aW9uIHVzZURlY29kZWQoZW5jb2RlZCkge1xuICBsZXQgZGVjb2RlZCA9IFwiXCI7XG4gIGVuY29kZWQuZm9yRWFjaCgoc3ViZG9tYWluKSA9PiB7XG4gICAgd2hpbGUgKHN1YmRvbWFpbiAhPT0gWkVSTykge1xuICAgICAgY29uc3QgY29kZSA9IHN1YmRvbWFpbiAlIGJhc2ljU2l6ZVBsdXNPbmU7XG4gICAgICBzdWJkb21haW4gLz0gYmFzaWNTaXplUGx1c09uZTtcbiAgICAgIGlmIChjb2RlID09PSBCaWdJbnQoYmFzaWNBbHBoYWJldC5sZW5ndGgpKSB7XG4gICAgICAgIGNvbnN0IG5leHRTdWJkb21haW4gPSBzdWJkb21haW4gLyBiaWdBbHBoYWJldFNpemVQbHVzT25lO1xuICAgICAgICBpZiAobmV4dFN1YmRvbWFpbiA9PT0gWkVSTykge1xuICAgICAgICAgIGNvbnN0IGNvZGUyID0gc3ViZG9tYWluICUgYmlnQWxwaGFiZXRTaXplUGx1c09uZTtcbiAgICAgICAgICBzdWJkb21haW4gPSBuZXh0U3ViZG9tYWluO1xuICAgICAgICAgIGlmIChjb2RlMiA9PT0gWkVSTylcbiAgICAgICAgICAgIGRlY29kZWQgKz0gYmFzaWNBbHBoYWJldFswXTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWNvZGVkICs9IGJpZ0FscGhhYmV0W051bWJlcihjb2RlMikgLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBjb2RlMiA9IHN1YmRvbWFpbiAlIGJpZ0FscGhhYmV0U2l6ZTtcbiAgICAgICAgICBkZWNvZGVkICs9IGJpZ0FscGhhYmV0W051bWJlcihjb2RlMildO1xuICAgICAgICAgIHN1YmRvbWFpbiAvPSBiaWdBbHBoYWJldFNpemU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZVxuICAgICAgICBkZWNvZGVkICs9IGJhc2ljQWxwaGFiZXRbTnVtYmVyKGNvZGUpXTtcbiAgICB9XG4gICAgY29uc3QgW3N0ciwga10gPSBleHRyYWN0U3RhcnMoZGVjb2RlZCk7XG4gICAgaWYgKGspXG4gICAgICBkZWNvZGVkID0gc3RyICsgKGsgJSAyID09PSAwID8gYmlnQWxwaGFiZXRbYmlnQWxwaGFiZXQubGVuZ3RoIC0gMV0ucmVwZWF0KGsgLyAyIC0gMSkgKyBiaWdBbHBoYWJldFswXSArIGJhc2ljQWxwaGFiZXRbMV0gOiBiaWdBbHBoYWJldFtiaWdBbHBoYWJldC5sZW5ndGggLSAxXS5yZXBlYXQoKGsgLSAxKSAvIDIgKyAxKSk7XG4gICAgZGVjb2RlZCArPSBcIi5cIjtcbiAgfSk7XG4gIGlmICghZGVjb2RlZCkge1xuICAgIHJldHVybiBkZWNvZGVkO1xuICB9XG4gIHJldHVybiBkZWNvZGVkLmNvbmNhdChcInN0YXJrXCIpO1xufVxuZnVuY3Rpb24gdXNlRW5jb2RlZChkZWNvZGVkKSB7XG4gIGxldCBlbmNvZGVkID0gQmlnSW50KDApO1xuICBsZXQgbXVsdGlwbGllciA9IEJpZ0ludCgxKTtcbiAgaWYgKGRlY29kZWQuZW5kc1dpdGgoYmlnQWxwaGFiZXRbMF0gKyBiYXNpY0FscGhhYmV0WzFdKSkge1xuICAgIGNvbnN0IFtzdHIsIGtdID0gZXh0cmFjdFN0YXJzKGRlY29kZWQuc3Vic3RyaW5nKDAsIGRlY29kZWQubGVuZ3RoIC0gMikpO1xuICAgIGRlY29kZWQgPSBzdHIgKyBiaWdBbHBoYWJldFtiaWdBbHBoYWJldC5sZW5ndGggLSAxXS5yZXBlYXQoMiAqIChrICsgMSkpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IFtzdHIsIGtdID0gZXh0cmFjdFN0YXJzKGRlY29kZWQpO1xuICAgIGlmIChrKVxuICAgICAgZGVjb2RlZCA9IHN0ciArIGJpZ0FscGhhYmV0W2JpZ0FscGhhYmV0Lmxlbmd0aCAtIDFdLnJlcGVhdCgxICsgMiAqIChrIC0gMSkpO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGVjb2RlZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGNoYXIgPSBkZWNvZGVkW2ldO1xuICAgIGNvbnN0IGluZGV4ID0gYmFzaWNBbHBoYWJldC5pbmRleE9mKGNoYXIpO1xuICAgIGNvbnN0IGJuSW5kZXggPSBCaWdJbnQoYmFzaWNBbHBoYWJldC5pbmRleE9mKGNoYXIpKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBpZiAoaSA9PT0gZGVjb2RlZC5sZW5ndGggLSAxICYmIGRlY29kZWRbaV0gPT09IGJhc2ljQWxwaGFiZXRbMF0pIHtcbiAgICAgICAgZW5jb2RlZCArPSBtdWx0aXBsaWVyICogYmFzaWNBbHBoYWJldFNpemU7XG4gICAgICAgIG11bHRpcGxpZXIgKj0gYmFzaWNTaXplUGx1c09uZTtcbiAgICAgICAgbXVsdGlwbGllciAqPSBiYXNpY1NpemVQbHVzT25lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5jb2RlZCArPSBtdWx0aXBsaWVyICogYm5JbmRleDtcbiAgICAgICAgbXVsdGlwbGllciAqPSBiYXNpY1NpemVQbHVzT25lO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYmlnQWxwaGFiZXQuaW5kZXhPZihjaGFyKSAhPT0gLTEpIHtcbiAgICAgIGVuY29kZWQgKz0gbXVsdGlwbGllciAqIGJhc2ljQWxwaGFiZXRTaXplO1xuICAgICAgbXVsdGlwbGllciAqPSBiYXNpY1NpemVQbHVzT25lO1xuICAgICAgY29uc3QgbmV3aWQgPSAoaSA9PT0gZGVjb2RlZC5sZW5ndGggLSAxID8gMSA6IDApICsgYmlnQWxwaGFiZXQuaW5kZXhPZihjaGFyKTtcbiAgICAgIGVuY29kZWQgKz0gbXVsdGlwbGllciAqIEJpZ0ludChuZXdpZCk7XG4gICAgICBtdWx0aXBsaWVyICo9IGJpZ0FscGhhYmV0U2l6ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGVuY29kZWQ7XG59XG52YXIgU3RhcmtuZXRJZENvbnRyYWN0ID0gLyogQF9fUFVSRV9fICovICgoU3RhcmtuZXRJZENvbnRyYWN0MikgPT4ge1xuICBTdGFya25ldElkQ29udHJhY3QyW1wiTUFJTk5FVFwiXSA9IFwiMHg2YWM1OTdmODExNmY4ODZmYTFjOTdhMjNmYTRlMDgyOTk5NzVlY2FmNmI1OTg4NzNjYTY3OTJiOWJiZmI2NzhcIjtcbiAgU3RhcmtuZXRJZENvbnRyYWN0MltcIlRFU1RORVRcIl0gPSBcIjB4M2JhYjI2OGU5MzJkMmNlY2QxOTQ2ZjEwMGFlNjdjZTNkZmY5ZmQyMzQxMTllYTJmNmRhNTdkMTZkMjlmY2VcIjtcbiAgcmV0dXJuIFN0YXJrbmV0SWRDb250cmFjdDI7XG59KShTdGFya25ldElkQ29udHJhY3QgfHwge30pO1xuZnVuY3Rpb24gZ2V0U3RhcmtuZXRJZENvbnRyYWN0KGNoYWluSWQpIHtcbiAgc3dpdGNoIChjaGFpbklkKSB7XG4gICAgY2FzZSBcIjB4NTM0ZTVmNGQ0MTQ5NGVcIiAvKiBTTl9NQUlOICovOlxuICAgICAgcmV0dXJuIFwiMHg2YWM1OTdmODExNmY4ODZmYTFjOTdhMjNmYTRlMDgyOTk5NzVlY2FmNmI1OTg4NzNjYTY3OTJiOWJiZmI2NzhcIiAvKiBNQUlOTkVUICovO1xuICAgIGNhc2UgXCIweDUzNGU1ZjQ3NGY0NTUyNGM0OVwiIC8qIFNOX0dPRVJMSSAqLzpcbiAgICAgIHJldHVybiBcIjB4M2JhYjI2OGU5MzJkMmNlY2QxOTQ2ZjEwMGFlNjdjZTNkZmY5ZmQyMzQxMTllYTJmNmRhNTdkMTZkMjlmY2VcIiAvKiBURVNUTkVUICovO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdGFya25ldC5pZCBpcyBub3QgeWV0IGRlcGxveWVkIG9uIHRoaXMgbmV0d29ya1wiKTtcbiAgfVxufVxuXG4vLyBzcmMvcHJvdmlkZXIvc3RhcmtuZXRJZC50c1xuYXN5bmMgZnVuY3Rpb24gZ2V0U3RhcmtOYW1lKHByb3ZpZGVyLCBhZGRyZXNzLCBTdGFya25ldElkQ29udHJhY3QyKSB7XG4gIGNvbnN0IGNoYWluSWQgPSBhd2FpdCBwcm92aWRlci5nZXRDaGFpbklkKCk7XG4gIGNvbnN0IGNvbnRyYWN0ID0gU3RhcmtuZXRJZENvbnRyYWN0MiA/PyBnZXRTdGFya25ldElkQ29udHJhY3QoY2hhaW5JZCk7XG4gIHRyeSB7XG4gICAgY29uc3QgaGV4RG9tYWluID0gYXdhaXQgcHJvdmlkZXIuY2FsbENvbnRyYWN0KHtcbiAgICAgIGNvbnRyYWN0QWRkcmVzczogY29udHJhY3QsXG4gICAgICBlbnRyeXBvaW50OiBcImFkZHJlc3NfdG9fZG9tYWluXCIsXG4gICAgICBjYWxsZGF0YTogQ2FsbERhdGEuY29tcGlsZSh7XG4gICAgICAgIGFkZHJlc3NcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgY29uc3QgZGVjaW1hbERvbWFpbiA9IGhleERvbWFpbi5yZXN1bHQubWFwKChlbGVtZW50KSA9PiBCaWdJbnQoZWxlbWVudCkpLnNsaWNlKDEpO1xuICAgIGNvbnN0IHN0cmluZ0RvbWFpbiA9IHVzZURlY29kZWQoZGVjaW1hbERvbWFpbik7XG4gICAgaWYgKCFzdHJpbmdEb21haW4pIHtcbiAgICAgIHRocm93IEVycm9yKFwiU3RhcmtuYW1lIG5vdCBmb3VuZFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZ0RvbWFpbjtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IgJiYgZS5tZXNzYWdlID09PSBcIlN0YXJrbmFtZSBub3QgZm91bmRcIikge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gICAgdGhyb3cgRXJyb3IoXCJDb3VsZCBub3QgZ2V0IHN0YXJrIG5hbWVcIik7XG4gIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGdldEFkZHJlc3NGcm9tU3RhcmtOYW1lKHByb3ZpZGVyLCBuYW1lLCBTdGFya25ldElkQ29udHJhY3QyKSB7XG4gIGNvbnN0IGNoYWluSWQgPSBhd2FpdCBwcm92aWRlci5nZXRDaGFpbklkKCk7XG4gIGNvbnN0IGNvbnRyYWN0ID0gU3RhcmtuZXRJZENvbnRyYWN0MiA/PyBnZXRTdGFya25ldElkQ29udHJhY3QoY2hhaW5JZCk7XG4gIHRyeSB7XG4gICAgY29uc3QgYWRkcmVzc0RhdGEgPSBhd2FpdCBwcm92aWRlci5jYWxsQ29udHJhY3Qoe1xuICAgICAgY29udHJhY3RBZGRyZXNzOiBjb250cmFjdCxcbiAgICAgIGVudHJ5cG9pbnQ6IFwiZG9tYWluX3RvX2FkZHJlc3NcIixcbiAgICAgIGNhbGxkYXRhOiBDYWxsRGF0YS5jb21waWxlKHtcbiAgICAgICAgZG9tYWluOiBbdXNlRW5jb2RlZChuYW1lLnJlcGxhY2UoXCIuc3RhcmtcIiwgXCJcIikpLnRvU3RyaW5nKDEwKV1cbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIGFkZHJlc3NEYXRhLnJlc3VsdFswXTtcbiAgfSBjYXRjaCB7XG4gICAgdGhyb3cgRXJyb3IoXCJDb3VsZCBub3QgZ2V0IGFkZHJlc3MgZnJvbSBzdGFyayBuYW1lXCIpO1xuICB9XG59XG5cbi8vIHNyYy9wcm92aWRlci91dGlscy50c1xudmFyIHZhbGlkQmxvY2tUYWdzID0gT2JqZWN0LnZhbHVlcyhCbG9ja1RhZyk7XG52YXIgQmxvY2sgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKF9pZGVudGlmaWVyKSB7XG4gICAgdGhpcy5oYXNoID0gbnVsbDtcbiAgICB0aGlzLm51bWJlciA9IG51bGw7XG4gICAgdGhpcy50YWcgPSBudWxsO1xuICAgIHRoaXMudmFsdWVPZiA9ICgpID0+IHRoaXMubnVtYmVyO1xuICAgIHRoaXMudG9TdHJpbmcgPSAoKSA9PiB0aGlzLmhhc2g7XG4gICAgdGhpcy5zZXRJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgfVxuICBzZXRJZGVudGlmaWVyKF9faWRlbnRpZmllcikge1xuICAgIGlmICh0eXBlb2YgX19pZGVudGlmaWVyID09PSBcInN0cmluZ1wiICYmIGlzSGV4KF9faWRlbnRpZmllcikpIHtcbiAgICAgIHRoaXMuaGFzaCA9IF9faWRlbnRpZmllcjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBfX2lkZW50aWZpZXIgPT09IFwiYmlnaW50XCIpIHtcbiAgICAgIHRoaXMuaGFzaCA9IHRvSGV4KF9faWRlbnRpZmllcik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgX19pZGVudGlmaWVyID09PSBcIm51bWJlclwiKSB7XG4gICAgICB0aGlzLm51bWJlciA9IF9faWRlbnRpZmllcjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBfX2lkZW50aWZpZXIgPT09IFwic3RyaW5nXCIgJiYgdmFsaWRCbG9ja1RhZ3MuaW5jbHVkZXMoX19pZGVudGlmaWVyKSkge1xuICAgICAgdGhpcy50YWcgPSBfX2lkZW50aWZpZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGFnID0gXCJwZW5kaW5nXCIgLyogcGVuZGluZyAqLztcbiAgICB9XG4gIH1cbiAgLy8gVE9ETzogZml4IGFueVxuICBnZXQgcXVlcnlJZGVudGlmaWVyKCkge1xuICAgIGlmICh0aGlzLm51bWJlciAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGBibG9ja051bWJlcj0ke3RoaXMubnVtYmVyfWA7XG4gICAgfVxuICAgIGlmICh0aGlzLmhhc2ggIT09IG51bGwpIHtcbiAgICAgIHJldHVybiBgYmxvY2tIYXNoPSR7dGhpcy5oYXNofWA7XG4gICAgfVxuICAgIHJldHVybiBgYmxvY2tOdW1iZXI9JHt0aGlzLnRhZ31gO1xuICB9XG4gIC8vIFRPRE86IGZpeCBhbnlcbiAgZ2V0IGlkZW50aWZpZXIoKSB7XG4gICAgaWYgKHRoaXMubnVtYmVyICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4geyBibG9ja19udW1iZXI6IHRoaXMubnVtYmVyIH07XG4gICAgfVxuICAgIGlmICh0aGlzLmhhc2ggIT09IG51bGwpIHtcbiAgICAgIHJldHVybiB7IGJsb2NrX2hhc2g6IHRoaXMuaGFzaCB9O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50YWc7XG4gIH1cbiAgc2V0IGlkZW50aWZpZXIoX2lkZW50aWZpZXIpIHtcbiAgICB0aGlzLnNldElkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICB9XG4gIGdldCBzZXF1ZW5jZXJJZGVudGlmaWVyKCkge1xuICAgIHJldHVybiB0aGlzLmhhc2ggIT09IG51bGwgPyB7IGJsb2NrSGFzaDogdGhpcy5oYXNoIH0gOiB7IGJsb2NrTnVtYmVyOiB0aGlzLm51bWJlciA/PyB0aGlzLnRhZyB9O1xuICB9XG59O1xuXG4vLyBzcmMvcHJvdmlkZXIvcnBjLnRzXG52YXIgZ2V0RGVmYXVsdE5vZGVVcmwgPSAobmV0d29ya05hbWUsIG11dGUgPSBmYWxzZSwgdmVyc2lvbiA9IFJQQ19ERUZBVUxUX1ZFUlNJT04pID0+IHtcbiAgaWYgKCFtdXRlKVxuICAgIGNvbnNvbGUud2FybihcIlVzaW5nIGRlZmF1bHQgcHVibGljIG5vZGUgdXJsLCBwbGVhc2UgcHJvdmlkZSBub2RlVXJsIGluIHByb3ZpZGVyIG9wdGlvbnMhXCIpO1xuICBjb25zdCBub2RlcyA9IFJQQ19OT0RFU1tuZXR3b3JrTmFtZSA/PyBcIlNOX0dPRVJMSVwiIC8qIFNOX0dPRVJMSSAqL107XG4gIGNvbnN0IHJhbmRJZHggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBub2Rlcy5sZW5ndGgpO1xuICByZXR1cm4gYCR7bm9kZXNbcmFuZElkeF19JHt2ZXJzaW9ufWA7XG59O1xudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gIGJsb2NrSWRlbnRpZmllcjogXCJwZW5kaW5nXCIgLyogcGVuZGluZyAqLyxcbiAgcmV0cmllczogMjAwXG59O1xudmFyIFJwY1Byb3ZpZGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zT3JQcm92aWRlcikge1xuICAgIHRoaXMucmVzcG9uc2VQYXJzZXIgPSBuZXcgUlBDUmVzcG9uc2VQYXJzZXIoKTtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCByZW5hbWVkIHRvIGdldEJsb2NrTGF0ZXN0QWNjZXB0ZWQoKTsgKHdpbGwgYmUgcmVtb3ZlZCBpbiBuZXh0IG1pbm9yIHZlcnNpb24pXG4gICAgICovXG4gICAgdGhpcy5nZXRCbG9ja0hhc2hBbmROdW1iZXIgPSB0aGlzLmdldEJsb2NrTGF0ZXN0QWNjZXB0ZWQ7XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgcmVuYW1lZCB0byBnZXRCbG9ja1N0YXRlVXBkYXRlKCk7XG4gICAgICovXG4gICAgdGhpcy5nZXRTdGF0ZVVwZGF0ZSA9IHRoaXMuZ2V0QmxvY2tTdGF0ZVVwZGF0ZTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBleGVjdXRpb24gdHJhY2VzIG9mIGFsbCB0cmFuc2FjdGlvbnMgaW5jbHVkZWQgaW4gdGhlIGdpdmVuIGJsb2NrXG4gICAgICogQGRlcHJlY2F0ZWQgcmVuYW1lZCB0byBnZXRCbG9ja1RyYW5zYWN0aW9uc1RyYWNlcygpXG4gICAgICovXG4gICAgdGhpcy50cmFjZUJsb2NrVHJhbnNhY3Rpb25zID0gdGhpcy5nZXRCbG9ja1RyYW5zYWN0aW9uc1RyYWNlcztcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG51bWJlciBvZiB0cmFuc2FjdGlvbnMgaW4gYSBibG9jayBnaXZlbiBhIGJsb2NrIGlkXG4gICAgICogQGRlcHJlY2F0ZWQgcmVuYW1lZCB0byBnZXRCbG9ja1RyYW5zYWN0aW9uQ291bnQoKVxuICAgICAqIEByZXR1cm5zIE51bWJlciBvZiB0cmFuc2FjdGlvbnNcbiAgICAgKi9cbiAgICB0aGlzLmdldFRyYW5zYWN0aW9uQ291bnQgPSB0aGlzLmdldEJsb2NrVHJhbnNhY3Rpb25Db3VudDtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCByZW5hbWVkIHRvIGdldFRyYW5zYWN0aW9uVHJhY2UoKTtcbiAgICAgKiBGb3IgYSBnaXZlbiBleGVjdXRlZCB0cmFuc2FjdGlvbiwgcmV0dXJuIHRoZSB0cmFjZSBvZiBpdHMgZXhlY3V0aW9uLCBpbmNsdWRpbmcgaW50ZXJuYWwgY2FsbHNcbiAgICAgKi9cbiAgICB0aGlzLnRyYWNlVHJhbnNhY3Rpb24gPSB0aGlzLmdldFRyYW5zYWN0aW9uVHJhY2U7XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgcmVuYW1lZCB0byBzaW11bGF0ZVRyYW5zYWN0aW9uKCk7XG4gICAgICovXG4gICAgdGhpcy5nZXRTaW11bGF0ZVRyYW5zYWN0aW9uID0gdGhpcy5zaW11bGF0ZVRyYW5zYWN0aW9uO1xuICAgIGNvbnN0IHsgbm9kZVVybCwgcmV0cmllcywgaGVhZGVycywgYmxvY2tJZGVudGlmaWVyLCBjaGFpbklkLCBycGNWZXJzaW9uIH0gPSBvcHRpb25zT3JQcm92aWRlciB8fCB7fTtcbiAgICBpZiAoT2JqZWN0LnZhbHVlcyhOZXR3b3JrTmFtZSkuaW5jbHVkZXMobm9kZVVybCkpIHtcbiAgICAgIHRoaXMubm9kZVVybCA9IGdldERlZmF1bHROb2RlVXJsKFxuICAgICAgICBub2RlVXJsLFxuICAgICAgICBvcHRpb25zT3JQcm92aWRlcj8uZGVmYXVsdCxcbiAgICAgICAgcnBjVmVyc2lvblxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKG5vZGVVcmwpIHtcbiAgICAgIHRoaXMubm9kZVVybCA9IG5vZGVVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubm9kZVVybCA9IGdldERlZmF1bHROb2RlVXJsKHZvaWQgMCwgb3B0aW9uc09yUHJvdmlkZXI/LmRlZmF1bHQsIHJwY1ZlcnNpb24pO1xuICAgIH1cbiAgICB0aGlzLnJldHJpZXMgPSByZXRyaWVzIHx8IGRlZmF1bHRPcHRpb25zLnJldHJpZXM7XG4gICAgdGhpcy5oZWFkZXJzID0geyAuLi5kZWZhdWx0T3B0aW9ucy5oZWFkZXJzLCAuLi5oZWFkZXJzIH07XG4gICAgdGhpcy5ibG9ja0lkZW50aWZpZXIgPSBibG9ja0lkZW50aWZpZXIgfHwgZGVmYXVsdE9wdGlvbnMuYmxvY2tJZGVudGlmaWVyO1xuICAgIHRoaXMuY2hhaW5JZCA9IGNoYWluSWQ7XG4gIH1cbiAgZmV0Y2gobWV0aG9kLCBwYXJhbXMsIGlkID0gMCkge1xuICAgIGNvbnN0IHJwY1JlcXVlc3RCb2R5ID0ge1xuICAgICAgaWQsXG4gICAgICBqc29ucnBjOiBcIjIuMFwiLFxuICAgICAgbWV0aG9kLFxuICAgICAgLi4ucGFyYW1zICYmIHsgcGFyYW1zIH1cbiAgICB9O1xuICAgIHJldHVybiBmZXRjaFBvbnlmaWxsX2RlZmF1bHQodGhpcy5ub2RlVXJsLCB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgYm9keTogc3RyaW5naWZ5MihycGNSZXF1ZXN0Qm9keSksXG4gICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnNcbiAgICB9KTtcbiAgfVxuICBlcnJvckhhbmRsZXIobWV0aG9kLCBwYXJhbXMsIHJwY0Vycm9yLCBvdGhlckVycm9yKSB7XG4gICAgaWYgKHJwY0Vycm9yKSB7XG4gICAgICBjb25zdCB7IGNvZGUsIG1lc3NhZ2UsIGRhdGEgfSA9IHJwY0Vycm9yO1xuICAgICAgdGhyb3cgbmV3IExpYnJhcnlFcnJvcihcbiAgICAgICAgYFJQQzogJHttZXRob2R9IHdpdGggcGFyYW1zICR7c3RyaW5naWZ5MihwYXJhbXMpfVxuICR7Y29kZX06ICR7bWVzc2FnZX06ICR7c3RyaW5naWZ5MihkYXRhKX1gXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAob3RoZXJFcnJvciBpbnN0YW5jZW9mIExpYnJhcnlFcnJvcikge1xuICAgICAgdGhyb3cgb3RoZXJFcnJvcjtcbiAgICB9XG4gICAgaWYgKG90aGVyRXJyb3IpIHtcbiAgICAgIHRocm93IEVycm9yKG90aGVyRXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZldGNoRW5kcG9pbnQobWV0aG9kLCBwYXJhbXMpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmF3UmVzdWx0ID0gYXdhaXQgdGhpcy5mZXRjaChtZXRob2QsIHBhcmFtcyk7XG4gICAgICBjb25zdCB7IGVycm9yLCByZXN1bHQgfSA9IGF3YWl0IHJhd1Jlc3VsdC5qc29uKCk7XG4gICAgICB0aGlzLmVycm9ySGFuZGxlcihtZXRob2QsIHBhcmFtcywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5lcnJvckhhbmRsZXIobWV0aG9kLCBwYXJhbXMsIGVycm9yPy5yZXNwb25zZT8uZGF0YSwgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG4gIGFzeW5jIGdldENoYWluSWQoKSB7XG4gICAgdGhpcy5jaGFpbklkID8/ICh0aGlzLmNoYWluSWQgPSBhd2FpdCB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9jaGFpbklkXCIpKTtcbiAgICByZXR1cm4gdGhpcy5jaGFpbklkO1xuICB9XG4gIC8qKlxuICAgKiBORVc6IFJldHVybnMgdGhlIHZlcnNpb24gb2YgdGhlIFN0YXJrbmV0IEpTT04tUlBDIHNwZWNpZmljYXRpb24gYmVpbmcgdXNlZFxuICAgKi9cbiAgYXN5bmMgZ2V0U3BlY1ZlcnNpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X3NwZWNWZXJzaW9uXCIpO1xuICB9XG4gIGFzeW5jIGdldE5vbmNlRm9yQWRkcmVzcyhjb250cmFjdEFkZHJlc3MsIGJsb2NrSWRlbnRpZmllciA9IHRoaXMuYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgY29uc3QgY29udHJhY3RfYWRkcmVzcyA9IHRvSGV4KGNvbnRyYWN0QWRkcmVzcyk7XG4gICAgY29uc3QgYmxvY2tfaWQgPSBuZXcgQmxvY2soYmxvY2tJZGVudGlmaWVyKS5pZGVudGlmaWVyO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9nZXROb25jZVwiLCB7XG4gICAgICBjb250cmFjdF9hZGRyZXNzLFxuICAgICAgYmxvY2tfaWRcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgdXNlIGdldEJsb2NrV2l0aFR4SGFzaGVzIG9yIGdldEJsb2NrV2l0aFR4cyAod2lsbCBiZSByZW1vdmVkIG9uIHNlcXVlbmNlciBkZXByZWNhdGlvbilcbiAgICovXG4gIGFzeW5jIGdldEJsb2NrKGJsb2NrSWRlbnRpZmllciA9IHRoaXMuYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QmxvY2tXaXRoVHhIYXNoZXMoYmxvY2tJZGVudGlmaWVyKS50aGVuKFxuICAgICAgdGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUdldEJsb2NrUmVzcG9uc2VcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIG1vc3QgcmVjZW50IGFjY2VwdGVkIGJsb2NrIGhhc2ggYW5kIG51bWJlclxuICAgKi9cbiAgYXN5bmMgZ2V0QmxvY2tMYXRlc3RBY2NlcHRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwic3RhcmtuZXRfYmxvY2tIYXNoQW5kTnVtYmVyXCIpO1xuICB9XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCByZWR1bmRhbnQgdXNlIGdldEJsb2NrTGF0ZXN0QWNjZXB0ZWQoKTtcbiAgICogR2V0IHRoZSBtb3N0IHJlY2VudCBhY2NlcHRlZCBibG9jayBudW1iZXJcbiAgICogQHJldHVybnMgTnVtYmVyIG9mIHRoZSBsYXRlc3QgYmxvY2tcbiAgICovXG4gIGFzeW5jIGdldEJsb2NrTnVtYmVyKCkge1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9ibG9ja051bWJlclwiKTtcbiAgfVxuICBhc3luYyBnZXRCbG9ja1dpdGhUeEhhc2hlcyhibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIGNvbnN0IGJsb2NrX2lkID0gbmV3IEJsb2NrKGJsb2NrSWRlbnRpZmllcikuaWRlbnRpZmllcjtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwic3RhcmtuZXRfZ2V0QmxvY2tXaXRoVHhIYXNoZXNcIiwgeyBibG9ja19pZCB9KTtcbiAgfVxuICBhc3luYyBnZXRCbG9ja1dpdGhUeHMoYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICBjb25zdCBibG9ja19pZCA9IG5ldyBCbG9jayhibG9ja0lkZW50aWZpZXIpLmlkZW50aWZpZXI7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2dldEJsb2NrV2l0aFR4c1wiLCB7IGJsb2NrX2lkIH0pO1xuICB9XG4gIGFzeW5jIGdldEJsb2NrU3RhdGVVcGRhdGUoYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICBjb25zdCBibG9ja19pZCA9IG5ldyBCbG9jayhibG9ja0lkZW50aWZpZXIpLmlkZW50aWZpZXI7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2dldFN0YXRlVXBkYXRlXCIsIHsgYmxvY2tfaWQgfSk7XG4gIH1cbiAgYXN5bmMgZ2V0QmxvY2tUcmFuc2FjdGlvbnNUcmFjZXMoYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICBjb25zdCBibG9ja19pZCA9IG5ldyBCbG9jayhibG9ja0lkZW50aWZpZXIpLmlkZW50aWZpZXI7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X3RyYWNlQmxvY2tUcmFuc2FjdGlvbnNcIiwgeyBibG9ja19pZCB9KTtcbiAgfVxuICBhc3luYyBnZXRCbG9ja1RyYW5zYWN0aW9uQ291bnQoYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICBjb25zdCBibG9ja19pZCA9IG5ldyBCbG9jayhibG9ja0lkZW50aWZpZXIpLmlkZW50aWZpZXI7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2dldEJsb2NrVHJhbnNhY3Rpb25Db3VudFwiLCB7IGJsb2NrX2lkIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gdHJhbnNhY3Rpb25zIGZyb20gcGVuZGluZyBibG9ja1xuICAgKiBAZGVwcmVjYXRlZCBJbnN0ZWFkIHVzZSBnZXRCbG9jayhCbG9ja1RhZy5wZW5kaW5nKTsgKHdpbGwgYmUgcmVtb3ZlZCBpbiBuZXh0IG1pbm9yIHZlcnNpb24pXG4gICAqL1xuICBhc3luYyBnZXRQZW5kaW5nVHJhbnNhY3Rpb25zKCkge1xuICAgIGNvbnN0IHsgdHJhbnNhY3Rpb25zIH0gPSBhd2FpdCB0aGlzLmdldEJsb2NrKFwicGVuZGluZ1wiIC8qIHBlbmRpbmcgKi8pO1xuICAgIHJldHVybiBQcm9taXNlLmFsbCh0cmFuc2FjdGlvbnMubWFwKChpdCkgPT4gdGhpcy5nZXRUcmFuc2FjdGlvbkJ5SGFzaChpdCkpKTtcbiAgfVxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgdXNlIGdldFRyYW5zYWN0aW9uQnlIYXNoIG9yIGdldFRyYW5zYWN0aW9uQnlCbG9ja0lkQW5kSW5kZXggKHdpbGwgYmUgcmVtb3ZlZCBvbiBzZXF1ZW5jZXIgZGVwcmVjYXRpb24pXG4gICAqL1xuICBhc3luYyBnZXRUcmFuc2FjdGlvbih0eEhhc2gpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRUcmFuc2FjdGlvbkJ5SGFzaCh0eEhhc2gpLnRoZW4odGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUdldFRyYW5zYWN0aW9uUmVzcG9uc2UpO1xuICB9XG4gIGFzeW5jIGdldFRyYW5zYWN0aW9uQnlIYXNoKHR4SGFzaCkge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uX2hhc2ggPSB0b0hleCh0eEhhc2gpO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9nZXRUcmFuc2FjdGlvbkJ5SGFzaFwiLCB7XG4gICAgICB0cmFuc2FjdGlvbl9oYXNoXG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgZ2V0VHJhbnNhY3Rpb25CeUJsb2NrSWRBbmRJbmRleChibG9ja0lkZW50aWZpZXIsIGluZGV4KSB7XG4gICAgY29uc3QgYmxvY2tfaWQgPSBuZXcgQmxvY2soYmxvY2tJZGVudGlmaWVyKS5pZGVudGlmaWVyO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9nZXRUcmFuc2FjdGlvbkJ5QmxvY2tJZEFuZEluZGV4XCIsIHsgYmxvY2tfaWQsIGluZGV4IH0pO1xuICB9XG4gIGFzeW5jIGdldFRyYW5zYWN0aW9uUmVjZWlwdCh0eEhhc2gpIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbl9oYXNoID0gdG9IZXgodHhIYXNoKTtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwic3RhcmtuZXRfZ2V0VHJhbnNhY3Rpb25SZWNlaXB0XCIsIHsgdHJhbnNhY3Rpb25faGFzaCB9KTtcbiAgfVxuICBhc3luYyBnZXRUcmFuc2FjdGlvblRyYWNlKHR4SGFzaCkge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uX2hhc2ggPSB0b0hleCh0eEhhc2gpO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF90cmFjZVRyYW5zYWN0aW9uXCIsIHsgdHJhbnNhY3Rpb25faGFzaCB9KTtcbiAgfVxuICAvKipcbiAgICogTkVXOiBHZXQgdGhlIHN0YXR1cyBvZiBhIHRyYW5zYWN0aW9uXG4gICAqL1xuICBhc3luYyBnZXRUcmFuc2FjdGlvblN0YXR1cyh0cmFuc2FjdGlvbkhhc2gpIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbl9oYXNoID0gdG9IZXgodHJhbnNhY3Rpb25IYXNoKTtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwic3RhcmtuZXRfZ2V0VHJhbnNhY3Rpb25TdGF0dXNcIiwgeyB0cmFuc2FjdGlvbl9oYXNoIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0gaW52b2NhdGlvbnMgQWNjb3VudEludm9jYXRpb25zXG4gICAqIEBwYXJhbSBzaW11bGF0ZVRyYW5zYWN0aW9uT3B0aW9ucyBibG9ja0lkZW50aWZpZXIgYW5kIGZsYWdzIHRvIHNraXAgdmFsaWRhdGlvbiBhbmQgZmVlIGNoYXJnZTxici8+XG4gICAqIC0gYmxvY2tJZGVudGlmaWVyPGJyLz5cbiAgICogLSBza2lwVmFsaWRhdGUgKGRlZmF1bHQgZmFsc2UpPGJyLz5cbiAgICogLSBza2lwRmVlQ2hhcmdlIChkZWZhdWx0IHRydWUpPGJyLz5cbiAgICovXG4gIGFzeW5jIHNpbXVsYXRlVHJhbnNhY3Rpb24oaW52b2NhdGlvbnMsIHtcbiAgICBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcixcbiAgICBza2lwVmFsaWRhdGUgPSBmYWxzZSxcbiAgICBza2lwRmVlQ2hhcmdlID0gdHJ1ZVxuICB9KSB7XG4gICAgY29uc3QgYmxvY2tfaWQgPSBuZXcgQmxvY2soYmxvY2tJZGVudGlmaWVyKS5pZGVudGlmaWVyO1xuICAgIGNvbnN0IHNpbXVsYXRpb25GbGFncyA9IFtdO1xuICAgIGlmIChza2lwVmFsaWRhdGUpXG4gICAgICBzaW11bGF0aW9uRmxhZ3MucHVzaChycGNfZXhwb3J0cy5FU2ltdWxhdGlvbkZsYWcuU0tJUF9WQUxJREFURSk7XG4gICAgaWYgKHNraXBGZWVDaGFyZ2UpXG4gICAgICBzaW11bGF0aW9uRmxhZ3MucHVzaChycGNfZXhwb3J0cy5FU2ltdWxhdGlvbkZsYWcuU0tJUF9GRUVfQ0hBUkdFKTtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwic3RhcmtuZXRfc2ltdWxhdGVUcmFuc2FjdGlvbnNcIiwge1xuICAgICAgYmxvY2tfaWQsXG4gICAgICB0cmFuc2FjdGlvbnM6IGludm9jYXRpb25zLm1hcCgoaXQpID0+IHRoaXMuYnVpbGRUcmFuc2FjdGlvbihpdCkpLFxuICAgICAgc2ltdWxhdGlvbl9mbGFnczogc2ltdWxhdGlvbkZsYWdzXG4gICAgfSkudGhlbih0aGlzLnJlc3BvbnNlUGFyc2VyLnBhcnNlU2ltdWxhdGVUcmFuc2FjdGlvblJlc3BvbnNlKTtcbiAgfVxuICBhc3luYyB3YWl0Rm9yVHJhbnNhY3Rpb24odHhIYXNoLCBvcHRpb25zKSB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb25IYXNoID0gdG9IZXgodHhIYXNoKTtcbiAgICBsZXQgeyByZXRyaWVzIH0gPSB0aGlzO1xuICAgIGxldCBvbmNoYWluID0gZmFsc2U7XG4gICAgbGV0IGlzRXJyb3JTdGF0ZSA9IGZhbHNlO1xuICAgIGNvbnN0IHJldHJ5SW50ZXJ2YWwgPSBvcHRpb25zPy5yZXRyeUludGVydmFsID8/IDVlMztcbiAgICBjb25zdCBlcnJvclN0YXRlcyA9IG9wdGlvbnM/LmVycm9yU3RhdGVzID8/IFtcbiAgICAgIHJwY19leHBvcnRzLkVUcmFuc2FjdGlvblN0YXR1cy5SRUpFQ1RFRFxuICAgICAgLy8gVE9ETzogY29tbWVudGVkIG91dCB0byBwcmVzZXJ2ZSB0aGUgbG9uZy1zdGFuZGluZyBiZWhhdmlvciBvZiBcInJldmVydGVkXCIgbm90IGJlaW5nIHRyZWF0ZWQgYXMgYW4gZXJyb3IgYnkgZGVmYXVsdFxuICAgICAgLy8gc2hvdWxkIGRlY2lkZSB3aGljaCBiZWhhdmlvciB0byBrZWVwIGluIHRoZSBmdXR1cmVcbiAgICAgIC8vIFJQQy5FVHJhbnNhY3Rpb25FeGVjdXRpb25TdGF0dXMuUkVWRVJURUQsXG4gICAgXTtcbiAgICBjb25zdCBzdWNjZXNzU3RhdGVzID0gb3B0aW9ucz8uc3VjY2Vzc1N0YXRlcyA/PyBbXG4gICAgICBycGNfZXhwb3J0cy5FVHJhbnNhY3Rpb25FeGVjdXRpb25TdGF0dXMuU1VDQ0VFREVELFxuICAgICAgcnBjX2V4cG9ydHMuRVRyYW5zYWN0aW9uU3RhdHVzLkFDQ0VQVEVEX09OX0wyLFxuICAgICAgcnBjX2V4cG9ydHMuRVRyYW5zYWN0aW9uU3RhdHVzLkFDQ0VQVEVEX09OX0wxXG4gICAgXTtcbiAgICBsZXQgdHhTdGF0dXM7XG4gICAgd2hpbGUgKCFvbmNoYWluKSB7XG4gICAgICBhd2FpdCB3YWl0KHJldHJ5SW50ZXJ2YWwpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdHhTdGF0dXMgPSBhd2FpdCB0aGlzLmdldFRyYW5zYWN0aW9uU3RhdHVzKHRyYW5zYWN0aW9uSGFzaCk7XG4gICAgICAgIGNvbnN0IGV4ZWN1dGlvblN0YXR1cyA9IHR4U3RhdHVzLmV4ZWN1dGlvbl9zdGF0dXM7XG4gICAgICAgIGNvbnN0IGZpbmFsaXR5U3RhdHVzID0gdHhTdGF0dXMuZmluYWxpdHlfc3RhdHVzO1xuICAgICAgICBpZiAoIWZpbmFsaXR5U3RhdHVzKSB7XG4gICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXCJ3YWl0aW5nIGZvciB0cmFuc2FjdGlvbiBzdGF0dXNcIik7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yU3RhdGVzLmluY2x1ZGVzKGV4ZWN1dGlvblN0YXR1cykgfHwgZXJyb3JTdGF0ZXMuaW5jbHVkZXMoZmluYWxpdHlTdGF0dXMpKSB7XG4gICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke2V4ZWN1dGlvblN0YXR1c306ICR7ZmluYWxpdHlTdGF0dXN9YDtcbiAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICBlcnJvci5yZXNwb25zZSA9IHR4U3RhdHVzO1xuICAgICAgICAgIGlzRXJyb3JTdGF0ZSA9IHRydWU7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0gZWxzZSBpZiAoc3VjY2Vzc1N0YXRlcy5pbmNsdWRlcyhleGVjdXRpb25TdGF0dXMpIHx8IHN1Y2Nlc3NTdGF0ZXMuaW5jbHVkZXMoZmluYWxpdHlTdGF0dXMpKSB7XG4gICAgICAgICAgb25jaGFpbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIGlzRXJyb3JTdGF0ZSkge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXRyaWVzIDw9IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHdhaXRGb3JUcmFuc2FjdGlvbiB0aW1lZC1vdXQgd2l0aCByZXRyaWVzICR7dGhpcy5yZXRyaWVzfWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXRyaWVzIC09IDE7XG4gICAgfVxuICAgIGxldCB0eFJlY2VpcHQgPSBudWxsO1xuICAgIHdoaWxlICh0eFJlY2VpcHQgPT09IG51bGwpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHR4UmVjZWlwdCA9IGF3YWl0IHRoaXMuZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KHRyYW5zYWN0aW9uSGFzaCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAocmV0cmllcyA8PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB3YWl0Rm9yVHJhbnNhY3Rpb24gdGltZWQtb3V0IHdpdGggcmV0cmllcyAke3RoaXMucmV0cmllc31gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0cmllcyAtPSAxO1xuICAgICAgYXdhaXQgd2FpdChyZXRyeUludGVydmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIHR4UmVjZWlwdDtcbiAgfVxuICBhc3luYyBnZXRTdG9yYWdlQXQoY29udHJhY3RBZGRyZXNzLCBrZXksIGJsb2NrSWRlbnRpZmllciA9IHRoaXMuYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgY29uc3QgY29udHJhY3RfYWRkcmVzcyA9IHRvSGV4KGNvbnRyYWN0QWRkcmVzcyk7XG4gICAgY29uc3QgcGFyc2VkS2V5ID0gdG9TdG9yYWdlS2V5KGtleSk7XG4gICAgY29uc3QgYmxvY2tfaWQgPSBuZXcgQmxvY2soYmxvY2tJZGVudGlmaWVyKS5pZGVudGlmaWVyO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9nZXRTdG9yYWdlQXRcIiwge1xuICAgICAgY29udHJhY3RfYWRkcmVzcyxcbiAgICAgIGtleTogcGFyc2VkS2V5LFxuICAgICAgYmxvY2tfaWRcbiAgICB9KTtcbiAgfVxuICBhc3luYyBnZXRDbGFzc0hhc2hBdChjb250cmFjdEFkZHJlc3MsIGJsb2NrSWRlbnRpZmllciA9IHRoaXMuYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgY29uc3QgY29udHJhY3RfYWRkcmVzcyA9IHRvSGV4KGNvbnRyYWN0QWRkcmVzcyk7XG4gICAgY29uc3QgYmxvY2tfaWQgPSBuZXcgQmxvY2soYmxvY2tJZGVudGlmaWVyKS5pZGVudGlmaWVyO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9nZXRDbGFzc0hhc2hBdFwiLCB7XG4gICAgICBibG9ja19pZCxcbiAgICAgIGNvbnRyYWN0X2FkZHJlc3NcbiAgICB9KTtcbiAgfVxuICBhc3luYyBnZXRDbGFzc0J5SGFzaChjbGFzc0hhc2gpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDbGFzcyhjbGFzc0hhc2gpO1xuICB9XG4gIGFzeW5jIGdldENsYXNzKGNsYXNzSGFzaCwgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICBjb25zdCBjbGFzc19oYXNoID0gdG9IZXgoY2xhc3NIYXNoKTtcbiAgICBjb25zdCBibG9ja19pZCA9IG5ldyBCbG9jayhibG9ja0lkZW50aWZpZXIpLmlkZW50aWZpZXI7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2dldENsYXNzXCIsIHtcbiAgICAgIGNsYXNzX2hhc2gsXG4gICAgICBibG9ja19pZFxuICAgIH0pLnRoZW4odGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUNvbnRyYWN0Q2xhc3NSZXNwb25zZSk7XG4gIH1cbiAgYXN5bmMgZ2V0Q2xhc3NBdChjb250cmFjdEFkZHJlc3MsIGJsb2NrSWRlbnRpZmllciA9IHRoaXMuYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgY29uc3QgY29udHJhY3RfYWRkcmVzcyA9IHRvSGV4KGNvbnRyYWN0QWRkcmVzcyk7XG4gICAgY29uc3QgYmxvY2tfaWQgPSBuZXcgQmxvY2soYmxvY2tJZGVudGlmaWVyKS5pZGVudGlmaWVyO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9nZXRDbGFzc0F0XCIsIHtcbiAgICAgIGJsb2NrX2lkLFxuICAgICAgY29udHJhY3RfYWRkcmVzc1xuICAgIH0pLnRoZW4odGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUNvbnRyYWN0Q2xhc3NSZXNwb25zZSk7XG4gIH1cbiAgYXN5bmMgZ2V0Q29kZShfY29udHJhY3RBZGRyZXNzLCBfYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUlBDIGRvZXMgbm90IGltcGxlbWVudCBnZXRDb2RlIGZ1bmN0aW9uXCIpO1xuICB9XG4gIGFzeW5jIGdldENvbnRyYWN0VmVyc2lvbihjb250cmFjdEFkZHJlc3MsIGNsYXNzSGFzaCwgeyBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllciwgY29tcGlsZXIgPSB0cnVlIH0gPSB7fSkge1xuICAgIGxldCBjb250cmFjdENsYXNzO1xuICAgIGlmIChjb250cmFjdEFkZHJlc3MpIHtcbiAgICAgIGNvbnRyYWN0Q2xhc3MgPSBhd2FpdCB0aGlzLmdldENsYXNzQXQoY29udHJhY3RBZGRyZXNzLCBibG9ja0lkZW50aWZpZXIpO1xuICAgIH0gZWxzZSBpZiAoY2xhc3NIYXNoKSB7XG4gICAgICBjb250cmFjdENsYXNzID0gYXdhaXQgdGhpcy5nZXRDbGFzcyhjbGFzc0hhc2gsIGJsb2NrSWRlbnRpZmllcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IEVycm9yKFwiZ2V0Q29udHJhY3RWZXJzaW9uIHJlcXVpcmUgY29udHJhY3RBZGRyZXNzIG9yIGNsYXNzSGFzaFwiKTtcbiAgICB9XG4gICAgaWYgKGlzU2llcnJhKGNvbnRyYWN0Q2xhc3MpKSB7XG4gICAgICBpZiAoY29tcGlsZXIpIHtcbiAgICAgICAgY29uc3QgYWJpVGVzdCA9IGdldEFiaUNvbnRyYWN0VmVyc2lvbihjb250cmFjdENsYXNzLmFiaSk7XG4gICAgICAgIHJldHVybiB7IGNhaXJvOiBcIjFcIiwgY29tcGlsZXI6IGFiaVRlc3QuY29tcGlsZXIgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGNhaXJvOiBcIjFcIiwgY29tcGlsZXI6IHZvaWQgMCB9O1xuICAgIH1cbiAgICByZXR1cm4geyBjYWlybzogXCIwXCIsIGNvbXBpbGVyOiBcIjBcIiB9O1xuICB9XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgZ2V0KnR5cGUqRXN0aW1hdGVGZWUgKHdpbGwgYmUgcmVmYWN0b3JlZCBiYXNlZCBvbiB0eXBlIGFmdGVyIHNlcXVlbmNlciBkZXByZWNhdGlvbilcbiAgICovXG4gIGFzeW5jIGdldEVzdGltYXRlRmVlKGludm9jYXRpb24sIGludm9jYXRpb25EZXRhaWxzLCBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLmdldEludm9rZUVzdGltYXRlRmVlKGludm9jYXRpb24sIGludm9jYXRpb25EZXRhaWxzLCBibG9ja0lkZW50aWZpZXIpO1xuICB9XG4gIGFzeW5jIGdldEludm9rZUVzdGltYXRlRmVlKGludm9jYXRpb24sIGludm9jYXRpb25EZXRhaWxzLCBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIGNvbnN0IGJsb2NrX2lkID0gbmV3IEJsb2NrKGJsb2NrSWRlbnRpZmllcikuaWRlbnRpZmllcjtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRoaXMuYnVpbGRUcmFuc2FjdGlvbihcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJJTlZPS0VfRlVOQ1RJT05cIiAvKiBJTlZPS0UgKi8sXG4gICAgICAgIC4uLmludm9jYXRpb24sXG4gICAgICAgIC4uLmludm9jYXRpb25EZXRhaWxzXG4gICAgICB9LFxuICAgICAgXCJmZWVcIlxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2VzdGltYXRlRmVlXCIsIHtcbiAgICAgIHJlcXVlc3Q6IFt0cmFuc2FjdGlvbl0sXG4gICAgICBibG9ja19pZFxuICAgIH0pLnRoZW4odGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUZlZUVzdGltYXRlUmVzcG9uc2UpO1xuICB9XG4gIGFzeW5jIGdldERlY2xhcmVFc3RpbWF0ZUZlZShpbnZvY2F0aW9uLCBkZXRhaWxzLCBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIGNvbnN0IGJsb2NrX2lkID0gbmV3IEJsb2NrKGJsb2NrSWRlbnRpZmllcikuaWRlbnRpZmllcjtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRoaXMuYnVpbGRUcmFuc2FjdGlvbihcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJERUNMQVJFXCIgLyogREVDTEFSRSAqLyxcbiAgICAgICAgLi4uaW52b2NhdGlvbixcbiAgICAgICAgLi4uZGV0YWlsc1xuICAgICAgfSxcbiAgICAgIFwiZmVlXCJcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9lc3RpbWF0ZUZlZVwiLCB7XG4gICAgICByZXF1ZXN0OiBbdHJhbnNhY3Rpb25dLFxuICAgICAgYmxvY2tfaWRcbiAgICB9KS50aGVuKHRoaXMucmVzcG9uc2VQYXJzZXIucGFyc2VGZWVFc3RpbWF0ZVJlc3BvbnNlKTtcbiAgfVxuICBhc3luYyBnZXREZXBsb3lBY2NvdW50RXN0aW1hdGVGZWUoaW52b2NhdGlvbiwgZGV0YWlscywgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICBjb25zdCBibG9ja19pZCA9IG5ldyBCbG9jayhibG9ja0lkZW50aWZpZXIpLmlkZW50aWZpZXI7XG4gICAgY29uc3QgdHJhbnNhY3Rpb24gPSB0aGlzLmJ1aWxkVHJhbnNhY3Rpb24oXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwiREVQTE9ZX0FDQ09VTlRcIiAvKiBERVBMT1lfQUNDT1VOVCAqLyxcbiAgICAgICAgLi4uaW52b2NhdGlvbixcbiAgICAgICAgLi4uZGV0YWlsc1xuICAgICAgfSxcbiAgICAgIFwiZmVlXCJcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9lc3RpbWF0ZUZlZVwiLCB7XG4gICAgICByZXF1ZXN0OiBbdHJhbnNhY3Rpb25dLFxuICAgICAgYmxvY2tfaWRcbiAgICB9KS50aGVuKHRoaXMucmVzcG9uc2VQYXJzZXIucGFyc2VGZWVFc3RpbWF0ZVJlc3BvbnNlKTtcbiAgfVxuICBhc3luYyBnZXRFc3RpbWF0ZUZlZUJ1bGsoaW52b2NhdGlvbnMsIHsgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIsIHNraXBWYWxpZGF0ZSA9IGZhbHNlIH0pIHtcbiAgICBpZiAoc2tpcFZhbGlkYXRlKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJnZXRFc3RpbWF0ZUZlZUJ1bGsgUlBDIGRvZXMgbm90IHN1cHBvcnQgc2tpcFZhbGlkYXRlXCIpO1xuICAgIH1cbiAgICBjb25zdCBibG9ja19pZCA9IG5ldyBCbG9jayhibG9ja0lkZW50aWZpZXIpLmlkZW50aWZpZXI7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2VzdGltYXRlRmVlXCIsIHtcbiAgICAgIHJlcXVlc3Q6IGludm9jYXRpb25zLm1hcCgoaXQpID0+IHRoaXMuYnVpbGRUcmFuc2FjdGlvbihpdCwgXCJmZWVcIikpLFxuICAgICAgYmxvY2tfaWRcbiAgICB9KS50aGVuKHRoaXMucmVzcG9uc2VQYXJzZXIucGFyc2VGZWVFc3RpbWF0ZUJ1bGtSZXNwb25zZSk7XG4gIH1cbiAgYXN5bmMgaW52b2tlRnVuY3Rpb24oZnVuY3Rpb25JbnZvY2F0aW9uLCBkZXRhaWxzKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2FkZEludm9rZVRyYW5zYWN0aW9uXCIsIHtcbiAgICAgIGludm9rZV90cmFuc2FjdGlvbjoge1xuICAgICAgICBzZW5kZXJfYWRkcmVzczogZnVuY3Rpb25JbnZvY2F0aW9uLmNvbnRyYWN0QWRkcmVzcyxcbiAgICAgICAgY2FsbGRhdGE6IENhbGxEYXRhLnRvSGV4KGZ1bmN0aW9uSW52b2NhdGlvbi5jYWxsZGF0YSksXG4gICAgICAgIHR5cGU6IHJwY19leHBvcnRzLkVUcmFuc2FjdGlvblR5cGUuSU5WT0tFLFxuICAgICAgICBtYXhfZmVlOiB0b0hleChkZXRhaWxzLm1heEZlZSB8fCAwKSxcbiAgICAgICAgdmVyc2lvbjogXCIweDFcIixcbiAgICAgICAgc2lnbmF0dXJlOiBzaWduYXR1cmVUb0hleEFycmF5KGZ1bmN0aW9uSW52b2NhdGlvbi5zaWduYXR1cmUpLFxuICAgICAgICBub25jZTogdG9IZXgoZGV0YWlscy5ub25jZSlcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBhc3luYyBkZWNsYXJlQ29udHJhY3QoeyBjb250cmFjdCwgc2lnbmF0dXJlLCBzZW5kZXJBZGRyZXNzLCBjb21waWxlZENsYXNzSGFzaCB9LCBkZXRhaWxzKSB7XG4gICAgaWYgKCFpc1NpZXJyYShjb250cmFjdCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9hZGREZWNsYXJlVHJhbnNhY3Rpb25cIiwge1xuICAgICAgICBkZWNsYXJlX3RyYW5zYWN0aW9uOiB7XG4gICAgICAgICAgdHlwZTogcnBjX2V4cG9ydHMuRVRyYW5zYWN0aW9uVHlwZS5ERUNMQVJFLFxuICAgICAgICAgIGNvbnRyYWN0X2NsYXNzOiB7XG4gICAgICAgICAgICBwcm9ncmFtOiBjb250cmFjdC5wcm9ncmFtLFxuICAgICAgICAgICAgZW50cnlfcG9pbnRzX2J5X3R5cGU6IGNvbnRyYWN0LmVudHJ5X3BvaW50c19ieV90eXBlLFxuICAgICAgICAgICAgYWJpOiBjb250cmFjdC5hYmlcbiAgICAgICAgICB9LFxuICAgICAgICAgIHZlcnNpb246IEhFWF9TVFJfVFJBTlNBQ1RJT05fVkVSU0lPTl8xLFxuICAgICAgICAgIG1heF9mZWU6IHRvSGV4KGRldGFpbHMubWF4RmVlIHx8IDApLFxuICAgICAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlVG9IZXhBcnJheShzaWduYXR1cmUpLFxuICAgICAgICAgIHNlbmRlcl9hZGRyZXNzOiBzZW5kZXJBZGRyZXNzLFxuICAgICAgICAgIG5vbmNlOiB0b0hleChkZXRhaWxzLm5vbmNlKVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2FkZERlY2xhcmVUcmFuc2FjdGlvblwiLCB7XG4gICAgICBkZWNsYXJlX3RyYW5zYWN0aW9uOiB7XG4gICAgICAgIHR5cGU6IHJwY19leHBvcnRzLkVUcmFuc2FjdGlvblR5cGUuREVDTEFSRSxcbiAgICAgICAgY29udHJhY3RfY2xhc3M6IHtcbiAgICAgICAgICBzaWVycmFfcHJvZ3JhbTogZGVjb21wcmVzc1Byb2dyYW0oY29udHJhY3Quc2llcnJhX3Byb2dyYW0pLFxuICAgICAgICAgIGNvbnRyYWN0X2NsYXNzX3ZlcnNpb246IGNvbnRyYWN0LmNvbnRyYWN0X2NsYXNzX3ZlcnNpb24sXG4gICAgICAgICAgZW50cnlfcG9pbnRzX2J5X3R5cGU6IGNvbnRyYWN0LmVudHJ5X3BvaW50c19ieV90eXBlLFxuICAgICAgICAgIGFiaTogY29udHJhY3QuYWJpXG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBpbGVkX2NsYXNzX2hhc2g6IGNvbXBpbGVkQ2xhc3NIYXNoIHx8IFwiXCIsXG4gICAgICAgIHZlcnNpb246IEhFWF9TVFJfVFJBTlNBQ1RJT05fVkVSU0lPTl8yLFxuICAgICAgICBtYXhfZmVlOiB0b0hleChkZXRhaWxzLm1heEZlZSB8fCAwKSxcbiAgICAgICAgc2lnbmF0dXJlOiBzaWduYXR1cmVUb0hleEFycmF5KHNpZ25hdHVyZSksXG4gICAgICAgIHNlbmRlcl9hZGRyZXNzOiBzZW5kZXJBZGRyZXNzLFxuICAgICAgICBub25jZTogdG9IZXgoZGV0YWlscy5ub25jZSlcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBhc3luYyBkZXBsb3lBY2NvdW50Q29udHJhY3QoeyBjbGFzc0hhc2gsIGNvbnN0cnVjdG9yQ2FsbGRhdGEsIGFkZHJlc3NTYWx0LCBzaWduYXR1cmUgfSwgZGV0YWlscykge1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9hZGREZXBsb3lBY2NvdW50VHJhbnNhY3Rpb25cIiwge1xuICAgICAgZGVwbG95X2FjY291bnRfdHJhbnNhY3Rpb246IHtcbiAgICAgICAgY29uc3RydWN0b3JfY2FsbGRhdGE6IENhbGxEYXRhLnRvSGV4KGNvbnN0cnVjdG9yQ2FsbGRhdGEgfHwgW10pLFxuICAgICAgICBjbGFzc19oYXNoOiB0b0hleChjbGFzc0hhc2gpLFxuICAgICAgICBjb250cmFjdF9hZGRyZXNzX3NhbHQ6IHRvSGV4KGFkZHJlc3NTYWx0IHx8IDApLFxuICAgICAgICB0eXBlOiBycGNfZXhwb3J0cy5FVHJhbnNhY3Rpb25UeXBlLkRFUExPWV9BQ0NPVU5ULFxuICAgICAgICBtYXhfZmVlOiB0b0hleChkZXRhaWxzLm1heEZlZSB8fCAwKSxcbiAgICAgICAgdmVyc2lvbjogdG9IZXgoZGV0YWlscy52ZXJzaW9uIHx8IDApLFxuICAgICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZVRvSGV4QXJyYXkoc2lnbmF0dXJlKSxcbiAgICAgICAgbm9uY2U6IHRvSGV4KGRldGFpbHMubm9uY2UpXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgY2FsbENvbnRyYWN0KGNhbGwsIGJsb2NrSWRlbnRpZmllciA9IHRoaXMuYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgY29uc3QgYmxvY2tfaWQgPSBuZXcgQmxvY2soYmxvY2tJZGVudGlmaWVyKS5pZGVudGlmaWVyO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2NhbGxcIiwge1xuICAgICAgcmVxdWVzdDoge1xuICAgICAgICBjb250cmFjdF9hZGRyZXNzOiBjYWxsLmNvbnRyYWN0QWRkcmVzcyxcbiAgICAgICAgZW50cnlfcG9pbnRfc2VsZWN0b3I6IGdldFNlbGVjdG9yRnJvbU5hbWUoY2FsbC5lbnRyeXBvaW50KSxcbiAgICAgICAgY2FsbGRhdGE6IENhbGxEYXRhLnRvSGV4KGNhbGwuY2FsbGRhdGEpXG4gICAgICB9LFxuICAgICAgYmxvY2tfaWRcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUNhbGxDb250cmFjdFJlc3BvbnNlKHJlc3VsdCk7XG4gIH1cbiAgLyoqXG4gICAqIE5FVzogRXN0aW1hdGUgdGhlIGZlZSBmb3IgYSBtZXNzYWdlIGZyb20gTDFcbiAgICogQHBhcmFtIG1lc3NhZ2UgTWVzc2FnZSBGcm9tIEwxXG4gICAqL1xuICBhc3luYyBlc3RpbWF0ZU1lc3NhZ2VGZWUobWVzc2FnZSwgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICBjb25zdCB7IGZyb21fYWRkcmVzcywgdG9fYWRkcmVzcywgZW50cnlfcG9pbnRfc2VsZWN0b3IsIHBheWxvYWQgfSA9IG1lc3NhZ2U7XG4gICAgY29uc3QgZm9ybWF0dGVkTWVzc2FnZSA9IHtcbiAgICAgIGZyb21fYWRkcmVzczogdG9IZXgoZnJvbV9hZGRyZXNzKSxcbiAgICAgIHRvX2FkZHJlc3M6IHRvSGV4KHRvX2FkZHJlc3MpLFxuICAgICAgZW50cnlfcG9pbnRfc2VsZWN0b3I6IGdldFNlbGVjdG9yKGVudHJ5X3BvaW50X3NlbGVjdG9yKSxcbiAgICAgIHBheWxvYWQ6IGdldEhleFN0cmluZ0FycmF5KHBheWxvYWQpXG4gICAgfTtcbiAgICBjb25zdCBibG9ja19pZCA9IG5ldyBCbG9jayhibG9ja0lkZW50aWZpZXIpLmlkZW50aWZpZXI7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2VzdGltYXRlTWVzc2FnZUZlZVwiLCB7XG4gICAgICBtZXNzYWdlOiBmb3JtYXR0ZWRNZXNzYWdlLFxuICAgICAgYmxvY2tfaWRcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3QgYWJvdXQgdGhlIHN5bmMgc3RhdHVzLCBvciBmYWxzZSBpZiB0aGUgbm9kZSBpcyBub3Qgc3luY2hpbmdcbiAgICogQHJldHVybnMgT2JqZWN0IHdpdGggdGhlIHN0YXRzIGRhdGFcbiAgICovXG4gIGFzeW5jIGdldFN5bmNpbmdTdGF0cygpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwic3RhcmtuZXRfc3luY2luZ1wiKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbGwgZXZlbnRzIG1hdGNoaW5nIHRoZSBnaXZlbiBmaWx0ZXJcbiAgICogQHJldHVybnMgZXZlbnRzIGFuZCB0aGUgcGFnaW5hdGlvbiBvZiB0aGUgZXZlbnRzXG4gICAqL1xuICBhc3luYyBnZXRFdmVudHMoZXZlbnRGaWx0ZXIpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwic3RhcmtuZXRfZ2V0RXZlbnRzXCIsIHsgZmlsdGVyOiBldmVudEZpbHRlciB9KTtcbiAgfVxuICAvKipcbiAgICogU3RhcmtuZXRJZCBFbmRwb2ludCAoZ2V0IG5hbWUgZnJvbSBhZGRyZXNzKVxuICAgKi9cbiAgYXN5bmMgZ2V0U3RhcmtOYW1lKGFkZHJlc3MsIFN0YXJrbmV0SWRDb250cmFjdDIpIHtcbiAgICByZXR1cm4gZ2V0U3RhcmtOYW1lKHRoaXMsIGFkZHJlc3MsIFN0YXJrbmV0SWRDb250cmFjdDIpO1xuICB9XG4gIC8qKlxuICAgKiBTdGFya25ldElkIEVuZHBvaW50IChnZXQgYWRkcmVzcyBmcm9tIG5hbWUpXG4gICAqL1xuICBhc3luYyBnZXRBZGRyZXNzRnJvbVN0YXJrTmFtZShuYW1lLCBTdGFya25ldElkQ29udHJhY3QyKSB7XG4gICAgcmV0dXJuIGdldEFkZHJlc3NGcm9tU3RhcmtOYW1lKHRoaXMsIG5hbWUsIFN0YXJrbmV0SWRDb250cmFjdDIpO1xuICB9XG4gIGJ1aWxkVHJhbnNhY3Rpb24oaW52b2NhdGlvbiwgdmVyc2lvblR5cGUpIHtcbiAgICBjb25zdCBkZWZhdWx0VmVyc2lvbnMgPSBnZXRWZXJzaW9uc0J5VHlwZSh2ZXJzaW9uVHlwZSk7XG4gICAgY29uc3QgZGV0YWlscyA9IHtcbiAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlVG9IZXhBcnJheShpbnZvY2F0aW9uLnNpZ25hdHVyZSksXG4gICAgICBub25jZTogdG9IZXgoaW52b2NhdGlvbi5ub25jZSksXG4gICAgICBtYXhfZmVlOiB0b0hleChpbnZvY2F0aW9uLm1heEZlZSB8fCAwKVxuICAgIH07XG4gICAgaWYgKGludm9jYXRpb24udHlwZSA9PT0gXCJJTlZPS0VfRlVOQ1RJT05cIiAvKiBJTlZPS0UgKi8pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHJwY19leHBvcnRzLkVUcmFuc2FjdGlvblR5cGUuSU5WT0tFLFxuICAgICAgICAvLyBEaWZmIGJldHdlZW4gc2VxdWVuY2VyIGFuZCBycGMgaW52b2tlIHR5cGVcbiAgICAgICAgc2VuZGVyX2FkZHJlc3M6IGludm9jYXRpb24uY29udHJhY3RBZGRyZXNzLFxuICAgICAgICBjYWxsZGF0YTogQ2FsbERhdGEudG9IZXgoaW52b2NhdGlvbi5jYWxsZGF0YSksXG4gICAgICAgIHZlcnNpb246IHRvSGV4KGludm9jYXRpb24udmVyc2lvbiB8fCBkZWZhdWx0VmVyc2lvbnMudjEpLFxuICAgICAgICAuLi5kZXRhaWxzXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoaW52b2NhdGlvbi50eXBlID09PSBcIkRFQ0xBUkVcIiAvKiBERUNMQVJFICovKSB7XG4gICAgICBpZiAoIWlzU2llcnJhKGludm9jYXRpb24uY29udHJhY3QpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogaW52b2NhdGlvbi50eXBlLFxuICAgICAgICAgIGNvbnRyYWN0X2NsYXNzOiBpbnZvY2F0aW9uLmNvbnRyYWN0LFxuICAgICAgICAgIHNlbmRlcl9hZGRyZXNzOiBpbnZvY2F0aW9uLnNlbmRlckFkZHJlc3MsXG4gICAgICAgICAgdmVyc2lvbjogdG9IZXgoaW52b2NhdGlvbi52ZXJzaW9uIHx8IGRlZmF1bHRWZXJzaW9ucy52MSksXG4gICAgICAgICAgLi4uZGV0YWlsc1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLy8gY29tcGlsZWRfY2xhc3NfaGFzaFxuICAgICAgICB0eXBlOiBpbnZvY2F0aW9uLnR5cGUsXG4gICAgICAgIGNvbnRyYWN0X2NsYXNzOiB7XG4gICAgICAgICAgLi4uaW52b2NhdGlvbi5jb250cmFjdCxcbiAgICAgICAgICBzaWVycmFfcHJvZ3JhbTogZGVjb21wcmVzc1Byb2dyYW0oaW52b2NhdGlvbi5jb250cmFjdC5zaWVycmFfcHJvZ3JhbSlcbiAgICAgICAgfSxcbiAgICAgICAgY29tcGlsZWRfY2xhc3NfaGFzaDogaW52b2NhdGlvbi5jb21waWxlZENsYXNzSGFzaCB8fCBcIlwiLFxuICAgICAgICBzZW5kZXJfYWRkcmVzczogaW52b2NhdGlvbi5zZW5kZXJBZGRyZXNzLFxuICAgICAgICB2ZXJzaW9uOiB0b0hleChpbnZvY2F0aW9uLnZlcnNpb24gfHwgZGVmYXVsdFZlcnNpb25zLnYyKSxcbiAgICAgICAgLi4uZGV0YWlsc1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGludm9jYXRpb24udHlwZSA9PT0gXCJERVBMT1lfQUNDT1VOVFwiIC8qIERFUExPWV9BQ0NPVU5UICovKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBpbnZvY2F0aW9uLnR5cGUsXG4gICAgICAgIGNvbnN0cnVjdG9yX2NhbGxkYXRhOiBDYWxsRGF0YS50b0hleChpbnZvY2F0aW9uLmNvbnN0cnVjdG9yQ2FsbGRhdGEgfHwgW10pLFxuICAgICAgICBjbGFzc19oYXNoOiB0b0hleChpbnZvY2F0aW9uLmNsYXNzSGFzaCksXG4gICAgICAgIGNvbnRyYWN0X2FkZHJlc3Nfc2FsdDogdG9IZXgoaW52b2NhdGlvbi5hZGRyZXNzU2FsdCB8fCAwKSxcbiAgICAgICAgdmVyc2lvbjogdG9IZXgoaW52b2NhdGlvbi52ZXJzaW9uIHx8IGRlZmF1bHRWZXJzaW9ucy52MSksXG4gICAgICAgIC4uLmRldGFpbHNcbiAgICAgIH07XG4gICAgfVxuICAgIHRocm93IEVycm9yKFwiUlBDIGJ1aWxkVHJhbnNhY3Rpb24gcmVjZWl2ZWQgdW5rbm93biBUcmFuc2FjdGlvblR5cGVcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9wcm92aWRlci9zZXF1ZW5jZXIudHNcbmltcG9ydCB1cmxqb2luMiBmcm9tIFwidXJsLWpvaW5cIjtcblxuLy8gc3JjL3V0aWxzL3Jlc3BvbnNlUGFyc2VyL2luZGV4LnRzXG52YXIgUmVzcG9uc2VQYXJzZXIgPSBjbGFzcyB7XG59O1xuXG4vLyBzcmMvdXRpbHMvcmVzcG9uc2VQYXJzZXIvc2VxdWVuY2VyLnRzXG52YXIgU2VxdWVuY2VyQVBJUmVzcG9uc2VQYXJzZXIgPSBjbGFzcyBleHRlbmRzIFJlc3BvbnNlUGFyc2VyIHtcbiAgcGFyc2VHZXRCbG9ja1Jlc3BvbnNlKHJlcykge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5yZXMsXG4gICAgICBuZXdfcm9vdDogcmVzLnN0YXRlX3Jvb3QsXG4gICAgICBwYXJlbnRfaGFzaDogcmVzLnBhcmVudF9ibG9ja19oYXNoLFxuICAgICAgdHJhbnNhY3Rpb25zOiBPYmplY3QudmFsdWVzKHJlcy50cmFuc2FjdGlvbnMpLm1hcCgodmFsdWUpID0+IFwidHJhbnNhY3Rpb25faGFzaFwiIGluIHZhbHVlICYmIHZhbHVlLnRyYW5zYWN0aW9uX2hhc2gpLmZpbHRlcihCb29sZWFuKVxuICAgIH07XG4gIH1cbiAgcGFyc2VHZXRUcmFuc2FjdGlvblJlc3BvbnNlKHJlcykge1xuICAgIGlmIChyZXMuc3RhdHVzID09PSBcIk5PVF9SRUNFSVZFRFwiIC8qIE5PVF9SRUNFSVZFRCAqLyAmJiByZXMuZmluYWxpdHlfc3RhdHVzID09PSBcIk5PVF9SRUNFSVZFRFwiIC8qIE5PVF9SRUNFSVZFRCAqLykge1xuICAgICAgdGhyb3cgbmV3IExpYnJhcnlFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgLi4ucmVzLFxuICAgICAgY2FsbGRhdGE6IFwiY2FsbGRhdGFcIiBpbiByZXMudHJhbnNhY3Rpb24gPyByZXMudHJhbnNhY3Rpb24uY2FsbGRhdGEgOiBbXSxcbiAgICAgIGNvbnRyYWN0X2NsYXNzOiBcImNvbnRyYWN0X2NsYXNzXCIgaW4gcmVzLnRyYW5zYWN0aW9uID8gcmVzLnRyYW5zYWN0aW9uLmNvbnRyYWN0X2NsYXNzIDogdm9pZCAwLFxuICAgICAgZW50cnlfcG9pbnRfc2VsZWN0b3I6IFwiZW50cnlfcG9pbnRfc2VsZWN0b3JcIiBpbiByZXMudHJhbnNhY3Rpb24gPyByZXMudHJhbnNhY3Rpb24uZW50cnlfcG9pbnRfc2VsZWN0b3IgOiB2b2lkIDAsXG4gICAgICBtYXhfZmVlOiBcIm1heF9mZWVcIiBpbiByZXMudHJhbnNhY3Rpb24gPyByZXMudHJhbnNhY3Rpb24ubWF4X2ZlZSA6IHZvaWQgMCxcbiAgICAgIG5vbmNlOiByZXMudHJhbnNhY3Rpb24ubm9uY2UsXG4gICAgICBzZW5kZXJfYWRkcmVzczogXCJzZW5kZXJfYWRkcmVzc1wiIGluIHJlcy50cmFuc2FjdGlvbiA/IHJlcy50cmFuc2FjdGlvbi5zZW5kZXJfYWRkcmVzcyA6IHZvaWQgMCxcbiAgICAgIHNpZ25hdHVyZTogXCJzaWduYXR1cmVcIiBpbiByZXMudHJhbnNhY3Rpb24gPyByZXMudHJhbnNhY3Rpb24uc2lnbmF0dXJlIDogdm9pZCAwLFxuICAgICAgdHJhbnNhY3Rpb25faGFzaDogXCJ0cmFuc2FjdGlvbl9oYXNoXCIgaW4gcmVzLnRyYW5zYWN0aW9uID8gcmVzLnRyYW5zYWN0aW9uLnRyYW5zYWN0aW9uX2hhc2ggOiB2b2lkIDAsXG4gICAgICB2ZXJzaW9uOiBcInZlcnNpb25cIiBpbiByZXMudHJhbnNhY3Rpb24gPyByZXMudHJhbnNhY3Rpb24udmVyc2lvbiA6IHZvaWQgMFxuICAgIH07XG4gIH1cbiAgcGFyc2VHZXRUcmFuc2FjdGlvblJlY2VpcHRSZXNwb25zZShyZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ucmVzLFxuICAgICAgbWVzc2FnZXNfc2VudDogcmVzLmwyX3RvX2wxX21lc3NhZ2VzLFxuICAgICAgLi4uXCJyZXZlcnRfZXJyb3JcIiBpbiByZXMgJiYgeyByZXZlcnRfcmVhc29uOiByZXMucmV2ZXJ0X2Vycm9yIH1cbiAgICB9O1xuICB9XG4gIHBhcnNlRmVlRXN0aW1hdGVSZXNwb25zZShyZXMpIHtcbiAgICBpZiAoXCJvdmVyYWxsX2ZlZVwiIGluIHJlcykge1xuICAgICAgbGV0IGdhc0luZm8gPSB7fTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGdhc0luZm8gPSB7XG4gICAgICAgICAgZ2FzX2NvbnN1bWVkOiB0b0JpZ0ludChyZXMuZ2FzX3VzYWdlKSxcbiAgICAgICAgICBnYXNfcHJpY2U6IHRvQmlnSW50KHJlcy5nYXNfcHJpY2UpXG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIHtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG92ZXJhbGxfZmVlOiB0b0JpZ0ludChyZXMub3ZlcmFsbF9mZWUpLFxuICAgICAgICAuLi5nYXNJbmZvXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgb3ZlcmFsbF9mZWU6IHRvQmlnSW50KHJlcy5hbW91bnQpXG4gICAgfTtcbiAgfVxuICBwYXJzZUZlZUVzdGltYXRlQnVsa1Jlc3BvbnNlKHJlcykge1xuICAgIHJldHVybiBbXS5jb25jYXQocmVzKS5tYXAoKGl0ZW0pID0+IHtcbiAgICAgIGlmIChcIm92ZXJhbGxfZmVlXCIgaW4gaXRlbSkge1xuICAgICAgICBsZXQgZ2FzSW5mbyA9IHt9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGdhc0luZm8gPSB7XG4gICAgICAgICAgICBnYXNfY29uc3VtZWQ6IHRvQmlnSW50KGl0ZW0uZ2FzX3VzYWdlKSxcbiAgICAgICAgICAgIGdhc19wcmljZTogdG9CaWdJbnQoaXRlbS5nYXNfcHJpY2UpXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBvdmVyYWxsX2ZlZTogdG9CaWdJbnQoaXRlbS5vdmVyYWxsX2ZlZSksXG4gICAgICAgICAgLi4uZ2FzSW5mb1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3ZlcmFsbF9mZWU6IHRvQmlnSW50KGl0ZW0uYW1vdW50KVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICBwYXJzZVNpbXVsYXRlVHJhbnNhY3Rpb25SZXNwb25zZShyZXMpIHtcbiAgICBjb25zdCBzdWdnZXN0ZWRNYXhGZWUgPSBcIm92ZXJhbGxfZmVlXCIgaW4gcmVzLmZlZV9lc3RpbWF0aW9uID8gcmVzLmZlZV9lc3RpbWF0aW9uLm92ZXJhbGxfZmVlIDogcmVzLmZlZV9lc3RpbWF0aW9uLmFtb3VudDtcbiAgICByZXR1cm4gW1xuICAgICAge1xuICAgICAgICB0cmFuc2FjdGlvbl90cmFjZTogcmVzLnRyYWNlLFxuICAgICAgICBmZWVfZXN0aW1hdGlvbjogcmVzLmZlZV9lc3RpbWF0aW9uLFxuICAgICAgICBzdWdnZXN0ZWRNYXhGZWU6IGVzdGltYXRlZEZlZVRvTWF4RmVlKEJpZ0ludChzdWdnZXN0ZWRNYXhGZWUpKVxuICAgICAgfVxuICAgIF07XG4gIH1cbiAgcGFyc2VDYWxsQ29udHJhY3RSZXNwb25zZShyZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdWx0OiByZXMucmVzdWx0XG4gICAgfTtcbiAgfVxuICBwYXJzZUludm9rZUZ1bmN0aW9uUmVzcG9uc2UocmVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zYWN0aW9uX2hhc2g6IHJlcy50cmFuc2FjdGlvbl9oYXNoXG4gICAgfTtcbiAgfVxuICBwYXJzZURlcGxveUNvbnRyYWN0UmVzcG9uc2UocmVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zYWN0aW9uX2hhc2g6IHJlcy50cmFuc2FjdGlvbl9oYXNoLFxuICAgICAgY29udHJhY3RfYWRkcmVzczogcmVzLmFkZHJlc3NcbiAgICB9O1xuICB9XG4gIHBhcnNlRGVjbGFyZUNvbnRyYWN0UmVzcG9uc2UocmVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zYWN0aW9uX2hhc2g6IHJlcy50cmFuc2FjdGlvbl9oYXNoLFxuICAgICAgY2xhc3NfaGFzaDogcmVzLmNsYXNzX2hhc2hcbiAgICB9O1xuICB9XG4gIHBhcnNlR2V0U3RhdGVVcGRhdGVSZXNwb25zZShyZXMpIHtcbiAgICBjb25zdCBub25jZXMgPSBPYmplY3QuZW50cmllcyhyZXMuc3RhdGVfZGlmZi5ub25jZXMpLm1hcCgoW2NvbnRyYWN0X2FkZHJlc3MsIG5vbmNlXSkgPT4gKHtcbiAgICAgIGNvbnRyYWN0X2FkZHJlc3MsXG4gICAgICBub25jZVxuICAgIH0pKTtcbiAgICBjb25zdCBzdG9yYWdlX2RpZmZzID0gT2JqZWN0LmVudHJpZXMocmVzLnN0YXRlX2RpZmYuc3RvcmFnZV9kaWZmcykubWFwKFxuICAgICAgKFthZGRyZXNzLCBzdG9yYWdlX2VudHJpZXNdKSA9PiAoeyBhZGRyZXNzLCBzdG9yYWdlX2VudHJpZXMgfSlcbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5yZXMsXG4gICAgICBzdGF0ZV9kaWZmOiB7XG4gICAgICAgIC4uLnJlcy5zdGF0ZV9kaWZmLFxuICAgICAgICBzdG9yYWdlX2RpZmZzLFxuICAgICAgICBub25jZXNcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHBhcnNlQ29udHJhY3RDbGFzc1Jlc3BvbnNlKHJlcykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gaXNTaWVycmEocmVzKSA/IHJlcyA6IHBhcnNlQ29udHJhY3QocmVzKTtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ucmVzcG9uc2UsXG4gICAgICBhYmk6IHR5cGVvZiByZXNwb25zZS5hYmkgPT09IFwic3RyaW5nXCIgPyBKU09OLnBhcnNlKHJlc3BvbnNlLmFiaSkgOiByZXNwb25zZS5hYmlcbiAgICB9O1xuICB9XG59O1xuXG4vLyBzcmMvdXRpbHMvdXJsLnRzXG5pbXBvcnQgdXJsam9pbiBmcm9tIFwidXJsLWpvaW5cIjtcbnZhciBwcm90b2NvbEFuZERvbWFpblJFID0gL14oPzpcXHcrOik/XFwvXFwvKFxcUyspJC87XG52YXIgbG9jYWxob3N0RG9tYWluUkUgPSAvXmxvY2FsaG9zdFs6P1xcZF0qKD86W146P1xcZF1cXFMqKT8kLztcbnZhciBub25Mb2NhbGhvc3REb21haW5SRSA9IC9eW15cXHMuXStcXC5cXFN7Mix9JC87XG5mdW5jdGlvbiBpc1VybChzKSB7XG4gIGlmICghcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIHMgIT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgbWF0Y2ggPSBzLm1hdGNoKHByb3RvY29sQW5kRG9tYWluUkUpO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGV2ZXJ5dGhpbmdBZnRlclByb3RvY29sID0gbWF0Y2hbMV07XG4gIGlmICghZXZlcnl0aGluZ0FmdGVyUHJvdG9jb2wpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGxvY2FsaG9zdERvbWFpblJFLnRlc3QoZXZlcnl0aGluZ0FmdGVyUHJvdG9jb2wpIHx8IG5vbkxvY2FsaG9zdERvbWFpblJFLnRlc3QoZXZlcnl0aGluZ0FmdGVyUHJvdG9jb2wpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gYnVpbGRVcmwoYmFzZVVybCwgZGVmYXVsdFBhdGgsIHVybE9yUGF0aCkge1xuICByZXR1cm4gaXNVcmwodXJsT3JQYXRoKSA/IHVybE9yUGF0aCA6IHVybGpvaW4oYmFzZVVybCwgdXJsT3JQYXRoID8/IGRlZmF1bHRQYXRoKTtcbn1cblxuLy8gc3JjL3Byb3ZpZGVyL3NlcXVlbmNlci50c1xuZnVuY3Rpb24gaXNFbXB0eVF1ZXJ5T2JqZWN0KG9iaikge1xuICByZXR1cm4gb2JqID09PSB2b2lkIDAgfHwgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDAgfHwgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDEgJiYgT2JqZWN0LmVudHJpZXMob2JqKS5ldmVyeSgoW2ssIHZdKSA9PiBrID09PSBcImJsb2NrSWRlbnRpZmllclwiICYmIHYgPT09IG51bGwpO1xufVxudmFyIGRlZmF1bHRPcHRpb25zMiA9IHtcbiAgbmV0d29yazogXCJTTl9HT0VSTElcIiAvKiBTTl9HT0VSTEkgKi8sXG4gIGJsb2NrSWRlbnRpZmllcjogXCJwZW5kaW5nXCIgLyogcGVuZGluZyAqL1xufTtcbnZhciBTZXF1ZW5jZXJQcm92aWRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3Iob3B0aW9uc09yUHJvdmlkZXIgPSBkZWZhdWx0T3B0aW9uczIpIHtcbiAgICB0aGlzLnJlc3BvbnNlUGFyc2VyID0gbmV3IFNlcXVlbmNlckFQSVJlc3BvbnNlUGFyc2VyKCk7XG4gICAgaWYgKFwibmV0d29ya1wiIGluIG9wdGlvbnNPclByb3ZpZGVyKSB7XG4gICAgICB0aGlzLmJhc2VVcmwgPSBTZXF1ZW5jZXJQcm92aWRlci5nZXROZXR3b3JrRnJvbU5hbWUob3B0aW9uc09yUHJvdmlkZXIubmV0d29yayk7XG4gICAgICB0aGlzLmZlZWRlckdhdGV3YXlVcmwgPSBidWlsZFVybCh0aGlzLmJhc2VVcmwsIFwiZmVlZGVyX2dhdGV3YXlcIik7XG4gICAgICB0aGlzLmdhdGV3YXlVcmwgPSBidWlsZFVybCh0aGlzLmJhc2VVcmwsIFwiZ2F0ZXdheVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5iYXNlVXJsID0gb3B0aW9uc09yUHJvdmlkZXIuYmFzZVVybDtcbiAgICAgIHRoaXMuZmVlZGVyR2F0ZXdheVVybCA9IGJ1aWxkVXJsKFxuICAgICAgICB0aGlzLmJhc2VVcmwsXG4gICAgICAgIFwiZmVlZGVyX2dhdGV3YXlcIixcbiAgICAgICAgb3B0aW9uc09yUHJvdmlkZXIuZmVlZGVyR2F0ZXdheVVybFxuICAgICAgKTtcbiAgICAgIHRoaXMuZ2F0ZXdheVVybCA9IGJ1aWxkVXJsKHRoaXMuYmFzZVVybCwgXCJnYXRld2F5XCIsIG9wdGlvbnNPclByb3ZpZGVyLmdhdGV3YXlVcmwpO1xuICAgIH1cbiAgICB0aGlzLmNoYWluSWQgPSBvcHRpb25zT3JQcm92aWRlcj8uY2hhaW5JZCA/PyBTZXF1ZW5jZXJQcm92aWRlci5nZXRDaGFpbklkRnJvbUJhc2VVcmwodGhpcy5iYXNlVXJsKTtcbiAgICB0aGlzLmhlYWRlcnMgPSBvcHRpb25zT3JQcm92aWRlci5oZWFkZXJzO1xuICAgIHRoaXMuYmxvY2tJZGVudGlmaWVyID0gb3B0aW9uc09yUHJvdmlkZXI/LmJsb2NrSWRlbnRpZmllciB8fCBkZWZhdWx0T3B0aW9uczIuYmxvY2tJZGVudGlmaWVyO1xuICB9XG4gIHN0YXRpYyBnZXROZXR3b3JrRnJvbU5hbWUobmFtZSkge1xuICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgY2FzZSBcIlNOX01BSU5cIiAvKiBTTl9NQUlOICovOlxuICAgICAgY2FzZSBcIjB4NTM0ZTVmNGQ0MTQ5NGVcIiAvKiBTTl9NQUlOICovOlxuICAgICAgICByZXR1cm4gXCJodHRwczovL2FscGhhLW1haW5uZXQuc3RhcmtuZXQuaW9cIiAvKiBTTl9NQUlOICovO1xuICAgICAgY2FzZSBcIlNOX0dPRVJMSVwiIC8qIFNOX0dPRVJMSSAqLzpcbiAgICAgIGNhc2UgXCIweDUzNGU1ZjQ3NGY0NTUyNGM0OVwiIC8qIFNOX0dPRVJMSSAqLzpcbiAgICAgICAgcmV0dXJuIFwiaHR0cHM6Ly9hbHBoYTQuc3RhcmtuZXQuaW9cIiAvKiBTTl9HT0VSTEkgKi87XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZGV0ZWN0IGJhc2UgdXJsIGZyb20gTmV0d29ya05hbWVcIik7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBnZXRDaGFpbklkRnJvbUJhc2VVcmwoYmFzZVVybCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGJhc2VVcmwpO1xuICAgICAgaWYgKHVybC5ob3N0LmluY2x1ZGVzKFwibWFpbm5ldC5zdGFya25ldC5pb1wiKSkge1xuICAgICAgICByZXR1cm4gXCIweDUzNGU1ZjRkNDE0OTRlXCIgLyogU05fTUFJTiAqLztcbiAgICAgIH1cbiAgICAgIHJldHVybiBcIjB4NTM0ZTVmNDc0ZjQ1NTI0YzQ5XCIgLyogU05fR09FUkxJICovO1xuICAgIH0gY2F0Y2gge1xuICAgICAgY29uc29sZS5lcnJvcihgQ291bGQgbm90IHBhcnNlIGJhc2VVcmw6ICR7YmFzZVVybH1gKTtcbiAgICAgIHJldHVybiBcIjB4NTM0ZTVmNDc0ZjQ1NTI0YzQ5XCIgLyogU05fR09FUkxJICovO1xuICAgIH1cbiAgfVxuICBnZXRGZXRjaFVybChlbmRwb2ludCkge1xuICAgIGNvbnN0IGdhdGV3YXlVcmxFbmRwb2ludHMgPSBbXCJhZGRfdHJhbnNhY3Rpb25cIl07XG4gICAgcmV0dXJuIGdhdGV3YXlVcmxFbmRwb2ludHMuaW5jbHVkZXMoZW5kcG9pbnQpID8gdGhpcy5nYXRld2F5VXJsIDogdGhpcy5mZWVkZXJHYXRld2F5VXJsO1xuICB9XG4gIGdldEZldGNoTWV0aG9kKGVuZHBvaW50KSB7XG4gICAgY29uc3QgcG9zdE1ldGhvZEVuZHBvaW50cyA9IFtcbiAgICAgIFwiYWRkX3RyYW5zYWN0aW9uXCIsXG4gICAgICBcImNhbGxfY29udHJhY3RcIixcbiAgICAgIFwiZXN0aW1hdGVfZmVlXCIsXG4gICAgICBcImVzdGltYXRlX21lc3NhZ2VfZmVlXCIsXG4gICAgICBcImVzdGltYXRlX2ZlZV9idWxrXCIsXG4gICAgICBcInNpbXVsYXRlX3RyYW5zYWN0aW9uXCJcbiAgICBdO1xuICAgIHJldHVybiBwb3N0TWV0aG9kRW5kcG9pbnRzLmluY2x1ZGVzKGVuZHBvaW50KSA/IFwiUE9TVFwiIDogXCJHRVRcIjtcbiAgfVxuICBnZXRRdWVyeVN0cmluZyhxdWVyeSkge1xuICAgIGlmIChpc0VtcHR5UXVlcnlPYmplY3QocXVlcnkpKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgY29uc3QgcXVlcnlTdHJpbmcgPSBPYmplY3QuZW50cmllcyhxdWVyeSkubWFwKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIGlmIChrZXkgPT09IFwiYmxvY2tJZGVudGlmaWVyXCIpIHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSBuZXcgQmxvY2sodmFsdWUpO1xuICAgICAgICByZXR1cm4gYCR7YmxvY2sucXVlcnlJZGVudGlmaWVyfWA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYCR7a2V5fT0ke3ZhbHVlfWA7XG4gICAgfSkuam9pbihcIiZcIik7XG4gICAgcmV0dXJuIGA/JHtxdWVyeVN0cmluZ31gO1xuICB9XG4gIGdldEhlYWRlcnMobWV0aG9kKSB7XG4gICAgaWYgKG1ldGhvZCA9PT0gXCJQT1NUXCIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAuLi50aGlzLmhlYWRlcnNcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmhlYWRlcnM7XG4gIH1cbiAgLy8gdHlwZXNhZmUgZmV0Y2hcbiAgYXN5bmMgZmV0Y2hFbmRwb2ludChlbmRwb2ludCwgLi4uW3F1ZXJ5LCByZXF1ZXN0XSkge1xuICAgIGNvbnN0IGJhc2VVcmwgPSB0aGlzLmdldEZldGNoVXJsKGVuZHBvaW50KTtcbiAgICBjb25zdCBtZXRob2QgPSB0aGlzLmdldEZldGNoTWV0aG9kKGVuZHBvaW50KTtcbiAgICBjb25zdCBxdWVyeVN0cmluZyA9IHRoaXMuZ2V0UXVlcnlTdHJpbmcocXVlcnkpO1xuICAgIGNvbnN0IHVybCA9IHVybGpvaW4yKGJhc2VVcmwsIGVuZHBvaW50LCBxdWVyeVN0cmluZyk7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2godXJsLCB7XG4gICAgICBtZXRob2QsXG4gICAgICBib2R5OiByZXF1ZXN0XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgZmV0Y2goZW5kcG9pbnQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB1cmwgPSBidWlsZFVybCh0aGlzLmJhc2VVcmwsIFwiXCIsIGVuZHBvaW50KTtcbiAgICBjb25zdCBtZXRob2QgPSBvcHRpb25zPy5tZXRob2QgPz8gXCJHRVRcIjtcbiAgICBjb25zdCBoZWFkZXJzID0gdGhpcy5nZXRIZWFkZXJzKG1ldGhvZCk7XG4gICAgY29uc3QgYm9keSA9IHN0cmluZ2lmeTIob3B0aW9ucz8uYm9keSk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2hQb255ZmlsbF9kZWZhdWx0KHVybCwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGJvZHksXG4gICAgICAgIGhlYWRlcnNcbiAgICAgIH0pO1xuICAgICAgY29uc3QgdGV4dFJlc3BvbnNlID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICBsZXQgcmVzcG9uc2VCb2R5O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlc3BvbnNlQm9keSA9IHBhcnNlMih0ZXh0UmVzcG9uc2UpO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICB0aHJvdyBuZXcgSHR0cEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQsIHJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEdhdGV3YXlFcnJvcihyZXNwb25zZUJvZHkubWVzc2FnZSwgcmVzcG9uc2VCb2R5LmNvZGUpO1xuICAgICAgfVxuICAgICAgY29uc3QgcGFyc2VDaG9pY2UgPSBvcHRpb25zPy5wYXJzZUFsd2F5c0FzQmlnSW50ID8gcGFyc2VBbHdheXNBc0JpZyA6IHBhcnNlMjtcbiAgICAgIHJldHVybiBwYXJzZUNob2ljZSh0ZXh0UmVzcG9uc2UpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yIGluc3RhbmNlb2YgTGlicmFyeUVycm9yKSlcbiAgICAgICAgdGhyb3cgRXJyb3IoYENvdWxkIG5vdCAke21ldGhvZH0gZnJvbSBlbmRwb2ludCBcXGAke3VybH1cXGA6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuICBhc3luYyBnZXRDaGFpbklkKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5jaGFpbklkKTtcbiAgfVxuICBhc3luYyBjYWxsQ29udHJhY3QoeyBjb250cmFjdEFkZHJlc3MsIGVudHJ5cG9pbnQ6IGVudHJ5UG9pbnRTZWxlY3RvciwgY2FsbGRhdGEgPSBbXSB9LCBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXG4gICAgICBcImNhbGxfY29udHJhY3RcIixcbiAgICAgIHsgYmxvY2tJZGVudGlmaWVyIH0sXG4gICAgICB7XG4gICAgICAgIC8vIFRPRE8gLSBkZXRlcm1pbmUgYmVzdCBjaG9pY2Ugb25jZSBib3RoIGFyZSBmdWxseSBzdXBwb3J0ZWQgaW4gZGV2bmV0XG4gICAgICAgIC8vIHNpZ25hdHVyZTogW10sXG4gICAgICAgIC8vIHNlbmRlcl9hZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgICAgIGNvbnRyYWN0X2FkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICAgICAgZW50cnlfcG9pbnRfc2VsZWN0b3I6IGdldFNlbGVjdG9yRnJvbU5hbWUoZW50cnlQb2ludFNlbGVjdG9yKSxcbiAgICAgICAgY2FsbGRhdGE6IENhbGxEYXRhLmNvbXBpbGUoY2FsbGRhdGEpXG4gICAgICB9XG4gICAgKS50aGVuKHRoaXMucmVzcG9uc2VQYXJzZXIucGFyc2VDYWxsQ29udHJhY3RSZXNwb25zZSk7XG4gIH1cbiAgYXN5bmMgZ2V0QmxvY2soYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwiZ2V0X2Jsb2NrXCIsIHsgYmxvY2tJZGVudGlmaWVyIH0pLnRoZW4oXG4gICAgICB0aGlzLnJlc3BvbnNlUGFyc2VyLnBhcnNlR2V0QmxvY2tSZXNwb25zZVxuICAgICk7XG4gIH1cbiAgYXN5bmMgZ2V0Tm9uY2VGb3JBZGRyZXNzKGNvbnRyYWN0QWRkcmVzcywgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwiZ2V0X25vbmNlXCIsIHsgY29udHJhY3RBZGRyZXNzLCBibG9ja0lkZW50aWZpZXIgfSk7XG4gIH1cbiAgYXN5bmMgZ2V0U3RvcmFnZUF0KGNvbnRyYWN0QWRkcmVzcywga2V5LCBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIGNvbnN0IHBhcnNlZEtleSA9IHRvQmlnSW50KGtleSkudG9TdHJpbmcoMTApO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJnZXRfc3RvcmFnZV9hdFwiLCB7XG4gICAgICBibG9ja0lkZW50aWZpZXIsXG4gICAgICBjb250cmFjdEFkZHJlc3MsXG4gICAgICBrZXk6IHBhcnNlZEtleVxuICAgIH0pO1xuICB9XG4gIGFzeW5jIGdldFRyYW5zYWN0aW9uKHR4SGFzaCkge1xuICAgIGNvbnN0IHR4SGFzaEhleCA9IHRvSGV4KHR4SGFzaCk7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcImdldF90cmFuc2FjdGlvblwiLCB7IHRyYW5zYWN0aW9uSGFzaDogdHhIYXNoSGV4IH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKE9iamVjdC52YWx1ZXMocmVzdWx0KS5sZW5ndGggPT09IDEpXG4gICAgICAgIHRocm93IG5ldyBMaWJyYXJ5RXJyb3IocmVzdWx0LnN0YXR1cyk7XG4gICAgICByZXR1cm4gdGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUdldFRyYW5zYWN0aW9uUmVzcG9uc2UocmVzdWx0KTtcbiAgICB9KTtcbiAgfVxuICBhc3luYyBnZXRUcmFuc2FjdGlvblJlY2VpcHQodHhIYXNoKSB7XG4gICAgY29uc3QgdHhIYXNoSGV4ID0gdG9IZXgodHhIYXNoKTtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwiZ2V0X3RyYW5zYWN0aW9uX3JlY2VpcHRcIiwgeyB0cmFuc2FjdGlvbkhhc2g6IHR4SGFzaEhleCB9KS50aGVuKFxuICAgICAgdGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUdldFRyYW5zYWN0aW9uUmVjZWlwdFJlc3BvbnNlXG4gICAgKTtcbiAgfVxuICBhc3luYyBnZXRDbGFzc0F0KGNvbnRyYWN0QWRkcmVzcywgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwiZ2V0X2Z1bGxfY29udHJhY3RcIiwgeyBibG9ja0lkZW50aWZpZXIsIGNvbnRyYWN0QWRkcmVzcyB9KS50aGVuKFxuICAgICAgdGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUNvbnRyYWN0Q2xhc3NSZXNwb25zZVxuICAgICk7XG4gIH1cbiAgYXN5bmMgZ2V0Q2xhc3NIYXNoQXQoY29udHJhY3RBZGRyZXNzLCBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJnZXRfY2xhc3NfaGFzaF9hdFwiLCB7IGJsb2NrSWRlbnRpZmllciwgY29udHJhY3RBZGRyZXNzIH0pO1xuICB9XG4gIGFzeW5jIGdldENsYXNzQnlIYXNoKGNsYXNzSGFzaCwgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwiZ2V0X2NsYXNzX2J5X2hhc2hcIiwgeyBjbGFzc0hhc2gsIGJsb2NrSWRlbnRpZmllciB9KS50aGVuKFxuICAgICAgdGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUNvbnRyYWN0Q2xhc3NSZXNwb25zZVxuICAgICk7XG4gIH1cbiAgYXN5bmMgZ2V0Q29tcGlsZWRDbGFzc0J5Q2xhc3NIYXNoKGNsYXNzSGFzaCwgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwiZ2V0X2NvbXBpbGVkX2NsYXNzX2J5X2NsYXNzX2hhc2hcIiwgeyBjbGFzc0hhc2gsIGJsb2NrSWRlbnRpZmllciB9KTtcbiAgfVxuICBhc3luYyBnZXRDb250cmFjdFZlcnNpb24oY29udHJhY3RBZGRyZXNzLCBjbGFzc0hhc2gsIHsgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIsIGNvbXBpbGVyID0gdHJ1ZSB9ID0ge30pIHtcbiAgICBsZXQgY29udHJhY3RDbGFzcztcbiAgICBpZiAoY29udHJhY3RBZGRyZXNzKSB7XG4gICAgICBjb250cmFjdENsYXNzID0gYXdhaXQgdGhpcy5nZXRDbGFzc0F0KGNvbnRyYWN0QWRkcmVzcywgYmxvY2tJZGVudGlmaWVyKTtcbiAgICB9IGVsc2UgaWYgKGNsYXNzSGFzaCkge1xuICAgICAgY29udHJhY3RDbGFzcyA9IGF3YWl0IHRoaXMuZ2V0Q2xhc3NCeUhhc2goY2xhc3NIYXNoLCBibG9ja0lkZW50aWZpZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcihcImdldENvbnRyYWN0VmVyc2lvbiByZXF1aXJlIGNvbnRyYWN0QWRkcmVzcyBvciBjbGFzc0hhc2hcIik7XG4gICAgfVxuICAgIGlmIChpc1NpZXJyYShjb250cmFjdENsYXNzKSkge1xuICAgICAgaWYgKGNvbXBpbGVyKSB7XG4gICAgICAgIGNvbnN0IGFiaVRlc3QgPSBnZXRBYmlDb250cmFjdFZlcnNpb24oY29udHJhY3RDbGFzcy5hYmkpO1xuICAgICAgICByZXR1cm4geyBjYWlybzogXCIxXCIsIGNvbXBpbGVyOiBhYmlUZXN0LmNvbXBpbGVyIH07XG4gICAgICB9XG4gICAgICByZXR1cm4geyBjYWlybzogXCIxXCIsIGNvbXBpbGVyOiB2b2lkIDAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgY2Fpcm86IFwiMFwiLCBjb21waWxlcjogXCIwXCIgfTtcbiAgfVxuICBhc3luYyBpbnZva2VGdW5jdGlvbihmdW5jdGlvbkludm9jYXRpb24sIGRldGFpbHMpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwiYWRkX3RyYW5zYWN0aW9uXCIsIHZvaWQgMCwge1xuICAgICAgdHlwZTogXCJJTlZPS0VfRlVOQ1RJT05cIiAvKiBJTlZPS0UgKi8sXG4gICAgICBzZW5kZXJfYWRkcmVzczogZnVuY3Rpb25JbnZvY2F0aW9uLmNvbnRyYWN0QWRkcmVzcyxcbiAgICAgIGNhbGxkYXRhOiBDYWxsRGF0YS5jb21waWxlKGZ1bmN0aW9uSW52b2NhdGlvbi5jYWxsZGF0YSA/PyBbXSksXG4gICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZVRvRGVjaW1hbEFycmF5KGZ1bmN0aW9uSW52b2NhdGlvbi5zaWduYXR1cmUpLFxuICAgICAgbm9uY2U6IHRvSGV4KGRldGFpbHMubm9uY2UpLFxuICAgICAgbWF4X2ZlZTogdG9IZXgoZGV0YWlscy5tYXhGZWUgfHwgMCksXG4gICAgICB2ZXJzaW9uOiBcIjB4MVwiXG4gICAgfSkudGhlbih0aGlzLnJlc3BvbnNlUGFyc2VyLnBhcnNlSW52b2tlRnVuY3Rpb25SZXNwb25zZSk7XG4gIH1cbiAgYXN5bmMgZGVwbG95QWNjb3VudENvbnRyYWN0KHsgY2xhc3NIYXNoLCBjb25zdHJ1Y3RvckNhbGxkYXRhLCBhZGRyZXNzU2FsdCwgc2lnbmF0dXJlIH0sIGRldGFpbHMpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwiYWRkX3RyYW5zYWN0aW9uXCIsIHZvaWQgMCwge1xuICAgICAgdHlwZTogXCJERVBMT1lfQUNDT1VOVFwiIC8qIERFUExPWV9BQ0NPVU5UICovLFxuICAgICAgY29udHJhY3RfYWRkcmVzc19zYWx0OiBhZGRyZXNzU2FsdCA/PyByYW5kb21BZGRyZXNzKCksXG4gICAgICBjb25zdHJ1Y3Rvcl9jYWxsZGF0YTogQ2FsbERhdGEuY29tcGlsZShjb25zdHJ1Y3RvckNhbGxkYXRhID8/IFtdKSxcbiAgICAgIGNsYXNzX2hhc2g6IHRvSGV4KGNsYXNzSGFzaCksXG4gICAgICBtYXhfZmVlOiB0b0hleChkZXRhaWxzLm1heEZlZSB8fCAwKSxcbiAgICAgIHZlcnNpb246IHRvSGV4KGRldGFpbHMudmVyc2lvbiB8fCAwKSxcbiAgICAgIG5vbmNlOiB0b0hleChkZXRhaWxzLm5vbmNlKSxcbiAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlVG9EZWNpbWFsQXJyYXkoc2lnbmF0dXJlKVxuICAgIH0pLnRoZW4odGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZURlcGxveUNvbnRyYWN0UmVzcG9uc2UpO1xuICB9XG4gIGFzeW5jIGRlY2xhcmVDb250cmFjdCh7IHNlbmRlckFkZHJlc3MsIGNvbnRyYWN0LCBzaWduYXR1cmUsIGNvbXBpbGVkQ2xhc3NIYXNoIH0sIGRldGFpbHMpIHtcbiAgICBpZiAoIWlzU2llcnJhKGNvbnRyYWN0KSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcImFkZF90cmFuc2FjdGlvblwiLCB2b2lkIDAsIHtcbiAgICAgICAgdHlwZTogXCJERUNMQVJFXCIgLyogREVDTEFSRSAqLyxcbiAgICAgICAgY29udHJhY3RfY2xhc3M6IGNvbnRyYWN0LFxuICAgICAgICBub25jZTogdG9IZXgoZGV0YWlscy5ub25jZSksXG4gICAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlVG9EZWNpbWFsQXJyYXkoc2lnbmF0dXJlKSxcbiAgICAgICAgc2VuZGVyX2FkZHJlc3M6IHNlbmRlckFkZHJlc3MsXG4gICAgICAgIG1heF9mZWU6IHRvSGV4KGRldGFpbHMubWF4RmVlIHx8IDApLFxuICAgICAgICB2ZXJzaW9uOiB0b0hleCh0cmFuc2FjdGlvblZlcnNpb24pXG4gICAgICB9KS50aGVuKHRoaXMucmVzcG9uc2VQYXJzZXIucGFyc2VEZWNsYXJlQ29udHJhY3RSZXNwb25zZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJhZGRfdHJhbnNhY3Rpb25cIiwgdm9pZCAwLCB7XG4gICAgICB0eXBlOiBcIkRFQ0xBUkVcIiAvKiBERUNMQVJFICovLFxuICAgICAgc2VuZGVyX2FkZHJlc3M6IHNlbmRlckFkZHJlc3MsXG4gICAgICBjb21waWxlZF9jbGFzc19oYXNoOiBjb21waWxlZENsYXNzSGFzaCxcbiAgICAgIGNvbnRyYWN0X2NsYXNzOiBjb250cmFjdCxcbiAgICAgIG5vbmNlOiB0b0hleChkZXRhaWxzLm5vbmNlKSxcbiAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlVG9EZWNpbWFsQXJyYXkoc2lnbmF0dXJlKSxcbiAgICAgIG1heF9mZWU6IHRvSGV4KGRldGFpbHMubWF4RmVlIHx8IDApLFxuICAgICAgdmVyc2lvbjogdG9IZXgodHJhbnNhY3Rpb25WZXJzaW9uXzIpXG4gICAgfSkudGhlbih0aGlzLnJlc3BvbnNlUGFyc2VyLnBhcnNlRGVjbGFyZUNvbnRyYWN0UmVzcG9uc2UpO1xuICB9XG4gIGFzeW5jIGdldEVzdGltYXRlRmVlKGludm9jYXRpb24sIGludm9jYXRpb25EZXRhaWxzLCBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllciwgc2tpcFZhbGlkYXRlID0gZmFsc2UpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbnZva2VFc3RpbWF0ZUZlZShpbnZvY2F0aW9uLCBpbnZvY2F0aW9uRGV0YWlscywgYmxvY2tJZGVudGlmaWVyLCBza2lwVmFsaWRhdGUpO1xuICB9XG4gIGFzeW5jIGdldEludm9rZUVzdGltYXRlRmVlKGludm9jYXRpb24sIGludm9jYXRpb25EZXRhaWxzLCBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllciwgc2tpcFZhbGlkYXRlID0gZmFsc2UpIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRoaXMuYnVpbGRUcmFuc2FjdGlvbihcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJJTlZPS0VfRlVOQ1RJT05cIiAvKiBJTlZPS0UgKi8sXG4gICAgICAgIC4uLmludm9jYXRpb24sXG4gICAgICAgIC4uLmludm9jYXRpb25EZXRhaWxzXG4gICAgICB9LFxuICAgICAgXCJmZWVcIlxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcImVzdGltYXRlX2ZlZVwiLCB7IGJsb2NrSWRlbnRpZmllciwgc2tpcFZhbGlkYXRlIH0sIHRyYW5zYWN0aW9uKS50aGVuKFxuICAgICAgdGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUZlZUVzdGltYXRlUmVzcG9uc2VcbiAgICApO1xuICB9XG4gIGFzeW5jIGdldERlY2xhcmVFc3RpbWF0ZUZlZShpbnZvY2F0aW9uLCBkZXRhaWxzLCBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllciwgc2tpcFZhbGlkYXRlID0gZmFsc2UpIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRoaXMuYnVpbGRUcmFuc2FjdGlvbihcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJERUNMQVJFXCIgLyogREVDTEFSRSAqLyxcbiAgICAgICAgLi4uaW52b2NhdGlvbixcbiAgICAgICAgLi4uZGV0YWlsc1xuICAgICAgfSxcbiAgICAgIFwiZmVlXCJcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJlc3RpbWF0ZV9mZWVcIiwgeyBibG9ja0lkZW50aWZpZXIsIHNraXBWYWxpZGF0ZSB9LCB0cmFuc2FjdGlvbikudGhlbihcbiAgICAgIHRoaXMucmVzcG9uc2VQYXJzZXIucGFyc2VGZWVFc3RpbWF0ZVJlc3BvbnNlXG4gICAgKTtcbiAgfVxuICBhc3luYyBnZXREZXBsb3lBY2NvdW50RXN0aW1hdGVGZWUoaW52b2NhdGlvbiwgZGV0YWlscywgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIsIHNraXBWYWxpZGF0ZSA9IGZhbHNlKSB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb24gPSB0aGlzLmJ1aWxkVHJhbnNhY3Rpb24oXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwiREVQTE9ZX0FDQ09VTlRcIiAvKiBERVBMT1lfQUNDT1VOVCAqLyxcbiAgICAgICAgLi4uaW52b2NhdGlvbixcbiAgICAgICAgLi4uZGV0YWlsc1xuICAgICAgfSxcbiAgICAgIFwiZmVlXCJcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJlc3RpbWF0ZV9mZWVcIiwgeyBibG9ja0lkZW50aWZpZXIsIHNraXBWYWxpZGF0ZSB9LCB0cmFuc2FjdGlvbikudGhlbihcbiAgICAgIHRoaXMucmVzcG9uc2VQYXJzZXIucGFyc2VGZWVFc3RpbWF0ZVJlc3BvbnNlXG4gICAgKTtcbiAgfVxuICBhc3luYyBnZXRFc3RpbWF0ZUZlZUJ1bGsoaW52b2NhdGlvbnMsIHsgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIsIHNraXBWYWxpZGF0ZSA9IGZhbHNlIH0pIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbnMgPSBpbnZvY2F0aW9ucy5tYXAoKGl0KSA9PiB0aGlzLmJ1aWxkVHJhbnNhY3Rpb24oaXQsIFwiZmVlXCIpKTtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFxuICAgICAgXCJlc3RpbWF0ZV9mZWVfYnVsa1wiLFxuICAgICAgeyBibG9ja0lkZW50aWZpZXIsIHNraXBWYWxpZGF0ZSB9LFxuICAgICAgdHJhbnNhY3Rpb25zXG4gICAgKS50aGVuKHRoaXMucmVzcG9uc2VQYXJzZXIucGFyc2VGZWVFc3RpbWF0ZUJ1bGtSZXNwb25zZSk7XG4gIH1cbiAgYXN5bmMgZ2V0Q29kZShjb250cmFjdEFkZHJlc3MsIGJsb2NrSWRlbnRpZmllciA9IHRoaXMuYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcImdldF9jb2RlXCIsIHsgY29udHJhY3RBZGRyZXNzLCBibG9ja0lkZW50aWZpZXIgfSk7XG4gIH1cbiAgYXN5bmMgd2FpdEZvclRyYW5zYWN0aW9uKHR4SGFzaCwgb3B0aW9ucykge1xuICAgIGxldCByZXM7XG4gICAgbGV0IGNvbXBsZXRlZCA9IGZhbHNlO1xuICAgIGxldCByZXRyaWVzID0gMDtcbiAgICBjb25zdCByZXRyeUludGVydmFsID0gb3B0aW9ucz8ucmV0cnlJbnRlcnZhbCA/PyA1ZTM7XG4gICAgY29uc3QgZXJyb3JTdGF0ZXMgPSBvcHRpb25zPy5lcnJvclN0YXRlcyA/PyBbXG4gICAgICBcIlJFSkVDVEVEXCIgLyogUkVKRUNURUQgKi8sXG4gICAgICBcIk5PVF9SRUNFSVZFRFwiIC8qIE5PVF9SRUNFSVZFRCAqLyxcbiAgICAgIFwiUkVWRVJURURcIiAvKiBSRVZFUlRFRCAqL1xuICAgIF07XG4gICAgY29uc3Qgc3VjY2Vzc1N0YXRlcyA9IG9wdGlvbnM/LnN1Y2Nlc3NTdGF0ZXMgPz8gW1xuICAgICAgXCJTVUNDRUVERURcIiAvKiBTVUNDRUVERUQgKi8sXG4gICAgICBcIkFDQ0VQVEVEX09OX0wxXCIgLyogQUNDRVBURURfT05fTDEgKi8sXG4gICAgICBcIkFDQ0VQVEVEX09OX0wyXCIgLyogQUNDRVBURURfT05fTDIgKi9cbiAgICBdO1xuICAgIHdoaWxlICghY29tcGxldGVkKSB7XG4gICAgICBhd2FpdCB3YWl0KHJldHJ5SW50ZXJ2YWwpO1xuICAgICAgcmVzID0gYXdhaXQgdGhpcy5nZXRUcmFuc2FjdGlvblN0YXR1cyh0eEhhc2gpO1xuICAgICAgaWYgKFwiTk9UX1JFQ0VJVkVEXCIgLyogTk9UX1JFQ0VJVkVEICovID09PSByZXMuZmluYWxpdHlfc3RhdHVzICYmIHJldHJpZXMgPCAzKSB7XG4gICAgICAgIHJldHJpZXMgKz0gMTtcbiAgICAgIH0gZWxzZSBpZiAoc3VjY2Vzc1N0YXRlcy5pbmNsdWRlcyhyZXMuZmluYWxpdHlfc3RhdHVzKSB8fCBzdWNjZXNzU3RhdGVzLmluY2x1ZGVzKHJlcy5leGVjdXRpb25fc3RhdHVzKSkge1xuICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChlcnJvclN0YXRlcy5pbmNsdWRlcyhyZXMuZmluYWxpdHlfc3RhdHVzKSB8fCBlcnJvclN0YXRlcy5pbmNsdWRlcyhyZXMuZXhlY3V0aW9uX3N0YXR1cykpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2U7XG4gICAgICAgIGlmIChyZXMudHhfZmFpbHVyZV9yZWFzb24pIHtcbiAgICAgICAgICBtZXNzYWdlID0gYCR7cmVzLnR4X3N0YXR1c306ICR7cmVzLnR4X2ZhaWx1cmVfcmVhc29uLmNvZGV9XG4ke3Jlcy50eF9mYWlsdXJlX3JlYXNvbi5lcnJvcl9tZXNzYWdlfWA7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzLnR4X3JldmVydF9yZWFzb24pIHtcbiAgICAgICAgICBtZXNzYWdlID0gYCR7cmVzLnR4X3N0YXR1c306ICR7cmVzLnR4X3JldmVydF9yZWFzb259YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtZXNzYWdlID0gcmVzLnR4X3N0YXR1cztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgZXJyb3IucmVzcG9uc2UgPSByZXM7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB0eFJlY2VpcHQgPSBhd2FpdCB0aGlzLmdldFRyYW5zYWN0aW9uUmVjZWlwdCh0eEhhc2gpO1xuICAgIHJldHVybiB0eFJlY2VpcHQ7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIHN0YXR1cyBvZiBhIHRyYW5zYWN0aW9uLlxuICAgKiBAcGFyYW0gdHhIYXNoIEJpZ051bWJlcmlzaFxuICAgKiBAcmV0dXJucyBHZXRUcmFuc2FjdGlvblN0YXR1c1Jlc3BvbnNlIC0gdGhlIHRyYW5zYWN0aW9uIHN0YXR1cyBvYmplY3RcbiAgICovXG4gIGFzeW5jIGdldFRyYW5zYWN0aW9uU3RhdHVzKHR4SGFzaCkge1xuICAgIGNvbnN0IHR4SGFzaEhleCA9IHRvSGV4KHR4SGFzaCk7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcImdldF90cmFuc2FjdGlvbl9zdGF0dXNcIiwgeyB0cmFuc2FjdGlvbkhhc2g6IHR4SGFzaEhleCB9KTtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgc21hcnQgY29udHJhY3QgYWRkcmVzcyBvbiB0aGUgZ29lcmxpIHRlc3RuZXQuXG4gICAqIEByZXR1cm5zIEdldENvbnRyYWN0QWRkcmVzc2VzUmVzcG9uc2UgLSBzdGFya25ldCBzbWFydCBjb250cmFjdCBhZGRyZXNzZXNcbiAgICovXG4gIGFzeW5jIGdldENvbnRyYWN0QWRkcmVzc2VzKCkge1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJnZXRfY29udHJhY3RfYWRkcmVzc2VzXCIpO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSB0cmFuc2FjdGlvbiB0cmFjZSBmcm9tIGEgdHggaWQuXG4gICAqIEBwYXJhbSB0eEhhc2ggQmlnTnVtYmVyaXNoXG4gICAqIEByZXR1cm5zIFRyYW5zYWN0aW9uVHJhY2VSZXNwb25zZSAtIHRoZSB0cmFuc2FjdGlvbiB0cmFjZVxuICAgKi9cbiAgYXN5bmMgZ2V0VHJhbnNhY3Rpb25UcmFjZSh0eEhhc2gpIHtcbiAgICBjb25zdCB0eEhhc2hIZXggPSB0b0hleCh0eEhhc2gpO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJnZXRfdHJhbnNhY3Rpb25fdHJhY2VcIiwgeyB0cmFuc2FjdGlvbkhhc2g6IHR4SGFzaEhleCB9KTtcbiAgfVxuICBhc3luYyBlc3RpbWF0ZU1lc3NhZ2VGZWUoeyBmcm9tX2FkZHJlc3MsIHRvX2FkZHJlc3MsIGVudHJ5X3BvaW50X3NlbGVjdG9yLCBwYXlsb2FkIH0sIGJsb2NrSWRlbnRpZmllciA9IHRoaXMuYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgY29uc3QgdmFsaWRDYWxsTDFIYW5kbGVyID0ge1xuICAgICAgZnJvbV9hZGRyZXNzOiBnZXREZWNpbWFsU3RyaW5nKGZyb21fYWRkcmVzcyksXG4gICAgICB0b19hZGRyZXNzOiBnZXRIZXhTdHJpbmcodG9fYWRkcmVzcyksXG4gICAgICBlbnRyeV9wb2ludF9zZWxlY3RvcjogZ2V0U2VsZWN0b3IoZW50cnlfcG9pbnRfc2VsZWN0b3IpLFxuICAgICAgcGF5bG9hZDogZ2V0SGV4U3RyaW5nQXJyYXkocGF5bG9hZClcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJlc3RpbWF0ZV9tZXNzYWdlX2ZlZVwiLCB7IGJsb2NrSWRlbnRpZmllciB9LCB2YWxpZENhbGxMMUhhbmRsZXIpO1xuICB9XG4gIC8qKlxuICAgKiBTaW11bGF0ZSB0cmFuc2FjdGlvbiB1c2luZyBTZXF1ZW5jZXIgcHJvdmlkZXJcbiAgICogV0FSTklORyE6IFNlcXVlbmNlciB3aWxsIHByb2Nlc3Mgb25seSBmaXJzdCBlbGVtZW50IGZyb20gaW52b2NhdGlvbnMgYXJyYXlcbiAgICpcbiAgICogQHBhcmFtIGludm9jYXRpb25zIEFycmF5IG9mIGludm9jYXRpb25zLCBidXQgb25seSBmaXJzdCBpbnZvY2F0aW9uIHdpbGwgYmUgcHJvY2Vzc2VkXG4gICAqIEBwYXJhbSBibG9ja0lkZW50aWZpZXIgYmxvY2sgaWRlbnRpZmllciwgZGVmYXVsdCAnbGF0ZXN0J1xuICAgKiBAcGFyYW0gc2tpcFZhbGlkYXRlIFNraXAgQWNjb3VudCBfX3ZhbGlkYXRlX18gbWV0aG9kXG4gICAqIEByZXR1cm5zXG4gICAqL1xuICBhc3luYyBnZXRTaW11bGF0ZVRyYW5zYWN0aW9uKGludm9jYXRpb25zLCB7XG4gICAgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIsXG4gICAgc2tpcFZhbGlkYXRlID0gZmFsc2UsXG4gICAgc2tpcEV4ZWN1dGUgPSBmYWxzZVxuICB9KSB7XG4gICAgaWYgKGludm9jYXRpb25zLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlNlcXVlbmNlciBzaW11bGF0ZSBwcm9jZXNzIG9ubHkgZmlyc3QgZWxlbWVudCBmcm9tIGludm9jYXRpb25zIGxpc3RcIik7XG4gICAgfVxuICAgIGlmIChza2lwRXhlY3V0ZSkge1xuICAgICAgY29uc29sZS53YXJuKFwiU2VxdWVuY2VyIGNhbid0IHNraXAgYWNjb3VudCBfX2V4ZWN1dGVfX1wiKTtcbiAgICB9XG4gICAgY29uc3QgdHJhbnNhY3Rpb24gPSB0aGlzLmJ1aWxkVHJhbnNhY3Rpb24oaW52b2NhdGlvbnNbMF0pO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXG4gICAgICBcInNpbXVsYXRlX3RyYW5zYWN0aW9uXCIsXG4gICAgICB7XG4gICAgICAgIGJsb2NrSWRlbnRpZmllcixcbiAgICAgICAgc2tpcFZhbGlkYXRlOiBza2lwVmFsaWRhdGUgPz8gZmFsc2VcbiAgICAgIH0sXG4gICAgICB0cmFuc2FjdGlvblxuICAgICkudGhlbih0aGlzLnJlc3BvbnNlUGFyc2VyLnBhcnNlU2ltdWxhdGVUcmFuc2FjdGlvblJlc3BvbnNlKTtcbiAgfVxuICBhc3luYyBnZXRTdGF0ZVVwZGF0ZShibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIGNvbnN0IGFyZ3MgPSBuZXcgQmxvY2soYmxvY2tJZGVudGlmaWVyKS5zZXF1ZW5jZXJJZGVudGlmaWVyO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJnZXRfc3RhdGVfdXBkYXRlXCIsIHsgLi4uYXJncyB9KS50aGVuKFxuICAgICAgdGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUdldFN0YXRlVXBkYXRlUmVzcG9uc2VcbiAgICApO1xuICB9XG4gIC8vIGNvbnNpZGVyIGFkZGluZyBhbiBvcHRpb25hbCB0cmFjZSByZXRyaWV2YWwgcGFyYW1ldGVyIHRvIHRoZSBnZXRCbG9jayBtZXRob2RcbiAgYXN5bmMgZ2V0QmxvY2tUcmFjZXMoYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICBjb25zdCBhcmdzID0gbmV3IEJsb2NrKGJsb2NrSWRlbnRpZmllcikuc2VxdWVuY2VySWRlbnRpZmllcjtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwiZ2V0X2Jsb2NrX3RyYWNlc1wiLCB7IC4uLmFyZ3MgfSk7XG4gIH1cbiAgYXN5bmMgZ2V0U3RhcmtOYW1lKGFkZHJlc3MsIFN0YXJrbmV0SWRDb250cmFjdDIpIHtcbiAgICByZXR1cm4gZ2V0U3RhcmtOYW1lKHRoaXMsIGFkZHJlc3MsIFN0YXJrbmV0SWRDb250cmFjdDIpO1xuICB9XG4gIGFzeW5jIGdldEFkZHJlc3NGcm9tU3RhcmtOYW1lKG5hbWUsIFN0YXJrbmV0SWRDb250cmFjdDIpIHtcbiAgICByZXR1cm4gZ2V0QWRkcmVzc0Zyb21TdGFya05hbWUodGhpcywgbmFtZSwgU3RhcmtuZXRJZENvbnRyYWN0Mik7XG4gIH1cbiAgLyoqXG4gICAqIEJ1aWxkIFNpbmdsZSBBY2NvdW50VHJhbnNhY3Rpb24gZnJvbSBTaW5nbGUgQWNjb3VudEludm9jYXRpb25cbiAgICogQHBhcmFtIGludm9jYXRpb24gQWNjb3VudEludm9jYXRpb25JdGVtXG4gICAqIEBwYXJhbSB2ZXJzaW9uVHlwZSAnZmVlJyB8ICd0cmFuc2FjdGlvbicgLSB1c2VkIHRvIGRldGVybWluZSBkZWZhdWx0IHZlcnNpb25zXG4gICAqIEByZXR1cm5zIEFjY291bnRUcmFuc2FjdGlvbkl0ZW1cbiAgICovXG4gIGJ1aWxkVHJhbnNhY3Rpb24oaW52b2NhdGlvbiwgdmVyc2lvblR5cGUpIHtcbiAgICBjb25zdCBkZWZhdWx0VmVyc2lvbnMgPSBnZXRWZXJzaW9uc0J5VHlwZSh2ZXJzaW9uVHlwZSk7XG4gICAgY29uc3QgZGV0YWlscyA9IHtcbiAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlVG9EZWNpbWFsQXJyYXkoaW52b2NhdGlvbi5zaWduYXR1cmUpLFxuICAgICAgbm9uY2U6IHRvSGV4KGludm9jYXRpb24ubm9uY2UpXG4gICAgfTtcbiAgICBpZiAoaW52b2NhdGlvbi50eXBlID09PSBcIklOVk9LRV9GVU5DVElPTlwiIC8qIElOVk9LRSAqLykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogaW52b2NhdGlvbi50eXBlLFxuICAgICAgICBzZW5kZXJfYWRkcmVzczogaW52b2NhdGlvbi5jb250cmFjdEFkZHJlc3MsXG4gICAgICAgIGNhbGxkYXRhOiBDYWxsRGF0YS5jb21waWxlKGludm9jYXRpb24uY2FsbGRhdGEgPz8gW10pLFxuICAgICAgICB2ZXJzaW9uOiB0b0hleChpbnZvY2F0aW9uLnZlcnNpb24gfHwgZGVmYXVsdFZlcnNpb25zLnYxKSxcbiAgICAgICAgLi4uZGV0YWlsc1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGludm9jYXRpb24udHlwZSA9PT0gXCJERUNMQVJFXCIgLyogREVDTEFSRSAqLykge1xuICAgICAgaWYgKCFpc1NpZXJyYShpbnZvY2F0aW9uLmNvbnRyYWN0KSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IGludm9jYXRpb24udHlwZSxcbiAgICAgICAgICBjb250cmFjdF9jbGFzczogaW52b2NhdGlvbi5jb250cmFjdCxcbiAgICAgICAgICBzZW5kZXJfYWRkcmVzczogaW52b2NhdGlvbi5zZW5kZXJBZGRyZXNzLFxuICAgICAgICAgIHZlcnNpb246IHRvSGV4KGludm9jYXRpb24udmVyc2lvbiB8fCBkZWZhdWx0VmVyc2lvbnMudjEpLFxuICAgICAgICAgIC8vIGZlZSBmcm9tIGdldERlY2xhcmVFc3RpbWF0ZUZlZSB1c2UgdC52LiBpbnN0ZWFkIG9mIGZlZXQudi5cbiAgICAgICAgICAuLi5kZXRhaWxzXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBpbnZvY2F0aW9uLnR5cGUsXG4gICAgICAgIGNvbnRyYWN0X2NsYXNzOiBpbnZvY2F0aW9uLmNvbnRyYWN0LFxuICAgICAgICBjb21waWxlZF9jbGFzc19oYXNoOiBpbnZvY2F0aW9uLmNvbXBpbGVkQ2xhc3NIYXNoLFxuICAgICAgICBzZW5kZXJfYWRkcmVzczogaW52b2NhdGlvbi5zZW5kZXJBZGRyZXNzLFxuICAgICAgICB2ZXJzaW9uOiB0b0hleChpbnZvY2F0aW9uLnZlcnNpb24gfHwgZGVmYXVsdFZlcnNpb25zLnYyKSxcbiAgICAgICAgLy8gZmVlIG9uIGdldERlY2xhcmVFc3RpbWF0ZUZlZSB1c2UgdC52LiBpbnN0ZWFkIG9mIGZlZXQudi5cbiAgICAgICAgLi4uZGV0YWlsc1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGludm9jYXRpb24udHlwZSA9PT0gXCJERVBMT1lfQUNDT1VOVFwiIC8qIERFUExPWV9BQ0NPVU5UICovKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBpbnZvY2F0aW9uLnR5cGUsXG4gICAgICAgIGNvbnN0cnVjdG9yX2NhbGxkYXRhOiBDYWxsRGF0YS5jb21waWxlKGludm9jYXRpb24uY29uc3RydWN0b3JDYWxsZGF0YSB8fCBbXSksXG4gICAgICAgIGNsYXNzX2hhc2g6IHRvSGV4KGludm9jYXRpb24uY2xhc3NIYXNoKSxcbiAgICAgICAgY29udHJhY3RfYWRkcmVzc19zYWx0OiB0b0hleChpbnZvY2F0aW9uLmFkZHJlc3NTYWx0IHx8IDApLFxuICAgICAgICB2ZXJzaW9uOiB0b0hleChpbnZvY2F0aW9uLnZlcnNpb24gfHwgZGVmYXVsdFZlcnNpb25zLnYxKSxcbiAgICAgICAgLi4uZGV0YWlsc1xuICAgICAgfTtcbiAgICB9XG4gICAgdGhyb3cgRXJyb3IoXCJTZXF1ZW5jZXIgYnVpbGRUcmFuc2FjdGlvbiByZWNlaXZlZCB1bmtub3duIFRyYW5zYWN0aW9uVHlwZVwiKTtcbiAgfVxufTtcblxuLy8gc3JjL3Byb3ZpZGVyL2RlZmF1bHQudHNcbnZhciBQcm92aWRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IocHJvdmlkZXJPck9wdGlvbnMpIHtcbiAgICBpZiAocHJvdmlkZXJPck9wdGlvbnMgaW5zdGFuY2VvZiBQcm92aWRlcikge1xuICAgICAgdGhpcy5wcm92aWRlciA9IHByb3ZpZGVyT3JPcHRpb25zLnByb3ZpZGVyO1xuICAgIH0gZWxzZSBpZiAocHJvdmlkZXJPck9wdGlvbnMgaW5zdGFuY2VvZiBScGNQcm92aWRlciB8fCBwcm92aWRlck9yT3B0aW9ucyBpbnN0YW5jZW9mIFNlcXVlbmNlclByb3ZpZGVyKSB7XG4gICAgICB0aGlzLnByb3ZpZGVyID0gcHJvdmlkZXJPck9wdGlvbnM7XG4gICAgfSBlbHNlIGlmIChwcm92aWRlck9yT3B0aW9ucyAmJiBcInJwY1wiIGluIHByb3ZpZGVyT3JPcHRpb25zKSB7XG4gICAgICB0aGlzLnByb3ZpZGVyID0gbmV3IFJwY1Byb3ZpZGVyKHByb3ZpZGVyT3JPcHRpb25zLnJwYyk7XG4gICAgfSBlbHNlIGlmIChwcm92aWRlck9yT3B0aW9ucyAmJiBcInNlcXVlbmNlclwiIGluIHByb3ZpZGVyT3JPcHRpb25zKSB7XG4gICAgICB0aGlzLnByb3ZpZGVyID0gbmV3IFNlcXVlbmNlclByb3ZpZGVyKHByb3ZpZGVyT3JPcHRpb25zLnNlcXVlbmNlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHJvdmlkZXIgPSBuZXcgUnBjUHJvdmlkZXIoKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZ2V0Q2hhaW5JZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlci5nZXRDaGFpbklkKCk7XG4gIH1cbiAgYXN5bmMgZ2V0QmxvY2soYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0QmxvY2soYmxvY2tJZGVudGlmaWVyKTtcbiAgfVxuICBhc3luYyBnZXRDbGFzc0F0KGNvbnRyYWN0QWRkcmVzcywgYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0Q2xhc3NBdChjb250cmFjdEFkZHJlc3MsIGJsb2NrSWRlbnRpZmllcik7XG4gIH1cbiAgYXN5bmMgZ2V0Q2xhc3NIYXNoQXQoY29udHJhY3RBZGRyZXNzLCBibG9ja0lkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlci5nZXRDbGFzc0hhc2hBdChjb250cmFjdEFkZHJlc3MsIGJsb2NrSWRlbnRpZmllcik7XG4gIH1cbiAgZ2V0Q2xhc3NCeUhhc2goY2xhc3NIYXNoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0Q2xhc3NCeUhhc2goY2xhc3NIYXNoKTtcbiAgfVxuICBhc3luYyBnZXRFc3RpbWF0ZUZlZShpbnZvY2F0aW9uV2l0aFR4VHlwZSwgaW52b2NhdGlvbkRldGFpbHMsIGJsb2NrSWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLmdldEVzdGltYXRlRmVlKGludm9jYXRpb25XaXRoVHhUeXBlLCBpbnZvY2F0aW9uRGV0YWlscywgYmxvY2tJZGVudGlmaWVyKTtcbiAgfVxuICBhc3luYyBnZXRJbnZva2VFc3RpbWF0ZUZlZShpbnZvY2F0aW9uV2l0aFR4VHlwZSwgaW52b2NhdGlvbkRldGFpbHMsIGJsb2NrSWRlbnRpZmllciwgc2tpcFZhbGlkYXRlKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0SW52b2tlRXN0aW1hdGVGZWUoXG4gICAgICBpbnZvY2F0aW9uV2l0aFR4VHlwZSxcbiAgICAgIGludm9jYXRpb25EZXRhaWxzLFxuICAgICAgYmxvY2tJZGVudGlmaWVyLFxuICAgICAgc2tpcFZhbGlkYXRlXG4gICAgKTtcbiAgfVxuICBhc3luYyBnZXRFc3RpbWF0ZUZlZUJ1bGsoaW52b2NhdGlvbnMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlci5nZXRFc3RpbWF0ZUZlZUJ1bGsoaW52b2NhdGlvbnMsIG9wdGlvbnMpO1xuICB9XG4gIGFzeW5jIGdldE5vbmNlRm9yQWRkcmVzcyhjb250cmFjdEFkZHJlc3MsIGJsb2NrSWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLmdldE5vbmNlRm9yQWRkcmVzcyhjb250cmFjdEFkZHJlc3MsIGJsb2NrSWRlbnRpZmllcik7XG4gIH1cbiAgYXN5bmMgZ2V0U3RvcmFnZUF0KGNvbnRyYWN0QWRkcmVzcywga2V5LCBibG9ja0lkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlci5nZXRTdG9yYWdlQXQoY29udHJhY3RBZGRyZXNzLCBrZXksIGJsb2NrSWRlbnRpZmllcik7XG4gIH1cbiAgYXN5bmMgZ2V0VHJhbnNhY3Rpb24odHhIYXNoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0VHJhbnNhY3Rpb24odHhIYXNoKTtcbiAgfVxuICBhc3luYyBnZXRUcmFuc2FjdGlvblJlY2VpcHQodHhIYXNoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KHR4SGFzaCk7XG4gIH1cbiAgYXN5bmMgY2FsbENvbnRyYWN0KHJlcXVlc3QsIGJsb2NrSWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLmNhbGxDb250cmFjdChyZXF1ZXN0LCBibG9ja0lkZW50aWZpZXIpO1xuICB9XG4gIGFzeW5jIGludm9rZUZ1bmN0aW9uKGZ1bmN0aW9uSW52b2NhdGlvbiwgZGV0YWlscykge1xuICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLmludm9rZUZ1bmN0aW9uKGZ1bmN0aW9uSW52b2NhdGlvbiwgZGV0YWlscyk7XG4gIH1cbiAgYXN5bmMgZGVwbG95QWNjb3VudENvbnRyYWN0KHBheWxvYWQsIGRldGFpbHMpIHtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlci5kZXBsb3lBY2NvdW50Q29udHJhY3QocGF5bG9hZCwgZGV0YWlscyk7XG4gIH1cbiAgYXN5bmMgZGVjbGFyZUNvbnRyYWN0KHRyYW5zYWN0aW9uLCBkZXRhaWxzKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZGVjbGFyZUNvbnRyYWN0KHRyYW5zYWN0aW9uLCBkZXRhaWxzKTtcbiAgfVxuICBhc3luYyBnZXREZWNsYXJlRXN0aW1hdGVGZWUodHJhbnNhY3Rpb24sIGRldGFpbHMsIGJsb2NrSWRlbnRpZmllciwgc2tpcFZhbGlkYXRlKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0RGVjbGFyZUVzdGltYXRlRmVlKHRyYW5zYWN0aW9uLCBkZXRhaWxzLCBibG9ja0lkZW50aWZpZXIsIHNraXBWYWxpZGF0ZSk7XG4gIH1cbiAgZ2V0RGVwbG95QWNjb3VudEVzdGltYXRlRmVlKHRyYW5zYWN0aW9uLCBkZXRhaWxzLCBibG9ja0lkZW50aWZpZXIsIHNraXBWYWxpZGF0ZSkge1xuICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLmdldERlcGxveUFjY291bnRFc3RpbWF0ZUZlZShcbiAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgZGV0YWlscyxcbiAgICAgIGJsb2NrSWRlbnRpZmllcixcbiAgICAgIHNraXBWYWxpZGF0ZVxuICAgICk7XG4gIH1cbiAgYXN5bmMgZ2V0Q29kZShjb250cmFjdEFkZHJlc3MsIGJsb2NrSWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLmdldENvZGUoY29udHJhY3RBZGRyZXNzLCBibG9ja0lkZW50aWZpZXIpO1xuICB9XG4gIGFzeW5jIHdhaXRGb3JUcmFuc2FjdGlvbih0eEhhc2gsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlci53YWl0Rm9yVHJhbnNhY3Rpb24odHhIYXNoLCBvcHRpb25zKTtcbiAgfVxuICBhc3luYyBnZXRTaW11bGF0ZVRyYW5zYWN0aW9uKGludm9jYXRpb25zLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0U2ltdWxhdGVUcmFuc2FjdGlvbihpbnZvY2F0aW9ucywgb3B0aW9ucyk7XG4gIH1cbiAgYXN5bmMgZ2V0U3RhdGVVcGRhdGUoYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0U3RhdGVVcGRhdGUoYmxvY2tJZGVudGlmaWVyKTtcbiAgfVxuICBhc3luYyBnZXRTdGFya05hbWUoYWRkcmVzcywgU3RhcmtuZXRJZENvbnRyYWN0Mikge1xuICAgIHJldHVybiBnZXRTdGFya05hbWUodGhpcywgYWRkcmVzcywgU3RhcmtuZXRJZENvbnRyYWN0Mik7XG4gIH1cbiAgYXN5bmMgZ2V0QWRkcmVzc0Zyb21TdGFya05hbWUobmFtZSwgU3RhcmtuZXRJZENvbnRyYWN0Mikge1xuICAgIHJldHVybiBnZXRBZGRyZXNzRnJvbVN0YXJrTmFtZSh0aGlzLCBuYW1lLCBTdGFya25ldElkQ29udHJhY3QyKTtcbiAgfVxuICBhc3luYyBnZXRDb250cmFjdFZlcnNpb24oY29udHJhY3RBZGRyZXNzLCBjbGFzc0hhc2gsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlci5nZXRDb250cmFjdFZlcnNpb24oY29udHJhY3RBZGRyZXNzLCBjbGFzc0hhc2gsIG9wdGlvbnMpO1xuICB9XG59O1xuXG4vLyBzcmMvc2lnbmVyL2ludGVyZmFjZS50c1xudmFyIFNpZ25lckludGVyZmFjZSA9IGNsYXNzIHtcbn07XG5cbi8vIHNyYy91dGlscy90cmFuc2FjdGlvbi50c1xudmFyIHRyYW5zYWN0aW9uX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHRyYW5zYWN0aW9uX2V4cG9ydHMsIHtcbiAgZnJvbUNhbGxzVG9FeGVjdXRlQ2FsbGRhdGE6ICgpID0+IGZyb21DYWxsc1RvRXhlY3V0ZUNhbGxkYXRhLFxuICBmcm9tQ2FsbHNUb0V4ZWN1dGVDYWxsZGF0YVdpdGhOb25jZTogKCkgPT4gZnJvbUNhbGxzVG9FeGVjdXRlQ2FsbGRhdGFXaXRoTm9uY2UsXG4gIGZyb21DYWxsc1RvRXhlY3V0ZUNhbGxkYXRhX2NhaXJvMTogKCkgPT4gZnJvbUNhbGxzVG9FeGVjdXRlQ2FsbGRhdGFfY2Fpcm8xLFxuICBnZXRFeGVjdXRlQ2FsbGRhdGE6ICgpID0+IGdldEV4ZWN1dGVDYWxsZGF0YSxcbiAgdHJhbnNmb3JtQ2FsbHNUb011bHRpY2FsbEFycmF5czogKCkgPT4gdHJhbnNmb3JtQ2FsbHNUb011bHRpY2FsbEFycmF5cyxcbiAgdHJhbnNmb3JtQ2FsbHNUb011bHRpY2FsbEFycmF5c19jYWlybzE6ICgpID0+IHRyYW5zZm9ybUNhbGxzVG9NdWx0aWNhbGxBcnJheXNfY2Fpcm8xXG59KTtcbnZhciB0cmFuc2Zvcm1DYWxsc1RvTXVsdGljYWxsQXJyYXlzID0gKGNhbGxzKSA9PiB7XG4gIGNvbnN0IGNhbGxBcnJheSA9IFtdO1xuICBjb25zdCBjYWxsZGF0YSA9IFtdO1xuICBjYWxscy5mb3JFYWNoKChjYWxsKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IENhbGxEYXRhLmNvbXBpbGUoY2FsbC5jYWxsZGF0YSB8fCBbXSk7XG4gICAgY2FsbEFycmF5LnB1c2goe1xuICAgICAgdG86IHRvQmlnSW50KGNhbGwuY29udHJhY3RBZGRyZXNzKS50b1N0cmluZygxMCksXG4gICAgICBzZWxlY3RvcjogdG9CaWdJbnQoZ2V0U2VsZWN0b3JGcm9tTmFtZShjYWxsLmVudHJ5cG9pbnQpKS50b1N0cmluZygxMCksXG4gICAgICBkYXRhX29mZnNldDogY2FsbGRhdGEubGVuZ3RoLnRvU3RyaW5nKCksXG4gICAgICBkYXRhX2xlbjogZGF0YS5sZW5ndGgudG9TdHJpbmcoKVxuICAgIH0pO1xuICAgIGNhbGxkYXRhLnB1c2goLi4uZGF0YSk7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGNhbGxBcnJheSxcbiAgICBjYWxsZGF0YTogQ2FsbERhdGEuY29tcGlsZSh7IGNhbGxkYXRhIH0pXG4gIH07XG59O1xudmFyIGZyb21DYWxsc1RvRXhlY3V0ZUNhbGxkYXRhID0gKGNhbGxzKSA9PiB7XG4gIGNvbnN0IHsgY2FsbEFycmF5LCBjYWxsZGF0YSB9ID0gdHJhbnNmb3JtQ2FsbHNUb011bHRpY2FsbEFycmF5cyhjYWxscyk7XG4gIGNvbnN0IGNvbXBpbGVkQ2FsbHMgPSBDYWxsRGF0YS5jb21waWxlKHsgY2FsbEFycmF5IH0pO1xuICByZXR1cm4gWy4uLmNvbXBpbGVkQ2FsbHMsIC4uLmNhbGxkYXRhXTtcbn07XG52YXIgZnJvbUNhbGxzVG9FeGVjdXRlQ2FsbGRhdGFXaXRoTm9uY2UgPSAoY2FsbHMsIG5vbmNlKSA9PiB7XG4gIHJldHVybiBbLi4uZnJvbUNhbGxzVG9FeGVjdXRlQ2FsbGRhdGEoY2FsbHMpLCB0b0JpZ0ludChub25jZSkudG9TdHJpbmcoKV07XG59O1xudmFyIHRyYW5zZm9ybUNhbGxzVG9NdWx0aWNhbGxBcnJheXNfY2Fpcm8xID0gKGNhbGxzKSA9PiB7XG4gIGNvbnN0IGNhbGxBcnJheSA9IGNhbGxzLm1hcCgoY2FsbCkgPT4gKHtcbiAgICB0bzogdG9CaWdJbnQoY2FsbC5jb250cmFjdEFkZHJlc3MpLnRvU3RyaW5nKDEwKSxcbiAgICBzZWxlY3RvcjogdG9CaWdJbnQoZ2V0U2VsZWN0b3JGcm9tTmFtZShjYWxsLmVudHJ5cG9pbnQpKS50b1N0cmluZygxMCksXG4gICAgY2FsbGRhdGE6IENhbGxEYXRhLmNvbXBpbGUoY2FsbC5jYWxsZGF0YSB8fCBbXSlcbiAgfSkpO1xuICByZXR1cm4gY2FsbEFycmF5O1xufTtcbnZhciBmcm9tQ2FsbHNUb0V4ZWN1dGVDYWxsZGF0YV9jYWlybzEgPSAoY2FsbHMpID0+IHtcbiAgY29uc3Qgb3JkZXJDYWxscyA9IGNhbGxzLm1hcCgoY2FsbCkgPT4gKHtcbiAgICBjb250cmFjdEFkZHJlc3M6IGNhbGwuY29udHJhY3RBZGRyZXNzLFxuICAgIGVudHJ5cG9pbnQ6IGNhbGwuZW50cnlwb2ludCxcbiAgICBjYWxsZGF0YTogQXJyYXkuaXNBcnJheShjYWxsLmNhbGxkYXRhKSAmJiBcIl9fY29tcGlsZWRfX1wiIGluIGNhbGwuY2FsbGRhdGEgPyBjYWxsLmNhbGxkYXRhIDogQ2FsbERhdGEuY29tcGlsZShjYWxsLmNhbGxkYXRhKVxuICAgIC8vIFJhd0FyZ3NPYmplY3QgfCBSYXdBcmdzQXJyYXkgdHlwZVxuICB9KSk7XG4gIHJldHVybiBDYWxsRGF0YS5jb21waWxlKHsgb3JkZXJDYWxscyB9KTtcbn07XG52YXIgZ2V0RXhlY3V0ZUNhbGxkYXRhID0gKGNhbGxzLCBjYWlyb1ZlcnNpb24gPSBcIjBcIikgPT4ge1xuICBpZiAoY2Fpcm9WZXJzaW9uID09PSBcIjFcIikge1xuICAgIHJldHVybiBmcm9tQ2FsbHNUb0V4ZWN1dGVDYWxsZGF0YV9jYWlybzEoY2FsbHMpO1xuICB9XG4gIHJldHVybiBmcm9tQ2FsbHNUb0V4ZWN1dGVDYWxsZGF0YShjYWxscyk7XG59O1xuXG4vLyBzcmMvdXRpbHMvdHlwZWREYXRhLnRzXG52YXIgdHlwZWREYXRhX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHR5cGVkRGF0YV9leHBvcnRzLCB7XG4gIGVuY29kZURhdGE6ICgpID0+IGVuY29kZURhdGEsXG4gIGVuY29kZVR5cGU6ICgpID0+IGVuY29kZVR5cGUsXG4gIGVuY29kZVZhbHVlOiAoKSA9PiBlbmNvZGVWYWx1ZSxcbiAgZ2V0RGVwZW5kZW5jaWVzOiAoKSA9PiBnZXREZXBlbmRlbmNpZXMsXG4gIGdldE1lc3NhZ2VIYXNoOiAoKSA9PiBnZXRNZXNzYWdlSGFzaCxcbiAgZ2V0U3RydWN0SGFzaDogKCkgPT4gZ2V0U3RydWN0SGFzaCxcbiAgZ2V0VHlwZUhhc2g6ICgpID0+IGdldFR5cGVIYXNoLFxuICBpc01lcmtsZVRyZWVUeXBlOiAoKSA9PiBpc01lcmtsZVRyZWVUeXBlLFxuICBwcmVwYXJlU2VsZWN0b3I6ICgpID0+IHByZXBhcmVTZWxlY3RvclxufSk7XG5cbi8vIHNyYy91dGlscy9tZXJrbGUudHNcbnZhciBtZXJrbGVfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQobWVya2xlX2V4cG9ydHMsIHtcbiAgTWVya2xlVHJlZTogKCkgPT4gTWVya2xlVHJlZSxcbiAgcHJvb2ZNZXJrbGVQYXRoOiAoKSA9PiBwcm9vZk1lcmtsZVBhdGhcbn0pO1xudmFyIE1lcmtsZVRyZWUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGxlYWZIYXNoZXMpIHtcbiAgICB0aGlzLmJyYW5jaGVzID0gW107XG4gICAgdGhpcy5sZWF2ZXMgPSBsZWFmSGFzaGVzO1xuICAgIHRoaXMucm9vdCA9IHRoaXMuYnVpbGQobGVhZkhhc2hlcyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBNZXJrbGUgdHJlZVxuICAgKiBAcGFyYW0gbGVhdmVzIGhleC1zdHJpbmcgYXJyYXlcbiAgICogQHJldHVybnMgZm9ybWF0OiBoZXgtc3RyaW5nOyBNZXJrbGUgdHJlZSByb290XG4gICAqL1xuICBidWlsZChsZWF2ZXMpIHtcbiAgICBpZiAobGVhdmVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIGxlYXZlc1swXTtcbiAgICB9XG4gICAgaWYgKGxlYXZlcy5sZW5ndGggIT09IHRoaXMubGVhdmVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5icmFuY2hlcy5wdXNoKGxlYXZlcyk7XG4gICAgfVxuICAgIGNvbnN0IG5ld0xlYXZlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVhdmVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICBpZiAoaSArIDEgPT09IGxlYXZlcy5sZW5ndGgpIHtcbiAgICAgICAgbmV3TGVhdmVzLnB1c2goTWVya2xlVHJlZS5oYXNoKGxlYXZlc1tpXSwgXCIweDBcIikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3TGVhdmVzLnB1c2goTWVya2xlVHJlZS5oYXNoKGxlYXZlc1tpXSwgbGVhdmVzW2kgKyAxXSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5idWlsZChuZXdMZWF2ZXMpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgcGVkZXJzZW4gaGFzaCBmcm9tIGEgYW5kIGJcbiAgICogQHJldHVybnMgZm9ybWF0OiBoZXgtc3RyaW5nXG4gICAqL1xuICBzdGF0aWMgaGFzaChhLCBiKSB7XG4gICAgY29uc3QgW2FTb3J0ZWQsIGJTb3J0ZWRdID0gW3RvQmlnSW50KGEpLCB0b0JpZ0ludChiKV0uc29ydCgoeCwgeSkgPT4geCA+PSB5ID8gMSA6IC0xKTtcbiAgICByZXR1cm4gc3RhcmtDdXJ2ZS5wZWRlcnNlbihhU29ydGVkLCBiU29ydGVkKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHBhdGggdG8gbGVhZlxuICAgKiBAcGFyYW0gbGVhZiBoZXgtc3RyaW5nXG4gICAqIEBwYXJhbSBicmFuY2ggaGV4LXN0cmluZyBhcnJheVxuICAgKiBAcGFyYW0gaGFzaFBhdGggaGV4LXN0cmluZyBhcnJheVxuICAgKiBAcmV0dXJucyBmb3JtYXQ6IGhleC1zdHJpbmcgYXJyYXlcbiAgICovXG4gIGdldFByb29mKGxlYWYsIGJyYW5jaCA9IHRoaXMubGVhdmVzLCBoYXNoUGF0aCA9IFtdKSB7XG4gICAgY29uc3QgaW5kZXggPSBicmFuY2guaW5kZXhPZihsZWFmKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJsZWFmIG5vdCBmb3VuZFwiKTtcbiAgICB9XG4gICAgaWYgKGJyYW5jaC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiBoYXNoUGF0aDtcbiAgICB9XG4gICAgY29uc3QgaXNMZWZ0ID0gaW5kZXggJSAyID09PSAwO1xuICAgIGNvbnN0IG5lZWRlZEJyYW5jaCA9IChpc0xlZnQgPyBicmFuY2hbaW5kZXggKyAxXSA6IGJyYW5jaFtpbmRleCAtIDFdKSA/PyBcIjB4MFwiO1xuICAgIGNvbnN0IG5ld0hhc2hQYXRoID0gWy4uLmhhc2hQYXRoLCBuZWVkZWRCcmFuY2hdO1xuICAgIGNvbnN0IGN1cnJlbnRCcmFuY2hMZXZlbEluZGV4ID0gdGhpcy5sZWF2ZXMubGVuZ3RoID09PSBicmFuY2gubGVuZ3RoID8gLTEgOiB0aGlzLmJyYW5jaGVzLmZpbmRJbmRleCgoYikgPT4gYi5sZW5ndGggPT09IGJyYW5jaC5sZW5ndGgpO1xuICAgIGNvbnN0IG5leHRCcmFuY2ggPSB0aGlzLmJyYW5jaGVzW2N1cnJlbnRCcmFuY2hMZXZlbEluZGV4ICsgMV0gPz8gW3RoaXMucm9vdF07XG4gICAgcmV0dXJuIHRoaXMuZ2V0UHJvb2YoXG4gICAgICBNZXJrbGVUcmVlLmhhc2goaXNMZWZ0ID8gbGVhZiA6IG5lZWRlZEJyYW5jaCwgaXNMZWZ0ID8gbmVlZGVkQnJhbmNoIDogbGVhZiksXG4gICAgICBuZXh0QnJhbmNoLFxuICAgICAgbmV3SGFzaFBhdGhcbiAgICApO1xuICB9XG59O1xuZnVuY3Rpb24gcHJvb2ZNZXJrbGVQYXRoKHJvb3QsIGxlYWYsIHBhdGgpIHtcbiAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHJvb3QgPT09IGxlYWY7XG4gIH1cbiAgY29uc3QgW25leHQsIC4uLnJlc3RdID0gcGF0aDtcbiAgcmV0dXJuIHByb29mTWVya2xlUGF0aChyb290LCBNZXJrbGVUcmVlLmhhc2gobGVhZiwgbmV4dCksIHJlc3QpO1xufVxuXG4vLyBzcmMvdXRpbHMvdHlwZWREYXRhLnRzXG5mdW5jdGlvbiBnZXRIZXgodmFsdWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gdG9IZXgodmFsdWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIHRvSGV4KGVuY29kZVNob3J0U3RyaW5nKHZhbHVlKSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBCaWdOdW1iZXJpc2g6ICR7dmFsdWV9YCk7XG4gIH1cbn1cbnZhciB2YWxpZGF0ZVR5cGVkRGF0YSA9IChkYXRhKSA9PiB7XG4gIGNvbnN0IHR5cGVkRGF0YSA9IGRhdGE7XG4gIGNvbnN0IHZhbGlkID0gQm9vbGVhbih0eXBlZERhdGEudHlwZXMgJiYgdHlwZWREYXRhLnByaW1hcnlUeXBlICYmIHR5cGVkRGF0YS5tZXNzYWdlKTtcbiAgcmV0dXJuIHZhbGlkO1xufTtcbmZ1bmN0aW9uIHByZXBhcmVTZWxlY3RvcihzZWxlY3Rvcikge1xuICByZXR1cm4gaXNIZXgoc2VsZWN0b3IpID8gc2VsZWN0b3IgOiBnZXRTZWxlY3RvckZyb21OYW1lKHNlbGVjdG9yKTtcbn1cbmZ1bmN0aW9uIGlzTWVya2xlVHJlZVR5cGUodHlwZSkge1xuICByZXR1cm4gdHlwZS50eXBlID09PSBcIm1lcmtsZXRyZWVcIjtcbn1cbnZhciBnZXREZXBlbmRlbmNpZXMgPSAodHlwZXMsIHR5cGUsIGRlcGVuZGVuY2llcyA9IFtdKSA9PiB7XG4gIGlmICh0eXBlW3R5cGUubGVuZ3RoIC0gMV0gPT09IFwiKlwiKSB7XG4gICAgdHlwZSA9IHR5cGUuc2xpY2UoMCwgLTEpO1xuICB9XG4gIGlmIChkZXBlbmRlbmNpZXMuaW5jbHVkZXModHlwZSkpIHtcbiAgICByZXR1cm4gZGVwZW5kZW5jaWVzO1xuICB9XG4gIGlmICghdHlwZXNbdHlwZV0pIHtcbiAgICByZXR1cm4gZGVwZW5kZW5jaWVzO1xuICB9XG4gIHJldHVybiBbXG4gICAgdHlwZSxcbiAgICAuLi50eXBlc1t0eXBlXS5yZWR1Y2UoXG4gICAgICAocHJldmlvdXMsIHQpID0+IFtcbiAgICAgICAgLi4ucHJldmlvdXMsXG4gICAgICAgIC4uLmdldERlcGVuZGVuY2llcyh0eXBlcywgdC50eXBlLCBwcmV2aW91cykuZmlsdGVyKFxuICAgICAgICAgIChkZXBlbmRlbmN5KSA9PiAhcHJldmlvdXMuaW5jbHVkZXMoZGVwZW5kZW5jeSlcbiAgICAgICAgKVxuICAgICAgXSxcbiAgICAgIFtdXG4gICAgKVxuICBdO1xufTtcbmZ1bmN0aW9uIGdldE1lcmtsZVRyZWVUeXBlKHR5cGVzLCBjdHgpIHtcbiAgaWYgKGN0eC5wYXJlbnQgJiYgY3R4LmtleSkge1xuICAgIGNvbnN0IHBhcmVudFR5cGUgPSB0eXBlc1tjdHgucGFyZW50XTtcbiAgICBjb25zdCBtZXJrbGVUeXBlID0gcGFyZW50VHlwZS5maW5kKCh0KSA9PiB0Lm5hbWUgPT09IGN0eC5rZXkpO1xuICAgIGNvbnN0IGlzTWVya2xlVHJlZSA9IGlzTWVya2xlVHJlZVR5cGUobWVya2xlVHlwZSk7XG4gICAgaWYgKCFpc01lcmtsZVRyZWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtjdHgua2V5fSBpcyBub3QgYSBtZXJrbGUgdHJlZWApO1xuICAgIH1cbiAgICBpZiAobWVya2xlVHlwZS5jb250YWlucy5lbmRzV2l0aChcIipcIikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTWVya2xlIHRyZWUgY29udGFpbiBwcm9wZXJ0eSBtdXN0IG5vdCBiZSBhbiBhcnJheSBidXQgd2FzIGdpdmVuICR7Y3R4LmtleX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmtsZVR5cGUuY29udGFpbnM7XG4gIH1cbiAgcmV0dXJuIFwicmF3XCI7XG59XG52YXIgZW5jb2RlVHlwZSA9ICh0eXBlcywgdHlwZSkgPT4ge1xuICBjb25zdCBbcHJpbWFyeSwgLi4uZGVwZW5kZW5jaWVzXSA9IGdldERlcGVuZGVuY2llcyh0eXBlcywgdHlwZSk7XG4gIGNvbnN0IG5ld1R5cGVzID0gIXByaW1hcnkgPyBbXSA6IFtwcmltYXJ5LCAuLi5kZXBlbmRlbmNpZXMuc29ydCgpXTtcbiAgcmV0dXJuIG5ld1R5cGVzLm1hcCgoZGVwZW5kZW5jeSkgPT4ge1xuICAgIHJldHVybiBgJHtkZXBlbmRlbmN5fSgke3R5cGVzW2RlcGVuZGVuY3ldLm1hcCgodCkgPT4gYCR7dC5uYW1lfToke3QudHlwZX1gKX0pYDtcbiAgfSkuam9pbihcIlwiKTtcbn07XG52YXIgZ2V0VHlwZUhhc2ggPSAodHlwZXMsIHR5cGUpID0+IHtcbiAgcmV0dXJuIGdldFNlbGVjdG9yRnJvbU5hbWUoZW5jb2RlVHlwZSh0eXBlcywgdHlwZSkpO1xufTtcbnZhciBlbmNvZGVWYWx1ZSA9ICh0eXBlcywgdHlwZSwgZGF0YSwgY3R4ID0ge30pID0+IHtcbiAgaWYgKHR5cGVzW3R5cGVdKSB7XG4gICAgcmV0dXJuIFt0eXBlLCBnZXRTdHJ1Y3RIYXNoKHR5cGVzLCB0eXBlLCBkYXRhKV07XG4gIH1cbiAgaWYgKE9iamVjdC5rZXlzKHR5cGVzKS5tYXAoKHgpID0+IGAke3h9KmApLmluY2x1ZGVzKHR5cGUpKSB7XG4gICAgY29uc3Qgc3RydWN0SGFzaGVzID0gZGF0YS5tYXAoKHN0cnVjdCkgPT4ge1xuICAgICAgcmV0dXJuIGdldFN0cnVjdEhhc2godHlwZXMsIHR5cGUuc2xpY2UoMCwgLTEpLCBzdHJ1Y3QpO1xuICAgIH0pO1xuICAgIHJldHVybiBbdHlwZSwgY29tcHV0ZUhhc2hPbkVsZW1lbnRzKHN0cnVjdEhhc2hlcyldO1xuICB9XG4gIGlmICh0eXBlID09PSBcIm1lcmtsZXRyZWVcIikge1xuICAgIGNvbnN0IG1lcmtsZVRyZWVUeXBlID0gZ2V0TWVya2xlVHJlZVR5cGUodHlwZXMsIGN0eCk7XG4gICAgY29uc3Qgc3RydWN0SGFzaGVzID0gZGF0YS5tYXAoKHN0cnVjdCkgPT4ge1xuICAgICAgcmV0dXJuIGVuY29kZVZhbHVlKHR5cGVzLCBtZXJrbGVUcmVlVHlwZSwgc3RydWN0KVsxXTtcbiAgICB9KTtcbiAgICBjb25zdCB7IHJvb3QgfSA9IG5ldyBNZXJrbGVUcmVlKHN0cnVjdEhhc2hlcyk7XG4gICAgcmV0dXJuIFtcImZlbHRcIiwgcm9vdF07XG4gIH1cbiAgaWYgKHR5cGUgPT09IFwiZmVsdCpcIikge1xuICAgIHJldHVybiBbXCJmZWx0KlwiLCBjb21wdXRlSGFzaE9uRWxlbWVudHMoZGF0YSldO1xuICB9XG4gIGlmICh0eXBlID09PSBcInNlbGVjdG9yXCIpIHtcbiAgICByZXR1cm4gW1wiZmVsdFwiLCBwcmVwYXJlU2VsZWN0b3IoZGF0YSldO1xuICB9XG4gIHJldHVybiBbdHlwZSwgZ2V0SGV4KGRhdGEpXTtcbn07XG52YXIgZW5jb2RlRGF0YSA9ICh0eXBlcywgdHlwZSwgZGF0YSkgPT4ge1xuICBjb25zdCBbcmV0dXJuVHlwZXMsIHZhbHVlc10gPSB0eXBlc1t0eXBlXS5yZWR1Y2UoXG4gICAgKFt0cywgdnNdLCBmaWVsZCkgPT4ge1xuICAgICAgaWYgKGRhdGFbZmllbGQubmFtZV0gPT09IHZvaWQgMCB8fCBkYXRhW2ZpZWxkLm5hbWVdID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGVuY29kZSBkYXRhOiBtaXNzaW5nIGRhdGEgZm9yICcke2ZpZWxkLm5hbWV9J2ApO1xuICAgICAgfVxuICAgICAgY29uc3QgdmFsdWUgPSBkYXRhW2ZpZWxkLm5hbWVdO1xuICAgICAgY29uc3QgW3QsIGVuY29kZWRWYWx1ZV0gPSBlbmNvZGVWYWx1ZSh0eXBlcywgZmllbGQudHlwZSwgdmFsdWUsIHtcbiAgICAgICAgcGFyZW50OiB0eXBlLFxuICAgICAgICBrZXk6IGZpZWxkLm5hbWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgWy4uLnRzLCB0XSxcbiAgICAgICAgWy4uLnZzLCBlbmNvZGVkVmFsdWVdXG4gICAgICBdO1xuICAgIH0sXG4gICAgW1tcImZlbHRcIl0sIFtnZXRUeXBlSGFzaCh0eXBlcywgdHlwZSldXVxuICApO1xuICByZXR1cm4gW3JldHVyblR5cGVzLCB2YWx1ZXNdO1xufTtcbnZhciBnZXRTdHJ1Y3RIYXNoID0gKHR5cGVzLCB0eXBlLCBkYXRhKSA9PiB7XG4gIHJldHVybiBjb21wdXRlSGFzaE9uRWxlbWVudHMoZW5jb2RlRGF0YSh0eXBlcywgdHlwZSwgZGF0YSlbMV0pO1xufTtcbnZhciBnZXRNZXNzYWdlSGFzaCA9ICh0eXBlZERhdGEsIGFjY291bnQpID0+IHtcbiAgaWYgKCF2YWxpZGF0ZVR5cGVkRGF0YSh0eXBlZERhdGEpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVHlwZWQgZGF0YSBkb2VzIG5vdCBtYXRjaCBKU09OIHNjaGVtYVwiKTtcbiAgfVxuICBjb25zdCBtZXNzYWdlID0gW1xuICAgIGVuY29kZVNob3J0U3RyaW5nKFwiU3RhcmtOZXQgTWVzc2FnZVwiKSxcbiAgICBnZXRTdHJ1Y3RIYXNoKHR5cGVkRGF0YS50eXBlcywgXCJTdGFya05ldERvbWFpblwiLCB0eXBlZERhdGEuZG9tYWluKSxcbiAgICBhY2NvdW50LFxuICAgIGdldFN0cnVjdEhhc2godHlwZWREYXRhLnR5cGVzLCB0eXBlZERhdGEucHJpbWFyeVR5cGUsIHR5cGVkRGF0YS5tZXNzYWdlKVxuICBdO1xuICByZXR1cm4gY29tcHV0ZUhhc2hPbkVsZW1lbnRzKG1lc3NhZ2UpO1xufTtcblxuLy8gc3JjL3NpZ25lci9kZWZhdWx0LnRzXG52YXIgU2lnbmVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihwayA9IHN0YXJrQ3VydmUudXRpbHMucmFuZG9tUHJpdmF0ZUtleSgpKSB7XG4gICAgdGhpcy5wayA9IHBrIGluc3RhbmNlb2YgVWludDhBcnJheSA/IGJ1ZjJoZXgocGspIDogdG9IZXgocGspO1xuICB9XG4gIGFzeW5jIGdldFB1YktleSgpIHtcbiAgICByZXR1cm4gc3RhcmtDdXJ2ZS5nZXRTdGFya0tleSh0aGlzLnBrKTtcbiAgfVxuICBhc3luYyBzaWduTWVzc2FnZSh0eXBlZERhdGEsIGFjY291bnRBZGRyZXNzKSB7XG4gICAgY29uc3QgbXNnSGFzaCA9IGdldE1lc3NhZ2VIYXNoKHR5cGVkRGF0YSwgYWNjb3VudEFkZHJlc3MpO1xuICAgIHJldHVybiBzdGFya0N1cnZlLnNpZ24obXNnSGFzaCwgdGhpcy5wayk7XG4gIH1cbiAgYXN5bmMgc2lnblRyYW5zYWN0aW9uKHRyYW5zYWN0aW9ucywgdHJhbnNhY3Rpb25zRGV0YWlsLCBhYmlzKSB7XG4gICAgaWYgKGFiaXMgJiYgYWJpcy5sZW5ndGggIT09IHRyYW5zYWN0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkFCSSBtdXN0IGJlIHByb3ZpZGVkIGZvciBlYWNoIHRyYW5zYWN0aW9uIG9yIG5vIHRyYW5zYWN0aW9uXCIpO1xuICAgIH1cbiAgICBjb25zdCBjYWxsZGF0YSA9IGdldEV4ZWN1dGVDYWxsZGF0YSh0cmFuc2FjdGlvbnMsIHRyYW5zYWN0aW9uc0RldGFpbC5jYWlyb1ZlcnNpb24pO1xuICAgIGNvbnN0IG1zZ0hhc2ggPSBjYWxjdWxhdGVUcmFuc2FjdGlvbkhhc2goXG4gICAgICB0cmFuc2FjdGlvbnNEZXRhaWwud2FsbGV0QWRkcmVzcyxcbiAgICAgIHRyYW5zYWN0aW9uc0RldGFpbC52ZXJzaW9uLFxuICAgICAgY2FsbGRhdGEsXG4gICAgICB0cmFuc2FjdGlvbnNEZXRhaWwubWF4RmVlLFxuICAgICAgdHJhbnNhY3Rpb25zRGV0YWlsLmNoYWluSWQsXG4gICAgICB0cmFuc2FjdGlvbnNEZXRhaWwubm9uY2VcbiAgICApO1xuICAgIHJldHVybiBzdGFya0N1cnZlLnNpZ24obXNnSGFzaCwgdGhpcy5wayk7XG4gIH1cbiAgYXN5bmMgc2lnbkRlcGxveUFjY291bnRUcmFuc2FjdGlvbih7XG4gICAgY2xhc3NIYXNoLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgICBjb25zdHJ1Y3RvckNhbGxkYXRhLFxuICAgIGFkZHJlc3NTYWx0LFxuICAgIG1heEZlZSxcbiAgICB2ZXJzaW9uLFxuICAgIGNoYWluSWQsXG4gICAgbm9uY2VcbiAgfSkge1xuICAgIGNvbnN0IG1zZ0hhc2ggPSBjYWxjdWxhdGVEZXBsb3lBY2NvdW50VHJhbnNhY3Rpb25IYXNoKFxuICAgICAgY29udHJhY3RBZGRyZXNzLFxuICAgICAgY2xhc3NIYXNoLFxuICAgICAgQ2FsbERhdGEuY29tcGlsZShjb25zdHJ1Y3RvckNhbGxkYXRhKSxcbiAgICAgIGFkZHJlc3NTYWx0LFxuICAgICAgdmVyc2lvbixcbiAgICAgIG1heEZlZSxcbiAgICAgIGNoYWluSWQsXG4gICAgICBub25jZVxuICAgICk7XG4gICAgcmV0dXJuIHN0YXJrQ3VydmUuc2lnbihtc2dIYXNoLCB0aGlzLnBrKTtcbiAgfVxuICBhc3luYyBzaWduRGVjbGFyZVRyYW5zYWN0aW9uKHtcbiAgICBjbGFzc0hhc2gsXG4gICAgc2VuZGVyQWRkcmVzcyxcbiAgICBjaGFpbklkLFxuICAgIG1heEZlZSxcbiAgICB2ZXJzaW9uLFxuICAgIG5vbmNlLFxuICAgIGNvbXBpbGVkQ2xhc3NIYXNoXG4gIH0pIHtcbiAgICBjb25zdCBtc2dIYXNoID0gY2FsY3VsYXRlRGVjbGFyZVRyYW5zYWN0aW9uSGFzaChcbiAgICAgIGNsYXNzSGFzaCxcbiAgICAgIHNlbmRlckFkZHJlc3MsXG4gICAgICB2ZXJzaW9uLFxuICAgICAgbWF4RmVlLFxuICAgICAgY2hhaW5JZCxcbiAgICAgIG5vbmNlLFxuICAgICAgY29tcGlsZWRDbGFzc0hhc2hcbiAgICApO1xuICAgIHJldHVybiBzdGFya0N1cnZlLnNpZ24obXNnSGFzaCwgdGhpcy5wayk7XG4gIH1cbn07XG5cbi8vIHNyYy91dGlscy9ldmVudHMudHNcbmZ1bmN0aW9uIHBhcnNlVURDRXZlbnQodHhSZWNlaXB0KSB7XG4gIGlmICghdHhSZWNlaXB0LmV2ZW50cykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlVEQyBlbWl0dGVkIGV2ZW50IGlzIGVtcHR5XCIpO1xuICB9XG4gIGNvbnN0IGV2ZW50ID0gdHhSZWNlaXB0LmV2ZW50cy5maW5kKFxuICAgIChpdCkgPT4gY2xlYW5IZXgoaXQuZnJvbV9hZGRyZXNzKSA9PT0gY2xlYW5IZXgoVURDLkFERFJFU1MpXG4gICkgfHwge1xuICAgIGRhdGE6IFtdXG4gIH07XG4gIHJldHVybiB7XG4gICAgdHJhbnNhY3Rpb25faGFzaDogdHhSZWNlaXB0LnRyYW5zYWN0aW9uX2hhc2gsXG4gICAgY29udHJhY3RfYWRkcmVzczogZXZlbnQuZGF0YVswXSxcbiAgICBhZGRyZXNzOiBldmVudC5kYXRhWzBdLFxuICAgIGRlcGxveWVyOiBldmVudC5kYXRhWzFdLFxuICAgIHVuaXF1ZTogZXZlbnQuZGF0YVsyXSxcbiAgICBjbGFzc0hhc2g6IGV2ZW50LmRhdGFbM10sXG4gICAgY2FsbGRhdGFfbGVuOiBldmVudC5kYXRhWzRdLFxuICAgIGNhbGxkYXRhOiBldmVudC5kYXRhLnNsaWNlKDUsIDUgKyBwYXJzZUludChldmVudC5kYXRhWzRdLCAxNikpLFxuICAgIHNhbHQ6IGV2ZW50LmRhdGFbZXZlbnQuZGF0YS5sZW5ndGggLSAxXVxuICB9O1xufVxuXG4vLyBzcmMvYWNjb3VudC9kZWZhdWx0LnRzXG52YXIgQWNjb3VudCA9IGNsYXNzIGV4dGVuZHMgUHJvdmlkZXIge1xuICBjb25zdHJ1Y3Rvcihwcm92aWRlck9yT3B0aW9ucywgYWRkcmVzcywgcGtPclNpZ25lciwgY2Fpcm9WZXJzaW9uKSB7XG4gICAgc3VwZXIocHJvdmlkZXJPck9wdGlvbnMpO1xuICAgIHRoaXMuZGVwbG95U2VsZiA9IHRoaXMuZGVwbG95QWNjb3VudDtcbiAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzLnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy5zaWduZXIgPSB0eXBlb2YgcGtPclNpZ25lciA9PT0gXCJzdHJpbmdcIiB8fCBwa09yU2lnbmVyIGluc3RhbmNlb2YgVWludDhBcnJheSA/IG5ldyBTaWduZXIocGtPclNpZ25lcikgOiBwa09yU2lnbmVyO1xuICAgIGlmIChjYWlyb1ZlcnNpb24pIHtcbiAgICAgIHRoaXMuY2Fpcm9WZXJzaW9uID0gY2Fpcm9WZXJzaW9uLnRvU3RyaW5nKCk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGdldE5vbmNlKGJsb2NrSWRlbnRpZmllcikge1xuICAgIHJldHVybiBzdXBlci5nZXROb25jZUZvckFkZHJlc3ModGhpcy5hZGRyZXNzLCBibG9ja0lkZW50aWZpZXIpO1xuICB9XG4gIGFzeW5jIGdldE5vbmNlU2FmZShub25jZSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gdG9CaWdJbnQobm9uY2UgPz8gYXdhaXQgdGhpcy5nZXROb25jZSgpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIDBuO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0cmlldmVzIHRoZSBDYWlybyB2ZXJzaW9uIGZyb20gdGhlIG5ldHdvcmsgYW5kIHNldHMgYGNhaXJvVmVyc2lvbmAgaWYgbm90IGFscmVhZHkgc2V0IGluIHRoZSBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gY2xhc3NIYXNoIGlmIHByb3ZpZGVkIGRldGVjdHMgQ2Fpcm8gdmVyc2lvbiBmcm9tIGNsYXNzSGFzaCwgb3RoZXJ3aXNlIGZyb20gdGhlIGFjY291bnQgYWRkcmVzc1xuICAgKi9cbiAgYXN5bmMgZ2V0Q2Fpcm9WZXJzaW9uKGNsYXNzSGFzaCkge1xuICAgIGlmICghdGhpcy5jYWlyb1ZlcnNpb24pIHtcbiAgICAgIGNvbnN0IHsgY2Fpcm8gfSA9IGNsYXNzSGFzaCA/IGF3YWl0IHN1cGVyLmdldENvbnRyYWN0VmVyc2lvbih2b2lkIDAsIGNsYXNzSGFzaCkgOiBhd2FpdCBzdXBlci5nZXRDb250cmFjdFZlcnNpb24odGhpcy5hZGRyZXNzKTtcbiAgICAgIHRoaXMuY2Fpcm9WZXJzaW9uID0gY2Fpcm87XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNhaXJvVmVyc2lvbjtcbiAgfVxuICBhc3luYyBlc3RpbWF0ZUZlZShjYWxscywgZXN0aW1hdGVGZWVEZXRhaWxzKSB7XG4gICAgcmV0dXJuIHRoaXMuZXN0aW1hdGVJbnZva2VGZWUoY2FsbHMsIGVzdGltYXRlRmVlRGV0YWlscyk7XG4gIH1cbiAgYXN5bmMgZXN0aW1hdGVJbnZva2VGZWUoY2FsbHMsIHsgbm9uY2U6IHByb3ZpZGVkTm9uY2UsIGJsb2NrSWRlbnRpZmllciwgc2tpcFZhbGlkYXRlIH0gPSB7fSkge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9ucyA9IEFycmF5LmlzQXJyYXkoY2FsbHMpID8gY2FsbHMgOiBbY2FsbHNdO1xuICAgIGNvbnN0IG5vbmNlID0gdG9CaWdJbnQocHJvdmlkZWROb25jZSA/PyBhd2FpdCB0aGlzLmdldE5vbmNlKCkpO1xuICAgIGNvbnN0IHZlcnNpb24gPSB0b0JpZ0ludChmZWVUcmFuc2FjdGlvblZlcnNpb24pO1xuICAgIGNvbnN0IGNoYWluSWQgPSBhd2FpdCB0aGlzLmdldENoYWluSWQoKTtcbiAgICBjb25zdCBzaWduZXJEZXRhaWxzID0ge1xuICAgICAgd2FsbGV0QWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgbm9uY2UsXG4gICAgICBtYXhGZWU6IFpFUk8sXG4gICAgICB2ZXJzaW9uLFxuICAgICAgY2hhaW5JZCxcbiAgICAgIGNhaXJvVmVyc2lvbjogYXdhaXQgdGhpcy5nZXRDYWlyb1ZlcnNpb24oKVxuICAgIH07XG4gICAgY29uc3QgaW52b2NhdGlvbiA9IGF3YWl0IHRoaXMuYnVpbGRJbnZvY2F0aW9uKHRyYW5zYWN0aW9ucywgc2lnbmVyRGV0YWlscyk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlci5nZXRJbnZva2VFc3RpbWF0ZUZlZShcbiAgICAgIHsgLi4uaW52b2NhdGlvbiB9LFxuICAgICAgeyB2ZXJzaW9uLCBub25jZSB9LFxuICAgICAgYmxvY2tJZGVudGlmaWVyLFxuICAgICAgc2tpcFZhbGlkYXRlXG4gICAgKTtcbiAgICBjb25zdCBzdWdnZXN0ZWRNYXhGZWUgPSBlc3RpbWF0ZWRGZWVUb01heEZlZShyZXNwb25zZS5vdmVyYWxsX2ZlZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnJlc3BvbnNlLFxuICAgICAgc3VnZ2VzdGVkTWF4RmVlXG4gICAgfTtcbiAgfVxuICBhc3luYyBlc3RpbWF0ZURlY2xhcmVGZWUoeyBjb250cmFjdCwgY2xhc3NIYXNoOiBwcm92aWRlZENsYXNzSGFzaCwgY2FzbSwgY29tcGlsZWRDbGFzc0hhc2ggfSwgeyBibG9ja0lkZW50aWZpZXIsIG5vbmNlOiBwcm92aWRlZE5vbmNlLCBza2lwVmFsaWRhdGUgfSA9IHt9KSB7XG4gICAgY29uc3Qgbm9uY2UgPSB0b0JpZ0ludChwcm92aWRlZE5vbmNlID8/IGF3YWl0IHRoaXMuZ2V0Tm9uY2UoKSk7XG4gICAgY29uc3QgdmVyc2lvbiA9ICFpc1NpZXJyYShjb250cmFjdCkgPyBmZWVUcmFuc2FjdGlvblZlcnNpb24gOiBmZWVUcmFuc2FjdGlvblZlcnNpb25fMjtcbiAgICBjb25zdCBjaGFpbklkID0gYXdhaXQgdGhpcy5nZXRDaGFpbklkKCk7XG4gICAgY29uc3QgZGVjbGFyZUNvbnRyYWN0VHJhbnNhY3Rpb24gPSBhd2FpdCB0aGlzLmJ1aWxkRGVjbGFyZVBheWxvYWQoXG4gICAgICB7IGNsYXNzSGFzaDogcHJvdmlkZWRDbGFzc0hhc2gsIGNvbnRyYWN0LCBjYXNtLCBjb21waWxlZENsYXNzSGFzaCB9LFxuICAgICAge1xuICAgICAgICBub25jZSxcbiAgICAgICAgY2hhaW5JZCxcbiAgICAgICAgdmVyc2lvbixcbiAgICAgICAgd2FsbGV0QWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgICBtYXhGZWU6IFpFUk8sXG4gICAgICAgIGNhaXJvVmVyc2lvbjogdm9pZCAwXG4gICAgICAgIC8vIHVudXNlZCBwYXJhbWV0ZXJcbiAgICAgIH1cbiAgICApO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3VwZXIuZ2V0RGVjbGFyZUVzdGltYXRlRmVlKFxuICAgICAgZGVjbGFyZUNvbnRyYWN0VHJhbnNhY3Rpb24sXG4gICAgICB7IHZlcnNpb24sIG5vbmNlIH0sXG4gICAgICBibG9ja0lkZW50aWZpZXIsXG4gICAgICBza2lwVmFsaWRhdGVcbiAgICApO1xuICAgIGNvbnN0IHN1Z2dlc3RlZE1heEZlZSA9IGVzdGltYXRlZEZlZVRvTWF4RmVlKHJlc3BvbnNlLm92ZXJhbGxfZmVlKTtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ucmVzcG9uc2UsXG4gICAgICBzdWdnZXN0ZWRNYXhGZWVcbiAgICB9O1xuICB9XG4gIGFzeW5jIGVzdGltYXRlQWNjb3VudERlcGxveUZlZSh7XG4gICAgY2xhc3NIYXNoLFxuICAgIGFkZHJlc3NTYWx0ID0gMCxcbiAgICBjb25zdHJ1Y3RvckNhbGxkYXRhID0gW10sXG4gICAgY29udHJhY3RBZGRyZXNzOiBwcm92aWRlZENvbnRyYWN0QWRkcmVzc1xuICB9LCB7IGJsb2NrSWRlbnRpZmllciwgc2tpcFZhbGlkYXRlIH0gPSB7fSkge1xuICAgIGNvbnN0IHZlcnNpb24gPSB0b0JpZ0ludChmZWVUcmFuc2FjdGlvblZlcnNpb24pO1xuICAgIGNvbnN0IG5vbmNlID0gWkVSTztcbiAgICBjb25zdCBjaGFpbklkID0gYXdhaXQgdGhpcy5nZXRDaGFpbklkKCk7XG4gICAgY29uc3QgcGF5bG9hZCA9IGF3YWl0IHRoaXMuYnVpbGRBY2NvdW50RGVwbG95UGF5bG9hZChcbiAgICAgIHsgY2xhc3NIYXNoLCBhZGRyZXNzU2FsdCwgY29uc3RydWN0b3JDYWxsZGF0YSwgY29udHJhY3RBZGRyZXNzOiBwcm92aWRlZENvbnRyYWN0QWRkcmVzcyB9LFxuICAgICAge1xuICAgICAgICBub25jZSxcbiAgICAgICAgY2hhaW5JZCxcbiAgICAgICAgdmVyc2lvbixcbiAgICAgICAgd2FsbGV0QWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgICAvLyB1bnVzZWQgcGFyYW1ldGVyXG4gICAgICAgIG1heEZlZTogWkVSTyxcbiAgICAgICAgY2Fpcm9WZXJzaW9uOiB2b2lkIDBcbiAgICAgICAgLy8gdW51c2VkIHBhcmFtZXRlclxuICAgICAgfVxuICAgICk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlci5nZXREZXBsb3lBY2NvdW50RXN0aW1hdGVGZWUoXG4gICAgICB7IC4uLnBheWxvYWQgfSxcbiAgICAgIHsgdmVyc2lvbiwgbm9uY2UgfSxcbiAgICAgIGJsb2NrSWRlbnRpZmllcixcbiAgICAgIHNraXBWYWxpZGF0ZVxuICAgICk7XG4gICAgY29uc3Qgc3VnZ2VzdGVkTWF4RmVlID0gZXN0aW1hdGVkRmVlVG9NYXhGZWUocmVzcG9uc2Uub3ZlcmFsbF9mZWUpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5yZXNwb25zZSxcbiAgICAgIHN1Z2dlc3RlZE1heEZlZVxuICAgIH07XG4gIH1cbiAgYXN5bmMgZXN0aW1hdGVEZXBsb3lGZWUocGF5bG9hZCwgdHJhbnNhY3Rpb25zRGV0YWlsKSB7XG4gICAgY29uc3QgY2FsbHMgPSB0aGlzLmJ1aWxkVURDQ29udHJhY3RQYXlsb2FkKHBheWxvYWQpO1xuICAgIHJldHVybiB0aGlzLmVzdGltYXRlSW52b2tlRmVlKGNhbGxzLCB0cmFuc2FjdGlvbnNEZXRhaWwpO1xuICB9XG4gIGFzeW5jIGVzdGltYXRlRmVlQnVsayhpbnZvY2F0aW9ucywgeyBub25jZSwgYmxvY2tJZGVudGlmaWVyLCBza2lwVmFsaWRhdGUgfSA9IHt9KSB7XG4gICAgY29uc3QgYWNjb3VudEludm9jYXRpb25zID0gYXdhaXQgdGhpcy5hY2NvdW50SW52b2NhdGlvbnNGYWN0b3J5KGludm9jYXRpb25zLCB7XG4gICAgICB2ZXJzaW9uczogW2ZlZVRyYW5zYWN0aW9uVmVyc2lvbiwgZmVlVHJhbnNhY3Rpb25WZXJzaW9uXzJdLFxuICAgICAgbm9uY2UsXG4gICAgICBibG9ja0lkZW50aWZpZXJcbiAgICB9KTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVyLmdldEVzdGltYXRlRmVlQnVsayhhY2NvdW50SW52b2NhdGlvbnMsIHtcbiAgICAgIGJsb2NrSWRlbnRpZmllcixcbiAgICAgIHNraXBWYWxpZGF0ZVxuICAgIH0pO1xuICAgIHJldHVybiBbXS5jb25jYXQocmVzcG9uc2UpLm1hcCgoZWxlbSkgPT4ge1xuICAgICAgY29uc3Qgc3VnZ2VzdGVkTWF4RmVlID0gZXN0aW1hdGVkRmVlVG9NYXhGZWUoZWxlbS5vdmVyYWxsX2ZlZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5lbGVtLFxuICAgICAgICBzdWdnZXN0ZWRNYXhGZWVcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgYnVpbGRJbnZvY2F0aW9uKGNhbGwsIHNpZ25lckRldGFpbHMpIHtcbiAgICBjb25zdCBjYWxsZGF0YSA9IGdldEV4ZWN1dGVDYWxsZGF0YShjYWxsLCBhd2FpdCB0aGlzLmdldENhaXJvVmVyc2lvbigpKTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCB0aGlzLnNpZ25lci5zaWduVHJhbnNhY3Rpb24oY2FsbCwgc2lnbmVyRGV0YWlscyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRyYWN0QWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgY2FsbGRhdGEsXG4gICAgICBzaWduYXR1cmVcbiAgICB9O1xuICB9XG4gIGFzeW5jIGV4ZWN1dGUoY2FsbHMsIGFiaXMgPSB2b2lkIDAsIHRyYW5zYWN0aW9uc0RldGFpbCA9IHt9KSB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb25zID0gQXJyYXkuaXNBcnJheShjYWxscykgPyBjYWxscyA6IFtjYWxsc107XG4gICAgY29uc3Qgbm9uY2UgPSB0b0JpZ0ludCh0cmFuc2FjdGlvbnNEZXRhaWwubm9uY2UgPz8gYXdhaXQgdGhpcy5nZXROb25jZSgpKTtcbiAgICBjb25zdCBtYXhGZWUgPSB0cmFuc2FjdGlvbnNEZXRhaWwubWF4RmVlID8/IGF3YWl0IHRoaXMuZ2V0U3VnZ2VzdGVkTWF4RmVlKFxuICAgICAgeyB0eXBlOiBcIklOVk9LRV9GVU5DVElPTlwiIC8qIElOVk9LRSAqLywgcGF5bG9hZDogY2FsbHMgfSxcbiAgICAgIHRyYW5zYWN0aW9uc0RldGFpbFxuICAgICk7XG4gICAgY29uc3QgdmVyc2lvbiA9IHRvQmlnSW50KHRyYW5zYWN0aW9uVmVyc2lvbik7XG4gICAgY29uc3QgY2hhaW5JZCA9IGF3YWl0IHRoaXMuZ2V0Q2hhaW5JZCgpO1xuICAgIGNvbnN0IHNpZ25lckRldGFpbHMgPSB7XG4gICAgICB3YWxsZXRBZGRyZXNzOiB0aGlzLmFkZHJlc3MsXG4gICAgICBub25jZSxcbiAgICAgIG1heEZlZSxcbiAgICAgIHZlcnNpb24sXG4gICAgICBjaGFpbklkLFxuICAgICAgY2Fpcm9WZXJzaW9uOiBhd2FpdCB0aGlzLmdldENhaXJvVmVyc2lvbigpXG4gICAgfTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCB0aGlzLnNpZ25lci5zaWduVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25zLCBzaWduZXJEZXRhaWxzLCBhYmlzKTtcbiAgICBjb25zdCBjYWxsZGF0YSA9IGdldEV4ZWN1dGVDYWxsZGF0YSh0cmFuc2FjdGlvbnMsIGF3YWl0IHRoaXMuZ2V0Q2Fpcm9WZXJzaW9uKCkpO1xuICAgIHJldHVybiB0aGlzLmludm9rZUZ1bmN0aW9uKFxuICAgICAgeyBjb250cmFjdEFkZHJlc3M6IHRoaXMuYWRkcmVzcywgY2FsbGRhdGEsIHNpZ25hdHVyZSB9LFxuICAgICAge1xuICAgICAgICBub25jZSxcbiAgICAgICAgbWF4RmVlLFxuICAgICAgICB2ZXJzaW9uXG4gICAgICB9XG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogRmlyc3QgY2hlY2sgaWYgY29udHJhY3QgaXMgYWxyZWFkeSBkZWNsYXJlZCwgaWYgbm90IGRlY2xhcmUgaXRcbiAgICogSWYgY29udHJhY3QgYWxyZWFkeSBkZWNsYXJlZCByZXR1cm5lZCB0cmFuc2FjdGlvbl9oYXNoIGlzICcnLlxuICAgKiBNZXRob2Qgd2lsbCBwYXNzIGV2ZW4gaWYgY29udHJhY3QgaXMgYWxyZWFkeSBkZWNsYXJlZFxuICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25zRGV0YWlsIChvcHRpb25hbClcbiAgICovXG4gIGFzeW5jIGRlY2xhcmVJZk5vdChwYXlsb2FkLCB0cmFuc2FjdGlvbnNEZXRhaWwgPSB7fSkge1xuICAgIGNvbnN0IGRlY2xhcmVDb250cmFjdFBheWxvYWQgPSBleHRyYWN0Q29udHJhY3RIYXNoZXMocGF5bG9hZCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuZ2V0Q2xhc3NCeUhhc2goZGVjbGFyZUNvbnRyYWN0UGF5bG9hZC5jbGFzc0hhc2gpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWNsYXJlKHBheWxvYWQsIHRyYW5zYWN0aW9uc0RldGFpbCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0cmFuc2FjdGlvbl9oYXNoOiBcIlwiLFxuICAgICAgY2xhc3NfaGFzaDogZGVjbGFyZUNvbnRyYWN0UGF5bG9hZC5jbGFzc0hhc2hcbiAgICB9O1xuICB9XG4gIGFzeW5jIGRlY2xhcmUocGF5bG9hZCwgdHJhbnNhY3Rpb25zRGV0YWlsID0ge30pIHtcbiAgICBjb25zdCBkZWNsYXJlQ29udHJhY3RQYXlsb2FkID0gZXh0cmFjdENvbnRyYWN0SGFzaGVzKHBheWxvYWQpO1xuICAgIGNvbnN0IGRldGFpbHMgPSB7fTtcbiAgICBkZXRhaWxzLm5vbmNlID0gdG9CaWdJbnQodHJhbnNhY3Rpb25zRGV0YWlsLm5vbmNlID8/IGF3YWl0IHRoaXMuZ2V0Tm9uY2UoKSk7XG4gICAgZGV0YWlscy5tYXhGZWUgPSB0cmFuc2FjdGlvbnNEZXRhaWwubWF4RmVlID8/IGF3YWl0IHRoaXMuZ2V0U3VnZ2VzdGVkTWF4RmVlKFxuICAgICAge1xuICAgICAgICB0eXBlOiBcIkRFQ0xBUkVcIiAvKiBERUNMQVJFICovLFxuICAgICAgICBwYXlsb2FkOiBkZWNsYXJlQ29udHJhY3RQYXlsb2FkXG4gICAgICB9LFxuICAgICAgdHJhbnNhY3Rpb25zRGV0YWlsXG4gICAgKTtcbiAgICBkZXRhaWxzLnZlcnNpb24gPSAhaXNTaWVycmEocGF5bG9hZC5jb250cmFjdCkgPyB0cmFuc2FjdGlvblZlcnNpb24gOiB0cmFuc2FjdGlvblZlcnNpb25fMjtcbiAgICBkZXRhaWxzLmNoYWluSWQgPSBhd2FpdCB0aGlzLmdldENoYWluSWQoKTtcbiAgICBjb25zdCBkZWNsYXJlQ29udHJhY3RUcmFuc2FjdGlvbiA9IGF3YWl0IHRoaXMuYnVpbGREZWNsYXJlUGF5bG9hZChkZWNsYXJlQ29udHJhY3RQYXlsb2FkLCB7XG4gICAgICAuLi5kZXRhaWxzLFxuICAgICAgd2FsbGV0QWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgY2Fpcm9WZXJzaW9uOiB2b2lkIDBcbiAgICAgIC8vIHVudXNlZCBwYXJhbWV0ZXJcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5kZWNsYXJlQ29udHJhY3QoZGVjbGFyZUNvbnRyYWN0VHJhbnNhY3Rpb24sIGRldGFpbHMpO1xuICB9XG4gIGFzeW5jIGRlcGxveShwYXlsb2FkLCBkZXRhaWxzKSB7XG4gICAgY29uc3QgcGFyYW1zID0gW10uY29uY2F0KHBheWxvYWQpLm1hcCgoaXQpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2xhc3NIYXNoLFxuICAgICAgICBzYWx0LFxuICAgICAgICB1bmlxdWUgPSB0cnVlLFxuICAgICAgICBjb25zdHJ1Y3RvckNhbGxkYXRhID0gW11cbiAgICAgIH0gPSBpdDtcbiAgICAgIGNvbnN0IGNvbXBpbGVkQ29uc3RydWN0b3JDYWxsRGF0YSA9IENhbGxEYXRhLmNvbXBpbGUoY29uc3RydWN0b3JDYWxsZGF0YSk7XG4gICAgICBjb25zdCBkZXBsb3lTYWx0ID0gc2FsdCA/PyByYW5kb21BZGRyZXNzKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjYWxsOiB7XG4gICAgICAgICAgY29udHJhY3RBZGRyZXNzOiBVREMuQUREUkVTUyxcbiAgICAgICAgICBlbnRyeXBvaW50OiBVREMuRU5UUllQT0lOVCxcbiAgICAgICAgICBjYWxsZGF0YTogW1xuICAgICAgICAgICAgY2xhc3NIYXNoLFxuICAgICAgICAgICAgZGVwbG95U2FsdCxcbiAgICAgICAgICAgIHRvQ2Fpcm9Cb29sKHVuaXF1ZSksXG4gICAgICAgICAgICBjb21waWxlZENvbnN0cnVjdG9yQ2FsbERhdGEubGVuZ3RoLFxuICAgICAgICAgICAgLi4uY29tcGlsZWRDb25zdHJ1Y3RvckNhbGxEYXRhXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBhZGRyZXNzOiBjYWxjdWxhdGVDb250cmFjdEFkZHJlc3NGcm9tSGFzaChcbiAgICAgICAgICB1bmlxdWUgPyBzdGFya0N1cnZlLnBlZGVyc2VuKHRoaXMuYWRkcmVzcywgZGVwbG95U2FsdCkgOiBkZXBsb3lTYWx0LFxuICAgICAgICAgIGNsYXNzSGFzaCxcbiAgICAgICAgICBjb21waWxlZENvbnN0cnVjdG9yQ2FsbERhdGEsXG4gICAgICAgICAgdW5pcXVlID8gVURDLkFERFJFU1MgOiAwXG4gICAgICAgIClcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgY2FsbHMgPSBwYXJhbXMubWFwKChpdCkgPT4gaXQuY2FsbCk7XG4gICAgY29uc3QgYWRkcmVzc2VzID0gcGFyYW1zLm1hcCgoaXQpID0+IGl0LmFkZHJlc3MpO1xuICAgIGNvbnN0IGludm9rZVJlc3BvbnNlID0gYXdhaXQgdGhpcy5leGVjdXRlKGNhbGxzLCB2b2lkIDAsIGRldGFpbHMpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5pbnZva2VSZXNwb25zZSxcbiAgICAgIGNvbnRyYWN0X2FkZHJlc3M6IGFkZHJlc3Nlc1xuICAgIH07XG4gIH1cbiAgYXN5bmMgZGVwbG95Q29udHJhY3QocGF5bG9hZCwgZGV0YWlscykge1xuICAgIGNvbnN0IGRlcGxveVR4ID0gYXdhaXQgdGhpcy5kZXBsb3kocGF5bG9hZCwgZGV0YWlscyk7XG4gICAgY29uc3QgdHhSZWNlaXB0ID0gYXdhaXQgdGhpcy53YWl0Rm9yVHJhbnNhY3Rpb24oZGVwbG95VHgudHJhbnNhY3Rpb25faGFzaCk7XG4gICAgcmV0dXJuIHBhcnNlVURDRXZlbnQodHhSZWNlaXB0KTtcbiAgfVxuICBhc3luYyBkZWNsYXJlQW5kRGVwbG95KHBheWxvYWQsIGRldGFpbHMpIHtcbiAgICBjb25zdCB7IGNvbnN0cnVjdG9yQ2FsbGRhdGEsIHNhbHQsIHVuaXF1ZSB9ID0gcGF5bG9hZDtcbiAgICBsZXQgZGVjbGFyZSA9IGF3YWl0IHRoaXMuZGVjbGFyZUlmTm90KHBheWxvYWQsIGRldGFpbHMpO1xuICAgIGlmIChkZWNsYXJlLnRyYW5zYWN0aW9uX2hhc2ggIT09IFwiXCIpIHtcbiAgICAgIGNvbnN0IHR4ID0gYXdhaXQgdGhpcy53YWl0Rm9yVHJhbnNhY3Rpb24oZGVjbGFyZS50cmFuc2FjdGlvbl9oYXNoKTtcbiAgICAgIGRlY2xhcmUgPSB7IC4uLmRlY2xhcmUsIC4uLnR4IH07XG4gICAgfVxuICAgIGNvbnN0IGRlcGxveSA9IGF3YWl0IHRoaXMuZGVwbG95Q29udHJhY3QoXG4gICAgICB7IGNsYXNzSGFzaDogZGVjbGFyZS5jbGFzc19oYXNoLCBzYWx0LCB1bmlxdWUsIGNvbnN0cnVjdG9yQ2FsbGRhdGEgfSxcbiAgICAgIGRldGFpbHNcbiAgICApO1xuICAgIHJldHVybiB7IGRlY2xhcmU6IHsgLi4uZGVjbGFyZSB9LCBkZXBsb3kgfTtcbiAgfVxuICBhc3luYyBkZXBsb3lBY2NvdW50KHtcbiAgICBjbGFzc0hhc2gsXG4gICAgY29uc3RydWN0b3JDYWxsZGF0YSA9IFtdLFxuICAgIGFkZHJlc3NTYWx0ID0gMCxcbiAgICBjb250cmFjdEFkZHJlc3M6IHByb3ZpZGVkQ29udHJhY3RBZGRyZXNzXG4gIH0sIHRyYW5zYWN0aW9uc0RldGFpbCA9IHt9KSB7XG4gICAgY29uc3QgdmVyc2lvbiA9IHRvQmlnSW50KHRyYW5zYWN0aW9uVmVyc2lvbik7XG4gICAgY29uc3Qgbm9uY2UgPSBaRVJPO1xuICAgIGNvbnN0IGNoYWluSWQgPSBhd2FpdCB0aGlzLmdldENoYWluSWQoKTtcbiAgICBjb25zdCBjb21waWxlZENhbGxkYXRhID0gQ2FsbERhdGEuY29tcGlsZShjb25zdHJ1Y3RvckNhbGxkYXRhKTtcbiAgICBjb25zdCBjb250cmFjdEFkZHJlc3MgPSBwcm92aWRlZENvbnRyYWN0QWRkcmVzcyA/PyBjYWxjdWxhdGVDb250cmFjdEFkZHJlc3NGcm9tSGFzaChhZGRyZXNzU2FsdCwgY2xhc3NIYXNoLCBjb21waWxlZENhbGxkYXRhLCAwKTtcbiAgICBjb25zdCBtYXhGZWUgPSB0cmFuc2FjdGlvbnNEZXRhaWwubWF4RmVlID8/IGF3YWl0IHRoaXMuZ2V0U3VnZ2VzdGVkTWF4RmVlKFxuICAgICAge1xuICAgICAgICB0eXBlOiBcIkRFUExPWV9BQ0NPVU5UXCIgLyogREVQTE9ZX0FDQ09VTlQgKi8sXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBjbGFzc0hhc2gsXG4gICAgICAgICAgY29uc3RydWN0b3JDYWxsZGF0YTogY29tcGlsZWRDYWxsZGF0YSxcbiAgICAgICAgICBhZGRyZXNzU2FsdCxcbiAgICAgICAgICBjb250cmFjdEFkZHJlc3NcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRyYW5zYWN0aW9uc0RldGFpbFxuICAgICk7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgdGhpcy5zaWduZXIuc2lnbkRlcGxveUFjY291bnRUcmFuc2FjdGlvbih7XG4gICAgICBjbGFzc0hhc2gsXG4gICAgICBjb25zdHJ1Y3RvckNhbGxkYXRhOiBjb21waWxlZENhbGxkYXRhLFxuICAgICAgY29udHJhY3RBZGRyZXNzLFxuICAgICAgYWRkcmVzc1NhbHQsXG4gICAgICBjaGFpbklkLFxuICAgICAgbWF4RmVlLFxuICAgICAgdmVyc2lvbixcbiAgICAgIG5vbmNlXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuZGVwbG95QWNjb3VudENvbnRyYWN0KFxuICAgICAgeyBjbGFzc0hhc2gsIGFkZHJlc3NTYWx0LCBjb25zdHJ1Y3RvckNhbGxkYXRhLCBzaWduYXR1cmUgfSxcbiAgICAgIHtcbiAgICAgICAgbm9uY2UsXG4gICAgICAgIG1heEZlZSxcbiAgICAgICAgdmVyc2lvblxuICAgICAgfVxuICAgICk7XG4gIH1cbiAgYXN5bmMgc2lnbk1lc3NhZ2UodHlwZWREYXRhKSB7XG4gICAgcmV0dXJuIHRoaXMuc2lnbmVyLnNpZ25NZXNzYWdlKHR5cGVkRGF0YSwgdGhpcy5hZGRyZXNzKTtcbiAgfVxuICBhc3luYyBoYXNoTWVzc2FnZSh0eXBlZERhdGEpIHtcbiAgICByZXR1cm4gZ2V0TWVzc2FnZUhhc2godHlwZWREYXRhLCB0aGlzLmFkZHJlc3MpO1xuICB9XG4gIGFzeW5jIHZlcmlmeU1lc3NhZ2VIYXNoKGhhc2gsIHNpZ25hdHVyZSkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmNhbGxDb250cmFjdCh7XG4gICAgICAgIGNvbnRyYWN0QWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgICBlbnRyeXBvaW50OiBcImlzVmFsaWRTaWduYXR1cmVcIixcbiAgICAgICAgY2FsbGRhdGE6IENhbGxEYXRhLmNvbXBpbGUoe1xuICAgICAgICAgIGhhc2g6IHRvQmlnSW50KGhhc2gpLnRvU3RyaW5nKCksXG4gICAgICAgICAgc2lnbmF0dXJlOiBmb3JtYXRTaWduYXR1cmUoc2lnbmF0dXJlKVxuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgdmVyaWZ5TWVzc2FnZSh0eXBlZERhdGEsIHNpZ25hdHVyZSkge1xuICAgIGNvbnN0IGhhc2ggPSBhd2FpdCB0aGlzLmhhc2hNZXNzYWdlKHR5cGVkRGF0YSk7XG4gICAgcmV0dXJuIHRoaXMudmVyaWZ5TWVzc2FnZUhhc2goaGFzaCwgc2lnbmF0dXJlKTtcbiAgfVxuICBhc3luYyBnZXRTdWdnZXN0ZWRNYXhGZWUoeyB0eXBlLCBwYXlsb2FkIH0sIGRldGFpbHMpIHtcbiAgICBsZXQgZmVlRXN0aW1hdGU7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwiSU5WT0tFX0ZVTkNUSU9OXCIgLyogSU5WT0tFICovOlxuICAgICAgICBmZWVFc3RpbWF0ZSA9IGF3YWl0IHRoaXMuZXN0aW1hdGVJbnZva2VGZWUocGF5bG9hZCwgZGV0YWlscyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkRFQ0xBUkVcIiAvKiBERUNMQVJFICovOlxuICAgICAgICBmZWVFc3RpbWF0ZSA9IGF3YWl0IHRoaXMuZXN0aW1hdGVEZWNsYXJlRmVlKHBheWxvYWQsIGRldGFpbHMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJERVBMT1lfQUNDT1VOVFwiIC8qIERFUExPWV9BQ0NPVU5UICovOlxuICAgICAgICBmZWVFc3RpbWF0ZSA9IGF3YWl0IHRoaXMuZXN0aW1hdGVBY2NvdW50RGVwbG95RmVlKHBheWxvYWQsIGRldGFpbHMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJERVBMT1lcIiAvKiBERVBMT1kgKi86XG4gICAgICAgIGZlZUVzdGltYXRlID0gYXdhaXQgdGhpcy5lc3RpbWF0ZURlcGxveUZlZShwYXlsb2FkLCBkZXRhaWxzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBmZWVFc3RpbWF0ZSA9IHsgc3VnZ2VzdGVkTWF4RmVlOiBaRVJPLCBvdmVyYWxsX2ZlZTogWkVSTyB9O1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIGZlZUVzdGltYXRlLnN1Z2dlc3RlZE1heEZlZTtcbiAgfVxuICAvKipcbiAgICogd2lsbCBiZSByZW5hbWVkIHRvIGJ1aWxkRGVjbGFyZUNvbnRyYWN0VHJhbnNhY3Rpb25cbiAgICovXG4gIGFzeW5jIGJ1aWxkRGVjbGFyZVBheWxvYWQocGF5bG9hZCwgeyBub25jZSwgY2hhaW5JZCwgdmVyc2lvbiwgd2FsbGV0QWRkcmVzcywgbWF4RmVlIH0pIHtcbiAgICBjb25zdCB7IGNsYXNzSGFzaCwgY29udHJhY3QsIGNvbXBpbGVkQ2xhc3NIYXNoIH0gPSBleHRyYWN0Q29udHJhY3RIYXNoZXMocGF5bG9hZCk7XG4gICAgY29uc3QgY29tcHJlc3NlZENvbXBpbGVkQ29udHJhY3QgPSBwYXJzZUNvbnRyYWN0KGNvbnRyYWN0KTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCB0aGlzLnNpZ25lci5zaWduRGVjbGFyZVRyYW5zYWN0aW9uKHtcbiAgICAgIGNsYXNzSGFzaCxcbiAgICAgIGNvbXBpbGVkQ2xhc3NIYXNoLFxuICAgICAgc2VuZGVyQWRkcmVzczogd2FsbGV0QWRkcmVzcyxcbiAgICAgIGNoYWluSWQsXG4gICAgICBtYXhGZWUsXG4gICAgICB2ZXJzaW9uLFxuICAgICAgbm9uY2VcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgc2VuZGVyQWRkcmVzczogd2FsbGV0QWRkcmVzcyxcbiAgICAgIHNpZ25hdHVyZSxcbiAgICAgIGNvbnRyYWN0OiBjb21wcmVzc2VkQ29tcGlsZWRDb250cmFjdCxcbiAgICAgIGNvbXBpbGVkQ2xhc3NIYXNoXG4gICAgfTtcbiAgfVxuICBhc3luYyBidWlsZEFjY291bnREZXBsb3lQYXlsb2FkKHtcbiAgICBjbGFzc0hhc2gsXG4gICAgYWRkcmVzc1NhbHQgPSAwLFxuICAgIGNvbnN0cnVjdG9yQ2FsbGRhdGEgPSBbXSxcbiAgICBjb250cmFjdEFkZHJlc3M6IHByb3ZpZGVkQ29udHJhY3RBZGRyZXNzXG4gIH0sIHsgbm9uY2UsIGNoYWluSWQsIHZlcnNpb24sIG1heEZlZSB9KSB7XG4gICAgY29uc3QgY29tcGlsZWRDYWxsZGF0YSA9IENhbGxEYXRhLmNvbXBpbGUoY29uc3RydWN0b3JDYWxsZGF0YSk7XG4gICAgY29uc3QgY29udHJhY3RBZGRyZXNzID0gcHJvdmlkZWRDb250cmFjdEFkZHJlc3MgPz8gY2FsY3VsYXRlQ29udHJhY3RBZGRyZXNzRnJvbUhhc2goYWRkcmVzc1NhbHQsIGNsYXNzSGFzaCwgY29tcGlsZWRDYWxsZGF0YSwgMCk7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgdGhpcy5zaWduZXIuc2lnbkRlcGxveUFjY291bnRUcmFuc2FjdGlvbih7XG4gICAgICBjbGFzc0hhc2gsXG4gICAgICBjb250cmFjdEFkZHJlc3MsXG4gICAgICBjaGFpbklkLFxuICAgICAgbWF4RmVlLFxuICAgICAgdmVyc2lvbixcbiAgICAgIG5vbmNlLFxuICAgICAgYWRkcmVzc1NhbHQsXG4gICAgICBjb25zdHJ1Y3RvckNhbGxkYXRhOiBjb21waWxlZENhbGxkYXRhXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsYXNzSGFzaCxcbiAgICAgIGFkZHJlc3NTYWx0LFxuICAgICAgY29uc3RydWN0b3JDYWxsZGF0YTogY29tcGlsZWRDYWxsZGF0YSxcbiAgICAgIHNpZ25hdHVyZVxuICAgIH07XG4gIH1cbiAgYnVpbGRVRENDb250cmFjdFBheWxvYWQocGF5bG9hZCkge1xuICAgIGNvbnN0IGNhbGxzID0gW10uY29uY2F0KHBheWxvYWQpLm1hcCgoaXQpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2xhc3NIYXNoLFxuICAgICAgICBzYWx0ID0gXCIwXCIsXG4gICAgICAgIHVuaXF1ZSA9IHRydWUsXG4gICAgICAgIGNvbnN0cnVjdG9yQ2FsbGRhdGEgPSBbXVxuICAgICAgfSA9IGl0O1xuICAgICAgY29uc3QgY29tcGlsZWRDb25zdHJ1Y3RvckNhbGxEYXRhID0gQ2FsbERhdGEuY29tcGlsZShjb25zdHJ1Y3RvckNhbGxkYXRhKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbnRyYWN0QWRkcmVzczogVURDLkFERFJFU1MsXG4gICAgICAgIGVudHJ5cG9pbnQ6IFVEQy5FTlRSWVBPSU5ULFxuICAgICAgICBjYWxsZGF0YTogW1xuICAgICAgICAgIGNsYXNzSGFzaCxcbiAgICAgICAgICBzYWx0LFxuICAgICAgICAgIHRvQ2Fpcm9Cb29sKHVuaXF1ZSksXG4gICAgICAgICAgY29tcGlsZWRDb25zdHJ1Y3RvckNhbGxEYXRhLmxlbmd0aCxcbiAgICAgICAgICAuLi5jb21waWxlZENvbnN0cnVjdG9yQ2FsbERhdGFcbiAgICAgICAgXVxuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gY2FsbHM7XG4gIH1cbiAgYXN5bmMgc2ltdWxhdGVUcmFuc2FjdGlvbihpbnZvY2F0aW9ucywgeyBub25jZSwgYmxvY2tJZGVudGlmaWVyLCBza2lwVmFsaWRhdGUsIHNraXBFeGVjdXRlIH0gPSB7fSkge1xuICAgIGNvbnN0IGFjY291bnRJbnZvY2F0aW9ucyA9IGF3YWl0IHRoaXMuYWNjb3VudEludm9jYXRpb25zRmFjdG9yeShpbnZvY2F0aW9ucywge1xuICAgICAgdmVyc2lvbnM6IFt0cmFuc2FjdGlvblZlcnNpb24sIHRyYW5zYWN0aW9uVmVyc2lvbl8yXSxcbiAgICAgIG5vbmNlLFxuICAgICAgYmxvY2tJZGVudGlmaWVyXG4gICAgfSk7XG4gICAgcmV0dXJuIHN1cGVyLmdldFNpbXVsYXRlVHJhbnNhY3Rpb24oYWNjb3VudEludm9jYXRpb25zLCB7XG4gICAgICBibG9ja0lkZW50aWZpZXIsXG4gICAgICBza2lwVmFsaWRhdGUsXG4gICAgICBza2lwRXhlY3V0ZVxuICAgIH0pO1xuICB9XG4gIGFzeW5jIGFjY291bnRJbnZvY2F0aW9uc0ZhY3RvcnkoaW52b2NhdGlvbnMsIHsgdmVyc2lvbnMsIG5vbmNlLCBibG9ja0lkZW50aWZpZXIgfSkge1xuICAgIGNvbnN0IHZlcnNpb24gPSB2ZXJzaW9uc1swXTtcbiAgICBjb25zdCBzYWZlTm9uY2UgPSBhd2FpdCB0aGlzLmdldE5vbmNlU2FmZShub25jZSk7XG4gICAgY29uc3QgY2hhaW5JZCA9IGF3YWl0IHRoaXMuZ2V0Q2hhaW5JZCgpO1xuICAgIGNvbnN0IHR4MFBheWxvYWQgPSBcInBheWxvYWRcIiBpbiBpbnZvY2F0aW9uc1swXSA/IGludm9jYXRpb25zWzBdLnBheWxvYWQgOiBpbnZvY2F0aW9uc1swXTtcbiAgICBjb25zdCBjYWlyb1ZlcnNpb24gPSBpbnZvY2F0aW9uc1swXS50eXBlID09PSBcIkRFUExPWV9BQ0NPVU5UXCIgLyogREVQTE9ZX0FDQ09VTlQgKi8gPyBhd2FpdCB0aGlzLmdldENhaXJvVmVyc2lvbih0eDBQYXlsb2FkLmNsYXNzSGFzaCkgOiBhd2FpdCB0aGlzLmdldENhaXJvVmVyc2lvbigpO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgIFtdLmNvbmNhdChpbnZvY2F0aW9ucykubWFwKGFzeW5jICh0cmFuc2FjdGlvbiwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdHhQYXlsb2FkID0gXCJwYXlsb2FkXCIgaW4gdHJhbnNhY3Rpb24gPyB0cmFuc2FjdGlvbi5wYXlsb2FkIDogdHJhbnNhY3Rpb247XG4gICAgICAgIGNvbnN0IHNpZ25lckRldGFpbHMgPSB7XG4gICAgICAgICAgd2FsbGV0QWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgICAgIG5vbmNlOiB0b0JpZ0ludChOdW1iZXIoc2FmZU5vbmNlKSArIGluZGV4KSxcbiAgICAgICAgICBtYXhGZWU6IFpFUk8sXG4gICAgICAgICAgdmVyc2lvbixcbiAgICAgICAgICBjaGFpbklkLFxuICAgICAgICAgIGNhaXJvVmVyc2lvblxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjb21tb24gPSB7XG4gICAgICAgICAgdHlwZTogdHJhbnNhY3Rpb24udHlwZSxcbiAgICAgICAgICB2ZXJzaW9uLFxuICAgICAgICAgIG5vbmNlOiB0b0JpZ0ludChOdW1iZXIoc2FmZU5vbmNlKSArIGluZGV4KSxcbiAgICAgICAgICBibG9ja0lkZW50aWZpZXJcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLnR5cGUgPT09IFwiSU5WT0tFX0ZVTkNUSU9OXCIgLyogSU5WT0tFICovKSB7XG4gICAgICAgICAgY29uc3QgcGF5bG9hZCA9IGF3YWl0IHRoaXMuYnVpbGRJbnZvY2F0aW9uKFxuICAgICAgICAgICAgW10uY29uY2F0KHR4UGF5bG9hZCksXG4gICAgICAgICAgICBzaWduZXJEZXRhaWxzXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uY29tbW9uLFxuICAgICAgICAgICAgLi4ucGF5bG9hZFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLnR5cGUgPT09IFwiREVDTEFSRVwiIC8qIERFQ0xBUkUgKi8pIHtcbiAgICAgICAgICBzaWduZXJEZXRhaWxzLnZlcnNpb24gPSAhaXNTaWVycmEodHhQYXlsb2FkLmNvbnRyYWN0KSA/IHRvQmlnSW50KHZlcnNpb25zWzBdKSA6IHRvQmlnSW50KHZlcnNpb25zWzFdKTtcbiAgICAgICAgICBjb25zdCBwYXlsb2FkID0gYXdhaXQgdGhpcy5idWlsZERlY2xhcmVQYXlsb2FkKHR4UGF5bG9hZCwgc2lnbmVyRGV0YWlscyk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmNvbW1vbixcbiAgICAgICAgICAgIC4uLnBheWxvYWQsXG4gICAgICAgICAgICB2ZXJzaW9uOiBzaWduZXJEZXRhaWxzLnZlcnNpb25cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFuc2FjdGlvbi50eXBlID09PSBcIkRFUExPWV9BQ0NPVU5UXCIgLyogREVQTE9ZX0FDQ09VTlQgKi8pIHtcbiAgICAgICAgICBjb25zdCBwYXlsb2FkID0gYXdhaXQgdGhpcy5idWlsZEFjY291bnREZXBsb3lQYXlsb2FkKHR4UGF5bG9hZCwgc2lnbmVyRGV0YWlscyk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmNvbW1vbixcbiAgICAgICAgICAgIC4uLnBheWxvYWRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFuc2FjdGlvbi50eXBlID09PSBcIkRFUExPWVwiIC8qIERFUExPWSAqLykge1xuICAgICAgICAgIGNvbnN0IGNhbGxzID0gdGhpcy5idWlsZFVEQ0NvbnRyYWN0UGF5bG9hZCh0eFBheWxvYWQpO1xuICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBhd2FpdCB0aGlzLmJ1aWxkSW52b2NhdGlvbihjYWxscywgc2lnbmVyRGV0YWlscyk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmNvbW1vbixcbiAgICAgICAgICAgIC4uLnBheWxvYWQsXG4gICAgICAgICAgICB0eXBlOiBcIklOVk9LRV9GVU5DVElPTlwiIC8qIElOVk9LRSAqL1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgRXJyb3IoYGFjY291bnRJbnZvY2F0aW9uc0ZhY3Rvcnk6IHVuc3VwcG9ydGVkIHRyYW5zYWN0aW9uIHR5cGU6ICR7dHJhbnNhY3Rpb259YCk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgYXN5bmMgZ2V0U3RhcmtOYW1lKGFkZHJlc3MgPSB0aGlzLmFkZHJlc3MsIFN0YXJrbmV0SWRDb250cmFjdDIpIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0U3RhcmtOYW1lKGFkZHJlc3MsIFN0YXJrbmV0SWRDb250cmFjdDIpO1xuICB9XG59O1xuXG4vLyBzcmMvcHJvdmlkZXIvaW50ZXJmYWNlLnRzXG52YXIgUHJvdmlkZXJJbnRlcmZhY2UgPSBjbGFzcyB7XG59O1xuXG4vLyBzcmMvcHJvdmlkZXIvaW5kZXgudHNcbnZhciBkZWZhdWx0UHJvdmlkZXIgPSBuZXcgUHJvdmlkZXIoeyBycGM6IHsgZGVmYXVsdDogdHJ1ZSB9IH0pO1xuXG4vLyBzcmMvYWNjb3VudC9pbnRlcmZhY2UudHNcbnZhciBBY2NvdW50SW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBQcm92aWRlckludGVyZmFjZSB7XG59O1xuXG4vLyBzcmMvdXRpbHMvZXZlbnRzL2luZGV4LnRzXG52YXIgZXZlbnRzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGV2ZW50c19leHBvcnRzLCB7XG4gIGdldEFiaUV2ZW50czogKCkgPT4gZ2V0QWJpRXZlbnRzLFxuICBwYXJzZUV2ZW50czogKCkgPT4gcGFyc2VFdmVudHNcbn0pO1xuZnVuY3Rpb24gZ2V0QWJpRXZlbnRzKGFiaSkge1xuICByZXR1cm4gYWJpLmZpbHRlcigoYWJpRW50cnkpID0+IGFiaUVudHJ5LnR5cGUgPT09IFwiZXZlbnRcIiAmJiAoYWJpRW50cnkuc2l6ZSB8fCBhYmlFbnRyeS5raW5kICE9PSBcImVudW1cIikpLnJlZHVjZSgoYWNjLCBhYmlFbnRyeSkgPT4ge1xuICAgIGNvbnN0IGVudHJ5TmFtZSA9IGFiaUVudHJ5Lm5hbWUuc2xpY2UoYWJpRW50cnkubmFtZS5sYXN0SW5kZXhPZihcIjpcIikgKyAxKTtcbiAgICBjb25zdCBhYmlFbnRyeU1vZCA9IHsgLi4uYWJpRW50cnkgfTtcbiAgICBhYmlFbnRyeU1vZC5uYW1lID0gZW50cnlOYW1lO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5hY2MsXG4gICAgICBbYWRkSGV4UHJlZml4KHN0YXJrQ3VydmUua2VjY2FrKHV0ZjhUb0FycmF5KGVudHJ5TmFtZSkpLnRvU3RyaW5nKDE2KSldOiBhYmlFbnRyeU1vZFxuICAgIH07XG4gIH0sIHt9KTtcbn1cbmZ1bmN0aW9uIHBhcnNlRXZlbnRzKHByb3ZpZGVyUmVjZWl2ZWRFdmVudHMsIGFiaUV2ZW50cywgYWJpU3RydWN0cywgYWJpRW51bXMpIHtcbiAgY29uc3QgcmV0ID0gcHJvdmlkZXJSZWNlaXZlZEV2ZW50cy5mbGF0KCkucmVkdWNlKChhY2MsIHJlY0V2ZW50KSA9PiB7XG4gICAgY29uc3QgYWJpRXZlbnQgPSBhYmlFdmVudHNbcmVjRXZlbnQua2V5c1swXV07XG4gICAgaWYgKCFhYmlFdmVudCkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgY29uc3QgcGFyc2VkRXZlbnQgPSB7fTtcbiAgICBwYXJzZWRFdmVudFthYmlFdmVudC5uYW1lXSA9IHt9O1xuICAgIHJlY0V2ZW50LmtleXMuc2hpZnQoKTtcbiAgICBjb25zdCBrZXlzSXRlciA9IHJlY0V2ZW50LmtleXNbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgIGNvbnN0IGRhdGFJdGVyID0gcmVjRXZlbnQuZGF0YVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgY29uc3QgYWJpRXZlbnRLZXlzID0gYWJpRXZlbnQubWVtYmVycz8uZmlsdGVyKChpdCkgPT4gaXQua2luZCA9PT0gXCJrZXlcIikgfHwgYWJpRXZlbnQua2V5cztcbiAgICBjb25zdCBhYmlFdmVudERhdGEgPSBhYmlFdmVudC5tZW1iZXJzPy5maWx0ZXIoKGl0KSA9PiBpdC5raW5kID09PSBcImRhdGFcIikgfHwgYWJpRXZlbnQuZGF0YTtcbiAgICBhYmlFdmVudEtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBwYXJzZWRFdmVudFthYmlFdmVudC5uYW1lXVtrZXkubmFtZV0gPSByZXNwb25zZVBhcnNlcihcbiAgICAgICAga2V5c0l0ZXIsXG4gICAgICAgIGtleSxcbiAgICAgICAgYWJpU3RydWN0cyxcbiAgICAgICAgYWJpRW51bXMsXG4gICAgICAgIHBhcnNlZEV2ZW50W2FiaUV2ZW50Lm5hbWVdXG4gICAgICApO1xuICAgIH0pO1xuICAgIGFiaUV2ZW50RGF0YS5mb3JFYWNoKChkYXRhKSA9PiB7XG4gICAgICBwYXJzZWRFdmVudFthYmlFdmVudC5uYW1lXVtkYXRhLm5hbWVdID0gcmVzcG9uc2VQYXJzZXIoXG4gICAgICAgIGRhdGFJdGVyLFxuICAgICAgICBkYXRhLFxuICAgICAgICBhYmlTdHJ1Y3RzLFxuICAgICAgICBhYmlFbnVtcyxcbiAgICAgICAgcGFyc2VkRXZlbnRbYWJpRXZlbnQubmFtZV1cbiAgICAgICk7XG4gICAgfSk7XG4gICAgYWNjLnB1c2gocGFyc2VkRXZlbnQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gc3JjL2NvbnRyYWN0L2RlZmF1bHQudHNcbnZhciBzcGxpdEFyZ3NBbmRPcHRpb25zID0gKGFyZ3MpID0+IHtcbiAgY29uc3Qgb3B0aW9ucyA9IFtcbiAgICBcImJsb2NrSWRlbnRpZmllclwiLFxuICAgIFwicGFyc2VSZXF1ZXN0XCIsXG4gICAgXCJwYXJzZVJlc3BvbnNlXCIsXG4gICAgXCJmb3JtYXRSZXNwb25zZVwiLFxuICAgIFwibWF4RmVlXCIsXG4gICAgXCJub25jZVwiLFxuICAgIFwic2lnbmF0dXJlXCIsXG4gICAgXCJhZGRyZXNzU2FsdFwiXG4gIF07XG4gIGNvbnN0IGxhc3RBcmcgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XG4gIGlmICh0eXBlb2YgbGFzdEFyZyA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLnNvbWUoKHgpID0+IHggaW4gbGFzdEFyZykpIHtcbiAgICByZXR1cm4geyBhcmdzLCBvcHRpb25zOiBhcmdzLnBvcCgpIH07XG4gIH1cbiAgcmV0dXJuIHsgYXJncyB9O1xufTtcbmZ1bmN0aW9uIGJ1aWxkQ2FsbChjb250cmFjdCwgZnVuY3Rpb25BYmkpIHtcbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzcGxpdEFyZ3NBbmRPcHRpb25zKGFyZ3MpO1xuICAgIHJldHVybiBjb250cmFjdC5jYWxsKGZ1bmN0aW9uQWJpLm5hbWUsIHBhcmFtcy5hcmdzLCB7XG4gICAgICBwYXJzZVJlcXVlc3Q6IHRydWUsXG4gICAgICBwYXJzZVJlc3BvbnNlOiB0cnVlLFxuICAgICAgLi4ucGFyYW1zLm9wdGlvbnNcbiAgICB9KTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGJ1aWxkSW52b2tlKGNvbnRyYWN0LCBmdW5jdGlvbkFiaSkge1xuICByZXR1cm4gYXN5bmMgZnVuY3Rpb24oLi4uYXJncykge1xuICAgIGNvbnN0IHBhcmFtcyA9IHNwbGl0QXJnc0FuZE9wdGlvbnMoYXJncyk7XG4gICAgcmV0dXJuIGNvbnRyYWN0Lmludm9rZShmdW5jdGlvbkFiaS5uYW1lLCBwYXJhbXMuYXJncywge1xuICAgICAgcGFyc2VSZXF1ZXN0OiB0cnVlLFxuICAgICAgLi4ucGFyYW1zLm9wdGlvbnNcbiAgICB9KTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGJ1aWxkRGVmYXVsdChjb250cmFjdCwgZnVuY3Rpb25BYmkpIHtcbiAgaWYgKGZ1bmN0aW9uQWJpLnN0YXRlTXV0YWJpbGl0eSA9PT0gXCJ2aWV3XCIgfHwgZnVuY3Rpb25BYmkuc3RhdGVfbXV0YWJpbGl0eSA9PT0gXCJ2aWV3XCIpIHtcbiAgICByZXR1cm4gYnVpbGRDYWxsKGNvbnRyYWN0LCBmdW5jdGlvbkFiaSk7XG4gIH1cbiAgcmV0dXJuIGJ1aWxkSW52b2tlKGNvbnRyYWN0LCBmdW5jdGlvbkFiaSk7XG59XG5mdW5jdGlvbiBidWlsZFBvcHVsYXRlKGNvbnRyYWN0LCBmdW5jdGlvbkFiaSkge1xuICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgIHJldHVybiBjb250cmFjdC5wb3B1bGF0ZShmdW5jdGlvbkFiaS5uYW1lLCBhcmdzKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGJ1aWxkRXN0aW1hdGUoY29udHJhY3QsIGZ1bmN0aW9uQWJpKSB7XG4gIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgcmV0dXJuIGNvbnRyYWN0LmVzdGltYXRlKGZ1bmN0aW9uQWJpLm5hbWUsIGFyZ3MpO1xuICB9O1xufVxuZnVuY3Rpb24gZ2V0Q2FsbGRhdGEoYXJncywgY2FsbGJhY2spIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJncykgJiYgXCJfX2NvbXBpbGVkX19cIiBpbiBhcmdzKVxuICAgIHJldHVybiBhcmdzO1xuICBpZiAoQXJyYXkuaXNBcnJheShhcmdzKSAmJiBBcnJheS5pc0FycmF5KGFyZ3NbMF0pICYmIFwiX19jb21waWxlZF9fXCIgaW4gYXJnc1swXSlcbiAgICByZXR1cm4gYXJnc1swXTtcbiAgcmV0dXJuIGNhbGxiYWNrKCk7XG59XG52YXIgQ29udHJhY3QgPSBjbGFzcyB7XG4gIC8qKlxuICAgKiBDb250cmFjdCBjbGFzcyB0byBoYW5kbGUgY29udHJhY3QgbWV0aG9kc1xuICAgKlxuICAgKiBAcGFyYW0gYWJpIC0gQWJpIG9mIHRoZSBjb250cmFjdCBvYmplY3RcbiAgICogQHBhcmFtIGFkZHJlc3MgKG9wdGlvbmFsKSAtIGFkZHJlc3MgdG8gY29ubmVjdCB0b1xuICAgKiBAcGFyYW0gcHJvdmlkZXJPckFjY291bnQgKG9wdGlvbmFsKSAtIFByb3ZpZGVyIG9yIEFjY291bnQgdG8gYXR0YWNoIHRvXG4gICAqL1xuICBjb25zdHJ1Y3RvcihhYmksIGFkZHJlc3MsIHByb3ZpZGVyT3JBY2NvdW50ID0gZGVmYXVsdFByb3ZpZGVyKSB7XG4gICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcyAmJiBhZGRyZXNzLnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy5wcm92aWRlck9yQWNjb3VudCA9IHByb3ZpZGVyT3JBY2NvdW50O1xuICAgIHRoaXMuY2FsbERhdGEgPSBuZXcgQ2FsbERhdGEoYWJpKTtcbiAgICB0aGlzLnN0cnVjdHMgPSBDYWxsRGF0YS5nZXRBYmlTdHJ1Y3QoYWJpKTtcbiAgICB0aGlzLmV2ZW50cyA9IGdldEFiaUV2ZW50cyhhYmkpO1xuICAgIGNvbnN0IHBhcnNlciA9IGNyZWF0ZUFiaVBhcnNlcihhYmkpO1xuICAgIHRoaXMuYWJpID0gcGFyc2VyLmdldExlZ2FjeUZvcm1hdCgpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB7fSwgd3JpdGFibGU6IGZhbHNlIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgZnVuY3Rpb25zOiB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB7fSwgd3JpdGFibGU6IGZhbHNlIH0sXG4gICAgICBjYWxsU3RhdGljOiB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB7fSwgd3JpdGFibGU6IGZhbHNlIH0sXG4gICAgICBwb3B1bGF0ZVRyYW5zYWN0aW9uOiB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB7fSwgd3JpdGFibGU6IGZhbHNlIH0sXG4gICAgICBlc3RpbWF0ZUZlZTogeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZToge30sIHdyaXRhYmxlOiBmYWxzZSB9XG4gICAgfSk7XG4gICAgdGhpcy5hYmkuZm9yRWFjaCgoYWJpRWxlbWVudCkgPT4ge1xuICAgICAgaWYgKGFiaUVsZW1lbnQudHlwZSAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCBzaWduYXR1cmUgPSBhYmlFbGVtZW50Lm5hbWU7XG4gICAgICBpZiAoIXRoaXNbc2lnbmF0dXJlXSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgc2lnbmF0dXJlLCB7XG4gICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICB2YWx1ZTogYnVpbGREZWZhdWx0KHRoaXMsIGFiaUVsZW1lbnQpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmZ1bmN0aW9uc1tzaWduYXR1cmVdKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLmZ1bmN0aW9ucywgc2lnbmF0dXJlLCB7XG4gICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICB2YWx1ZTogYnVpbGREZWZhdWx0KHRoaXMsIGFiaUVsZW1lbnQpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmNhbGxTdGF0aWNbc2lnbmF0dXJlXSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5jYWxsU3RhdGljLCBzaWduYXR1cmUsIHtcbiAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgIHZhbHVlOiBidWlsZENhbGwodGhpcywgYWJpRWxlbWVudClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMucG9wdWxhdGVUcmFuc2FjdGlvbltzaWduYXR1cmVdKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnBvcHVsYXRlVHJhbnNhY3Rpb24sIHNpZ25hdHVyZSwge1xuICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgdmFsdWU6IGJ1aWxkUG9wdWxhdGUodGhpcywgYWJpRWxlbWVudClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuZXN0aW1hdGVGZWVbc2lnbmF0dXJlXSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5lc3RpbWF0ZUZlZSwgc2lnbmF0dXJlLCB7XG4gICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICB2YWx1ZTogYnVpbGRFc3RpbWF0ZSh0aGlzLCBhYmlFbGVtZW50KVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBhdHRhY2goYWRkcmVzcykge1xuICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gIH1cbiAgY29ubmVjdChwcm92aWRlck9yQWNjb3VudCkge1xuICAgIHRoaXMucHJvdmlkZXJPckFjY291bnQgPSBwcm92aWRlck9yQWNjb3VudDtcbiAgfVxuICBhc3luYyBkZXBsb3llZCgpIHtcbiAgICBpZiAodGhpcy5kZXBsb3lUcmFuc2FjdGlvbkhhc2gpIHtcbiAgICAgIGF3YWl0IHRoaXMucHJvdmlkZXJPckFjY291bnQud2FpdEZvclRyYW5zYWN0aW9uKHRoaXMuZGVwbG95VHJhbnNhY3Rpb25IYXNoKTtcbiAgICAgIHRoaXMuZGVwbG95VHJhbnNhY3Rpb25IYXNoID0gdm9pZCAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBhc3luYyBjYWxsKG1ldGhvZCwgYXJncyA9IFtdLCB7XG4gICAgcGFyc2VSZXF1ZXN0ID0gdHJ1ZSxcbiAgICBwYXJzZVJlc3BvbnNlID0gdHJ1ZSxcbiAgICBmb3JtYXRSZXNwb25zZSA9IHZvaWQgMCxcbiAgICBibG9ja0lkZW50aWZpZXIgPSB2b2lkIDBcbiAgfSA9IHt9KSB7XG4gICAgYXNzZXJ0KHRoaXMuYWRkcmVzcyAhPT0gbnVsbCwgXCJjb250cmFjdCBpcyBub3QgY29ubmVjdGVkIHRvIGFuIGFkZHJlc3NcIik7XG4gICAgY29uc3QgY2FsbGRhdGEgPSBnZXRDYWxsZGF0YShhcmdzLCAoKSA9PiB7XG4gICAgICBpZiAocGFyc2VSZXF1ZXN0KSB7XG4gICAgICAgIHRoaXMuY2FsbERhdGEudmFsaWRhdGUoXCJDQUxMXCIgLyogQ0FMTCAqLywgbWV0aG9kLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbERhdGEuY29tcGlsZShtZXRob2QsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgY29uc29sZS53YXJuKFwiQ2FsbCBza2lwcGVkIHBhcnNpbmcgYnV0IHByb3ZpZGVkIHJhd0FyZ3MsIHBvc3NpYmxlIG1hbGZ1bmN0aW9uIHJlcXVlc3RcIik7XG4gICAgICByZXR1cm4gYXJncztcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlck9yQWNjb3VudC5jYWxsQ29udHJhY3QoXG4gICAgICB7XG4gICAgICAgIGNvbnRyYWN0QWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgICBjYWxsZGF0YSxcbiAgICAgICAgZW50cnlwb2ludDogbWV0aG9kXG4gICAgICB9LFxuICAgICAgYmxvY2tJZGVudGlmaWVyXG4gICAgKS50aGVuKCh4KSA9PiB7XG4gICAgICBpZiAoIXBhcnNlUmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIHgucmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKGZvcm1hdFJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGxEYXRhLmZvcm1hdChtZXRob2QsIHgucmVzdWx0LCBmb3JtYXRSZXNwb25zZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5jYWxsRGF0YS5wYXJzZShtZXRob2QsIHgucmVzdWx0KTtcbiAgICB9KTtcbiAgfVxuICBpbnZva2UobWV0aG9kLCBhcmdzID0gW10sIHsgcGFyc2VSZXF1ZXN0ID0gdHJ1ZSwgbWF4RmVlLCBub25jZSwgc2lnbmF0dXJlIH0gPSB7fSkge1xuICAgIGFzc2VydCh0aGlzLmFkZHJlc3MgIT09IG51bGwsIFwiY29udHJhY3QgaXMgbm90IGNvbm5lY3RlZCB0byBhbiBhZGRyZXNzXCIpO1xuICAgIGNvbnN0IGNhbGxkYXRhID0gZ2V0Q2FsbGRhdGEoYXJncywgKCkgPT4ge1xuICAgICAgaWYgKHBhcnNlUmVxdWVzdCkge1xuICAgICAgICB0aGlzLmNhbGxEYXRhLnZhbGlkYXRlKFwiSU5WT0tFXCIgLyogSU5WT0tFICovLCBtZXRob2QsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxsRGF0YS5jb21waWxlKG1ldGhvZCwgYXJncyk7XG4gICAgICB9XG4gICAgICBjb25zb2xlLndhcm4oXCJJbnZva2Ugc2tpcHBlZCBwYXJzaW5nIGJ1dCBwcm92aWRlZCByYXdBcmdzLCBwb3NzaWJsZSBtYWxmdW5jdGlvbiByZXF1ZXN0XCIpO1xuICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgfSk7XG4gICAgY29uc3QgaW52b2NhdGlvbiA9IHtcbiAgICAgIGNvbnRyYWN0QWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgY2FsbGRhdGEsXG4gICAgICBlbnRyeXBvaW50OiBtZXRob2RcbiAgICB9O1xuICAgIGlmIChcImV4ZWN1dGVcIiBpbiB0aGlzLnByb3ZpZGVyT3JBY2NvdW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm92aWRlck9yQWNjb3VudC5leGVjdXRlKGludm9jYXRpb24sIHZvaWQgMCwge1xuICAgICAgICBtYXhGZWUsXG4gICAgICAgIG5vbmNlXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKCFub25jZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm9uY2UgaXMgcmVxdWlyZWQgd2hlbiBpbnZva2luZyBhIGZ1bmN0aW9uIHdpdGhvdXQgYW4gYWNjb3VudGApO1xuICAgIGNvbnNvbGUud2FybihgSW52b2tpbmcgJHttZXRob2R9IHdpdGhvdXQgYW4gYWNjb3VudC4gVGhpcyB3aWxsIG5vdCB3b3JrIG9uIGEgcHVibGljIG5vZGUuYCk7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXJPckFjY291bnQuaW52b2tlRnVuY3Rpb24oXG4gICAgICB7XG4gICAgICAgIC4uLmludm9jYXRpb24sXG4gICAgICAgIHNpZ25hdHVyZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbm9uY2VcbiAgICAgIH1cbiAgICApO1xuICB9XG4gIGFzeW5jIGVzdGltYXRlKG1ldGhvZCwgYXJncyA9IFtdKSB7XG4gICAgYXNzZXJ0KHRoaXMuYWRkcmVzcyAhPT0gbnVsbCwgXCJjb250cmFjdCBpcyBub3QgY29ubmVjdGVkIHRvIGFuIGFkZHJlc3NcIik7XG4gICAgaWYgKCFnZXRDYWxsZGF0YShhcmdzLCAoKSA9PiBmYWxzZSkpIHtcbiAgICAgIHRoaXMuY2FsbERhdGEudmFsaWRhdGUoXCJJTlZPS0VcIiAvKiBJTlZPS0UgKi8sIG1ldGhvZCwgYXJncyk7XG4gICAgfVxuICAgIGNvbnN0IGludm9jYXRpb24gPSB0aGlzLnBvcHVsYXRlKG1ldGhvZCwgYXJncyk7XG4gICAgaWYgKFwiZXN0aW1hdGVJbnZva2VGZWVcIiBpbiB0aGlzLnByb3ZpZGVyT3JBY2NvdW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm92aWRlck9yQWNjb3VudC5lc3RpbWF0ZUludm9rZUZlZShpbnZvY2F0aW9uKTtcbiAgICB9XG4gICAgdGhyb3cgRXJyb3IoXCJDb250cmFjdCBtdXN0IGJlIGNvbm5lY3RlZCB0byB0aGUgYWNjb3VudCBjb250cmFjdCB0byBlc3RpbWF0ZVwiKTtcbiAgfVxuICBwb3B1bGF0ZShtZXRob2QsIGFyZ3MgPSBbXSkge1xuICAgIGNvbnN0IGNhbGxkYXRhID0gZ2V0Q2FsbGRhdGEoYXJncywgKCkgPT4gdGhpcy5jYWxsRGF0YS5jb21waWxlKG1ldGhvZCwgYXJncykpO1xuICAgIHJldHVybiB7XG4gICAgICBjb250cmFjdEFkZHJlc3M6IHRoaXMuYWRkcmVzcyxcbiAgICAgIGVudHJ5cG9pbnQ6IG1ldGhvZCxcbiAgICAgIGNhbGxkYXRhXG4gICAgfTtcbiAgfVxuICBwYXJzZUV2ZW50cyhyZWNlaXB0KSB7XG4gICAgcmV0dXJuIHBhcnNlRXZlbnRzKFxuICAgICAgcmVjZWlwdC5ldmVudHM/LmZpbHRlcihcbiAgICAgICAgKGV2ZW50KSA9PiBjbGVhbkhleChldmVudC5mcm9tX2FkZHJlc3MpID09PSBjbGVhbkhleCh0aGlzLmFkZHJlc3MpLFxuICAgICAgICBbXVxuICAgICAgKSB8fCBbXSxcbiAgICAgIHRoaXMuZXZlbnRzLFxuICAgICAgdGhpcy5zdHJ1Y3RzLFxuICAgICAgQ2FsbERhdGEuZ2V0QWJpRW51bSh0aGlzLmFiaSlcbiAgICApO1xuICB9XG4gIGlzQ2Fpcm8xKCkge1xuICAgIHJldHVybiBjYWlyb19leHBvcnRzLmlzQ2Fpcm8xQWJpKHRoaXMuYWJpKTtcbiAgfVxuICBhc3luYyBnZXRWZXJzaW9uKCkge1xuICAgIHJldHVybiB0aGlzLnByb3ZpZGVyT3JBY2NvdW50LmdldENvbnRyYWN0VmVyc2lvbih0aGlzLmFkZHJlc3MpO1xuICB9XG4gIHR5cGVkKHRBYmkpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcblxuLy8gc3JjL2NvbnRyYWN0L2ludGVyZmFjZS50c1xudmFyIENvbnRyYWN0SW50ZXJmYWNlID0gY2xhc3Mge1xufTtcblxuLy8gc3JjL2NvbnRyYWN0L2NvbnRyYWN0RmFjdG9yeS50c1xudmFyIENvbnRyYWN0RmFjdG9yeSA9IGNsYXNzIHtcbiAgLyoqXG4gICAqIEBwYXJhbSBwYXJhbXMgQ0ZQYXJhbXNcbiAgICogIC0gY29tcGlsZWRDb250cmFjdDogQ29tcGlsZWRDb250cmFjdDtcbiAgICogIC0gYWNjb3VudDogQWNjb3VudEludGVyZmFjZTtcbiAgICogIC0gY2FzbT86IENhaXJvQXNzZW1ibHk7XG4gICAqICAtIGNsYXNzSGFzaD86IHN0cmluZztcbiAgICogIC0gY29tcGlsZWRDbGFzc0hhc2g/OiBzdHJpbmc7XG4gICAqICAtIGFiaT86IEFiaTtcbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgIHRoaXMuY29tcGlsZWRDb250cmFjdCA9IHBhcmFtcy5jb21waWxlZENvbnRyYWN0O1xuICAgIHRoaXMuYWNjb3VudCA9IHBhcmFtcy5hY2NvdW50O1xuICAgIHRoaXMuY2FzbSA9IHBhcmFtcy5jYXNtO1xuICAgIHRoaXMuYWJpID0gcGFyYW1zLmFiaSA/PyBwYXJhbXMuY29tcGlsZWRDb250cmFjdC5hYmk7XG4gICAgdGhpcy5jbGFzc0hhc2ggPSBwYXJhbXMuY2xhc3NIYXNoO1xuICAgIHRoaXMuY29tcGlsZWRDbGFzc0hhc2ggPSBwYXJhbXMuY29tcGlsZWRDbGFzc0hhc2g7XG4gICAgdGhpcy5DYWxsRGF0YSA9IG5ldyBDYWxsRGF0YSh0aGlzLmFiaSk7XG4gIH1cbiAgLyoqXG4gICAqIERlcGxveXMgY29udHJhY3QgYW5kIHJldHVybnMgbmV3IGluc3RhbmNlIG9mIHRoZSBDb250cmFjdFxuICAgKlxuICAgKiBJZiBjb250cmFjdCBpcyBub3QgZGVjbGFyZWQgaXQgd2lsbCBmaXJzdCBkZWNsYXJlIGl0LCBhbmQgdGhlbiBkZXBsb3lcbiAgICovXG4gIGFzeW5jIGRlcGxveSguLi5hcmdzKSB7XG4gICAgY29uc3QgeyBhcmdzOiBwYXJhbSwgb3B0aW9ucyA9IHsgcGFyc2VSZXF1ZXN0OiB0cnVlIH0gfSA9IHNwbGl0QXJnc0FuZE9wdGlvbnMoYXJncyk7XG4gICAgY29uc3QgY29uc3RydWN0b3JDYWxsZGF0YSA9IGdldENhbGxkYXRhKHBhcmFtLCAoKSA9PiB7XG4gICAgICBpZiAob3B0aW9ucy5wYXJzZVJlcXVlc3QpIHtcbiAgICAgICAgdGhpcy5DYWxsRGF0YS52YWxpZGF0ZShcIkRFUExPWVwiIC8qIERFUExPWSAqLywgXCJjb25zdHJ1Y3RvclwiLCBwYXJhbSk7XG4gICAgICAgIHJldHVybiB0aGlzLkNhbGxEYXRhLmNvbXBpbGUoXCJjb25zdHJ1Y3RvclwiLCBwYXJhbSk7XG4gICAgICB9XG4gICAgICBjb25zb2xlLndhcm4oXCJDYWxsIHNraXBwZWQgcGFyc2luZyBidXQgcHJvdmlkZWQgcmF3QXJncywgcG9zc2libGUgbWFsZnVuY3Rpb24gcmVxdWVzdFwiKTtcbiAgICAgIHJldHVybiBwYXJhbTtcbiAgICB9KTtcbiAgICBjb25zdCB7XG4gICAgICBkZXBsb3k6IHsgY29udHJhY3RfYWRkcmVzcywgdHJhbnNhY3Rpb25faGFzaCB9XG4gICAgfSA9IGF3YWl0IHRoaXMuYWNjb3VudC5kZWNsYXJlQW5kRGVwbG95KHtcbiAgICAgIGNvbnRyYWN0OiB0aGlzLmNvbXBpbGVkQ29udHJhY3QsXG4gICAgICBjYXNtOiB0aGlzLmNhc20sXG4gICAgICBjbGFzc0hhc2g6IHRoaXMuY2xhc3NIYXNoLFxuICAgICAgY29tcGlsZWRDbGFzc0hhc2g6IHRoaXMuY29tcGlsZWRDbGFzc0hhc2gsXG4gICAgICBjb25zdHJ1Y3RvckNhbGxkYXRhLFxuICAgICAgc2FsdDogb3B0aW9ucy5hZGRyZXNzU2FsdFxuICAgIH0pO1xuICAgIGFzc2VydChCb29sZWFuKGNvbnRyYWN0X2FkZHJlc3MpLCBcIkRlcGxveW1lbnQgb2YgdGhlIGNvbnRyYWN0IGZhaWxlZFwiKTtcbiAgICBjb25zdCBjb250cmFjdEluc3RhbmNlID0gbmV3IENvbnRyYWN0KFxuICAgICAgdGhpcy5jb21waWxlZENvbnRyYWN0LmFiaSxcbiAgICAgIGNvbnRyYWN0X2FkZHJlc3MsXG4gICAgICB0aGlzLmFjY291bnRcbiAgICApO1xuICAgIGNvbnRyYWN0SW5zdGFuY2UuZGVwbG95VHJhbnNhY3Rpb25IYXNoID0gdHJhbnNhY3Rpb25faGFzaDtcbiAgICByZXR1cm4gY29udHJhY3RJbnN0YW5jZTtcbiAgfVxuICAvKipcbiAgICogQXR0YWNoZXMgdG8gbmV3IEFjY291bnRcbiAgICpcbiAgICogQHBhcmFtIGFjY291bnQgLSBuZXcgQWNjb3VudCB0byBhdHRhY2ggdG9cbiAgICovXG4gIGNvbm5lY3QoYWNjb3VudCkge1xuICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEF0dGFjaGVzIGN1cnJlbnQgYWJpIGFuZCBhY2NvdW50IHRvIHRoZSBuZXcgYWRkcmVzc1xuICAgKi9cbiAgYXR0YWNoKGFkZHJlc3MpIHtcbiAgICByZXR1cm4gbmV3IENvbnRyYWN0KHRoaXMuYWJpLCBhZGRyZXNzLCB0aGlzLmFjY291bnQpO1xuICB9XG4gIC8vIGV0aGVycy5qcycgZ2V0RGVwbG95VHJhbnNhY3Rpb24gY2FudCBiZSBzdXBwb3J0ZWQgYXMgaXQgcmVxdWlyZXMgdGhlIGFjY291bnQgb3Igc2lnbmVyIHRvIHJldHVybiBhIHNpZ25lZCB0cmFuc2FjdGlvbiB3aGljaCBpcyBub3QgcG9zc2libGUgd2l0aCB0aGUgY3VycmVudCBpbXBsZW1lbnRhdGlvblxufTtcblxuLy8gc3JjL3V0aWxzL2FkZHJlc3MudHNcbmltcG9ydCB7IGhleFRvQnl0ZXMgYXMgaGV4VG9CeXRlczIgfSBmcm9tIFwiQG5vYmxlL2N1cnZlcy9hYnN0cmFjdC91dGlsc1wiO1xuZnVuY3Rpb24gYWRkQWRkcmVzc1BhZGRpbmcoYWRkcmVzcykge1xuICByZXR1cm4gYWRkSGV4UHJlZml4KHJlbW92ZUhleFByZWZpeCh0b0hleChhZGRyZXNzKSkucGFkU3RhcnQoNjQsIFwiMFwiKSk7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZUFuZFBhcnNlQWRkcmVzcyhhZGRyZXNzKSB7XG4gIGFzc2VydEluUmFuZ2UoYWRkcmVzcywgWkVSTywgQUREUl9CT1VORCAtIDFuLCBcIlN0YXJrbmV0IEFkZHJlc3NcIik7XG4gIGNvbnN0IHJlc3VsdCA9IGFkZEFkZHJlc3NQYWRkaW5nKGFkZHJlc3MpO1xuICBpZiAoIXJlc3VsdC5tYXRjaCgvXigweCk/WzAtOWEtZkEtRl17NjR9JC8pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBBZGRyZXNzIEZvcm1hdFwiKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZ2V0Q2hlY2tzdW1BZGRyZXNzKGFkZHJlc3MpIHtcbiAgY29uc3QgY2hhcnMgPSByZW1vdmVIZXhQcmVmaXgodmFsaWRhdGVBbmRQYXJzZUFkZHJlc3MoYWRkcmVzcykpLnRvTG93ZXJDYXNlKCkuc3BsaXQoXCJcIik7XG4gIGNvbnN0IGhleCA9IHJlbW92ZUhleFByZWZpeChrZWNjYWtCbihhZGRyZXNzKSk7XG4gIGNvbnN0IGhhc2hlZCA9IGhleFRvQnl0ZXMyKGhleC5wYWRTdGFydCg2NCwgXCIwXCIpKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkgKz0gMikge1xuICAgIGlmIChoYXNoZWRbaSA+PiAxXSA+PiA0ID49IDgpIHtcbiAgICAgIGNoYXJzW2ldID0gY2hhcnNbaV0udG9VcHBlckNhc2UoKTtcbiAgICB9XG4gICAgaWYgKChoYXNoZWRbaSA+PiAxXSAmIDE1KSA+PSA4KSB7XG4gICAgICBjaGFyc1tpICsgMV0gPSBjaGFyc1tpICsgMV0udG9VcHBlckNhc2UoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFkZEhleFByZWZpeChjaGFycy5qb2luKFwiXCIpKTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlQ2hlY2tzdW1BZGRyZXNzKGFkZHJlc3MpIHtcbiAgcmV0dXJuIGdldENoZWNrc3VtQWRkcmVzcyhhZGRyZXNzKSA9PT0gYWRkcmVzcztcbn1cblxuLy8gc3JjL2luZGV4LnRzXG52YXIgbnVtYmVyID0gbnVtX2V4cG9ydHM7XG5leHBvcnQge1xuICBBY2NvdW50LFxuICBBY2NvdW50SW50ZXJmYWNlLFxuICBCbG9ja1N0YXR1cyxcbiAgQmxvY2tUYWcsXG4gIENhaXJvQ3VzdG9tRW51bSxcbiAgQ2Fpcm9PcHRpb24sXG4gIENhaXJvT3B0aW9uVmFyaWFudCxcbiAgQ2Fpcm9SZXN1bHQsXG4gIENhaXJvUmVzdWx0VmFyaWFudCxcbiAgQ2FsbERhdGEsXG4gIENvbnRyYWN0LFxuICBDb250cmFjdEZhY3RvcnksXG4gIENvbnRyYWN0SW50ZXJmYWNlLFxuICBDdXN0b21FcnJvcixcbiAgRW50cnlQb2ludFR5cGUsXG4gIEdhdGV3YXlFcnJvcixcbiAgSHR0cEVycm9yLFxuICBMaWJyYXJ5RXJyb3IsXG4gIExpdHRlcmFsLFxuICBQcm92aWRlcixcbiAgUHJvdmlkZXJJbnRlcmZhY2UsXG4gIHJwY19leHBvcnRzIGFzIFJQQyxcbiAgUnBjUHJvdmlkZXIsXG4gIFNJTVVMQVRJT05fRkxBRyxcbiAgc2VxdWVuY2VyX2V4cG9ydHMgYXMgU2VxdWVuY2VyLFxuICBTZXF1ZW5jZXJQcm92aWRlcixcbiAgU2lnbmVyLFxuICBTaWduZXJJbnRlcmZhY2UsXG4gIFRyYW5zYWN0aW9uRXhlY3V0aW9uU3RhdHVzLFxuICBUcmFuc2FjdGlvbkZpbmFsaXR5U3RhdHVzLFxuICBUcmFuc2FjdGlvblN0YXR1cyxcbiAgVHJhbnNhY3Rpb25UeXBlLFxuICBVaW50LFxuICBWYWxpZGF0ZVR5cGUsXG4gIGFkZEFkZHJlc3NQYWRkaW5nLFxuICBidWlsZFVybCxcbiAgY2Fpcm9fZXhwb3J0cyBhcyBjYWlybyxcbiAgY29uc3RhbnRzX2V4cG9ydHMgYXMgY29uc3RhbnRzLFxuICBjb250cmFjdENsYXNzUmVzcG9uc2VUb0xlZ2FjeUNvbXBpbGVkQ29udHJhY3QsXG4gIGRlZmF1bHRQcm92aWRlcixcbiAgZWNfZXhwb3J0cyBhcyBlYyxcbiAgZW5jb2RlX2V4cG9ydHMgYXMgZW5jb2RlLFxuICBldmVudHNfZXhwb3J0cyBhcyBldmVudHMsXG4gIGV4dHJhY3RDb250cmFjdEhhc2hlcyxcbiAgZml4UHJvdG8sXG4gIGZpeFN0YWNrLFxuICBnZXRDYWxsZGF0YSxcbiAgZ2V0Q2hlY2tzdW1BZGRyZXNzLFxuICBnZXREZWZhdWx0Tm9kZVVybCxcbiAgaGFzaF9leHBvcnRzIGFzIGhhc2gsXG4gIGlzU2llcnJhLFxuICBpc1VybCxcbiAganNvbl9leHBvcnRzIGFzIGpzb24sXG4gIG1lcmtsZV9leHBvcnRzIGFzIG1lcmtsZSxcbiAgbnVtX2V4cG9ydHMgYXMgbnVtLFxuICBudW1iZXIsXG4gIHBhcnNlVURDRXZlbnQsXG4gIHByb3ZpZGVyX2V4cG9ydHMgYXMgcHJvdmlkZXIsXG4gIHNlbGVjdG9yX2V4cG9ydHMgYXMgc2VsZWN0b3IsXG4gIHNob3J0U3RyaW5nX2V4cG9ydHMgYXMgc2hvcnRTdHJpbmcsXG4gIHNwbGl0QXJnc0FuZE9wdGlvbnMsXG4gIHN0YXJrX2V4cG9ydHMgYXMgc3RhcmssXG4gIHN0YXJrbmV0SWRfZXhwb3J0cyBhcyBzdGFya25ldElkLFxuICB0cmFuc2FjdGlvbl9leHBvcnRzIGFzIHRyYW5zYWN0aW9uLFxuICB0eXBlZERhdGFfZXhwb3J0cyBhcyB0eXBlZERhdGEsXG4gIHR5cGVzX2V4cG9ydHMgYXMgdHlwZXMsXG4gIHVpbnQyNTZfZXhwb3J0cyBhcyB1aW50MjU2LFxuICB2YWxpZGF0ZUFuZFBhcnNlQWRkcmVzcyxcbiAgdmFsaWRhdGVDaGVja3N1bUFkZHJlc3Ncbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/LosslessNumber.js":
/*!************************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/LosslessNumber.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LosslessNumber: () => (/* binding */ LosslessNumber),\n/* harmony export */   isLosslessNumber: () => (/* binding */ isLosslessNumber),\n/* harmony export */   toLosslessNumber: () => (/* binding */ toLosslessNumber)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/utils.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\n/**\n * A lossless number. Stores its numeric value as string\n */\nvar LosslessNumber = /*#__PURE__*/function () {\n  function LosslessNumber(value) {\n    _classCallCheck(this, LosslessNumber);\n    // numeric value as string\n    // type information\n    _defineProperty(this, \"isLosslessNumber\", true);\n    if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(value)) {\n      throw new Error('Invalid number (value: \"' + value + '\")');\n    }\n    this.value = value;\n  }\n\n  /**\n   * Get the value of the LosslessNumber as number or bigint.\n   *\n   * - a number is returned for safe numbers and decimal values that only lose some insignificant digits\n   * - a bigint is returned for big integer numbers\n   * - an Error is thrown for values that will overflow or underflow\n   *\n   * Note that you can implement your own strategy for conversion by just getting the value as string\n   * via .toString(), and using util functions like isInteger, isSafeNumber, getUnsafeNumberReason,\n   * and toSafeNumberOrThrow to convert it to a numeric value.\n   */\n  _createClass(LosslessNumber, [{\n    key: \"valueOf\",\n    value: function valueOf() {\n      var unsafeReason = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getUnsafeNumberReason)(this.value);\n\n      // safe or truncate_float\n      if (unsafeReason === undefined || unsafeReason === _utils_js__WEBPACK_IMPORTED_MODULE_0__.UnsafeNumberReason.truncate_float) {\n        return parseFloat(this.value);\n      }\n\n      // truncate_integer\n      if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(this.value)) {\n        return BigInt(this.value);\n      }\n\n      // overflow or underflow\n      throw new Error('Cannot safely convert to number: ' + \"the value '\".concat(this.value, \"' would \").concat(unsafeReason, \" and become \").concat(parseFloat(this.value)));\n    }\n\n    /**\n     * Get the value of the LosslessNumber as string.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.value;\n    }\n\n    // Note: we do NOT implement a .toJSON() method, and you should not implement\n    // or use that, it cannot safely turn the numeric value in the string into\n    // stringified JSON since it has to be parsed into a number first.\n  }]);\n  return LosslessNumber;\n}();\n\n/**\n * Test whether a value is a LosslessNumber\n */\nfunction isLosslessNumber(value) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return value && _typeof(value) === 'object' && value.isLosslessNumber === true || false;\n}\n\n/**\n * Convert a number into a LosslessNumber if this is possible in a safe way\n * If the value has too many digits, or is NaN or Infinity, an error will be thrown\n */\nfunction toLosslessNumber(value) {\n  if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.extractSignificantDigits)(value + '').length > 15) {\n    throw new Error('Invalid number: contains more than 15 digits and is most likely truncated and unsafe by itself ' + \"(value: \".concat(value, \")\"));\n  }\n  if (isNaN(value)) {\n    throw new Error('Invalid number: NaN');\n  }\n  if (!isFinite(value)) {\n    throw new Error('Invalid number: ' + value);\n  }\n  return new LosslessNumber(String(value));\n}\n//# sourceMappingURL=LosslessNumber.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/LosslessNumber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/config.js":
/*!****************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/config.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config)\n/* harmony export */ });\n/**\n * Get and/or set configuration options\n * @deprecated There is no config anymore\n */ // eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction config(options) {\n  // Backward compatibility warning for v1.x\n  throw new Error('config is deprecated, support for circularRefs is removed from the library. ' + 'If you encounter circular references in your data structures, ' + 'please rethink your datastructures: ' + 'better prevent circular references in the first place.');\n}\n//# sourceMappingURL=config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS9jb25maWcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0aWNsZS1hcHAvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS9jb25maWcuanM/YWZjYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdldCBhbmQvb3Igc2V0IGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICogQGRlcHJlY2F0ZWQgVGhlcmUgaXMgbm8gY29uZmlnIGFueW1vcmVcbiAqLyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5leHBvcnQgZnVuY3Rpb24gY29uZmlnKG9wdGlvbnMpIHtcbiAgLy8gQmFja3dhcmQgY29tcGF0aWJpbGl0eSB3YXJuaW5nIGZvciB2MS54XG4gIHRocm93IG5ldyBFcnJvcignY29uZmlnIGlzIGRlcHJlY2F0ZWQsIHN1cHBvcnQgZm9yIGNpcmN1bGFyUmVmcyBpcyByZW1vdmVkIGZyb20gdGhlIGxpYnJhcnkuICcgKyAnSWYgeW91IGVuY291bnRlciBjaXJjdWxhciByZWZlcmVuY2VzIGluIHlvdXIgZGF0YSBzdHJ1Y3R1cmVzLCAnICsgJ3BsZWFzZSByZXRoaW5rIHlvdXIgZGF0YXN0cnVjdHVyZXM6ICcgKyAnYmV0dGVyIHByZXZlbnQgY2lyY3VsYXIgcmVmZXJlbmNlcyBpbiB0aGUgZmlyc3QgcGxhY2UuJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LosslessNumber: () => (/* reexport safe */ _LosslessNumber_js__WEBPACK_IMPORTED_MODULE_3__.LosslessNumber),\n/* harmony export */   UnsafeNumberReason: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.UnsafeNumberReason),\n/* harmony export */   config: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_0__.config),\n/* harmony export */   getUnsafeNumberReason: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.getUnsafeNumberReason),\n/* harmony export */   isInteger: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.isInteger),\n/* harmony export */   isLosslessNumber: () => (/* reexport safe */ _LosslessNumber_js__WEBPACK_IMPORTED_MODULE_3__.isLosslessNumber),\n/* harmony export */   isNumber: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.isNumber),\n/* harmony export */   isSafeNumber: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.isSafeNumber),\n/* harmony export */   parse: () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_1__.parse),\n/* harmony export */   parseLosslessNumber: () => (/* reexport safe */ _numberParsers_js__WEBPACK_IMPORTED_MODULE_5__.parseLosslessNumber),\n/* harmony export */   parseNumberAndBigInt: () => (/* reexport safe */ _numberParsers_js__WEBPACK_IMPORTED_MODULE_5__.parseNumberAndBigInt),\n/* harmony export */   reviveDate: () => (/* reexport safe */ _reviveDate_js__WEBPACK_IMPORTED_MODULE_4__.reviveDate),\n/* harmony export */   stringify: () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_2__.stringify),\n/* harmony export */   toLosslessNumber: () => (/* reexport safe */ _LosslessNumber_js__WEBPACK_IMPORTED_MODULE_3__.toLosslessNumber),\n/* harmony export */   toSafeNumberOrThrow: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.toSafeNumberOrThrow)\n/* harmony export */ });\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/config.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/parse.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/stringify.js\");\n/* harmony import */ var _LosslessNumber_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LosslessNumber.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/LosslessNumber.js\");\n/* harmony import */ var _reviveDate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reviveDate.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/reviveDate.js\");\n/* harmony import */ var _numberParsers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./numberParsers.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/numberParsers.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/utils.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/types.js\");\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFxQztBQUNGO0FBQ1E7QUFDOEM7QUFDNUM7QUFDa0M7QUFDZ0Q7QUFDcEc7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydGljbGUtYXBwLy4vbm9kZV9tb2R1bGVzL3N0YXJrbmV0L25vZGVfbW9kdWxlcy9sb3NzbGVzcy1qc29uL2xpYi9lc20vaW5kZXguanM/M2U5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZy5qcyc7XG5leHBvcnQgeyBwYXJzZSB9IGZyb20gJy4vcGFyc2UuanMnO1xuZXhwb3J0IHsgc3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuZXhwb3J0IHsgTG9zc2xlc3NOdW1iZXIsIGlzTG9zc2xlc3NOdW1iZXIsIHRvTG9zc2xlc3NOdW1iZXIgfSBmcm9tICcuL0xvc3NsZXNzTnVtYmVyLmpzJztcbmV4cG9ydCB7IHJldml2ZURhdGUgfSBmcm9tICcuL3Jldml2ZURhdGUuanMnO1xuZXhwb3J0IHsgcGFyc2VMb3NzbGVzc051bWJlciwgcGFyc2VOdW1iZXJBbmRCaWdJbnQgfSBmcm9tICcuL251bWJlclBhcnNlcnMuanMnO1xuZXhwb3J0IHsgVW5zYWZlTnVtYmVyUmVhc29uLCBpc0ludGVnZXIsIGlzTnVtYmVyLCBpc1NhZmVOdW1iZXIsIHRvU2FmZU51bWJlck9yVGhyb3csIGdldFVuc2FmZU51bWJlclJlYXNvbiB9IGZyb20gJy4vdXRpbHMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcy5qcyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/numberParsers.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/numberParsers.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseLosslessNumber: () => (/* binding */ parseLosslessNumber),\n/* harmony export */   parseNumberAndBigInt: () => (/* binding */ parseNumberAndBigInt)\n/* harmony export */ });\n/* harmony import */ var _LosslessNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LosslessNumber.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/LosslessNumber.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/utils.js\");\n\n\nfunction parseLosslessNumber(value) {\n  return new _LosslessNumber_js__WEBPACK_IMPORTED_MODULE_0__.LosslessNumber(value);\n}\nfunction parseNumberAndBigInt(value) {\n  return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isInteger)(value) ? BigInt(value) : parseFloat(value);\n}\n//# sourceMappingURL=numberParsers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS9udW1iZXJQYXJzZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBcUQ7QUFDZDtBQUNoQztBQUNQLGFBQWEsOERBQWM7QUFDM0I7QUFDTztBQUNQLFNBQVMsb0RBQVM7QUFDbEI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0aWNsZS1hcHAvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS9udW1iZXJQYXJzZXJzLmpzP2Y1YmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9zc2xlc3NOdW1iZXIgfSBmcm9tICcuL0xvc3NsZXNzTnVtYmVyLmpzJztcbmltcG9ydCB7IGlzSW50ZWdlciB9IGZyb20gJy4vdXRpbHMuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTG9zc2xlc3NOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBMb3NzbGVzc051bWJlcih2YWx1ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VOdW1iZXJBbmRCaWdJbnQodmFsdWUpIHtcbiAgcmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgPyBCaWdJbnQodmFsdWUpIDogcGFyc2VGbG9hdCh2YWx1ZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1udW1iZXJQYXJzZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/numberParsers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/parse.js":
/*!***************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/parse.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codeLowercaseA: () => (/* binding */ codeLowercaseA),\n/* harmony export */   codeLowercaseE: () => (/* binding */ codeLowercaseE),\n/* harmony export */   codeLowercaseF: () => (/* binding */ codeLowercaseF),\n/* harmony export */   codeUppercaseA: () => (/* binding */ codeUppercaseA),\n/* harmony export */   codeUppercaseE: () => (/* binding */ codeUppercaseE),\n/* harmony export */   codeUppercaseF: () => (/* binding */ codeUppercaseF),\n/* harmony export */   isDeepEqual: () => (/* binding */ isDeepEqual),\n/* harmony export */   isValidStringCharacter: () => (/* binding */ isValidStringCharacter),\n/* harmony export */   parse: () => (/* binding */ parse)\n/* harmony export */ });\n/* harmony import */ var _numberParsers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./numberParsers.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/numberParsers.js\");\n/* harmony import */ var _revive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./revive.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/revive.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n/**\n * The LosslessJSON.parse() method parses a string as JSON, optionally transforming\n * the value produced by parsing.\n *\n * The parser is based on the parser of Tan Li Hou shared in\n * https://lihautan.com/json-parser-with-javascript/\n *\n * @param text\n * The string to parse as JSON. See the JSON object for a description of JSON syntax.\n *\n * @param [reviver]\n * If a function, prescribes how the value originally produced by parsing is\n * transformed, before being returned.\n *\n * @param [parseNumber=parseLosslessNumber]\n * Pass a custom number parser. Input is a string, and the output can be unknown\n * numeric value: number, bigint, LosslessNumber, or a custom BigNumber library.\n *\n * @returns Returns the Object corresponding to the given JSON text.\n *\n * @throws Throws a SyntaxError exception if the string to parse is not valid JSON.\n */\nfunction parse(text, reviver) {\n  var parseNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _numberParsers_js__WEBPACK_IMPORTED_MODULE_0__.parseLosslessNumber;\n  var i = 0;\n  var value = parseValue();\n  expectValue(value);\n  expectEndOfInput();\n  return reviver ? (0,_revive_js__WEBPACK_IMPORTED_MODULE_1__.revive)(value, reviver) : value;\n  function parseObject() {\n    if (text.charCodeAt(i) === codeOpeningBrace) {\n      i++;\n      skipWhitespace();\n      var object = {};\n      var initial = true;\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBrace) {\n        if (!initial) {\n          eatComma();\n          skipWhitespace();\n        } else {\n          initial = false;\n        }\n        var start = i;\n        var key = parseString();\n        if (key === undefined) {\n          throwObjectKeyExpected();\n        }\n        skipWhitespace();\n        eatColon();\n        var _value = parseValue();\n        if (_value === undefined) {\n          throwObjectValueExpected();\n        }\n\n        // TODO: test deep equal instead of strict equal\n        if (Object.prototype.hasOwnProperty.call(object, key) && !isDeepEqual(_value, object[key])) {\n          // Note that we could also test `if(key in object) {...}`\n          // or `if (object[key] !== 'undefined') {...}`, but that is slower.\n          throwDuplicateKey(key, start + 1);\n        }\n        object[key] = _value;\n      }\n      if (text.charCodeAt(i) !== codeClosingBrace) {\n        throwObjectKeyOrEndExpected();\n      }\n      i++;\n      return object;\n    }\n  }\n  function parseArray() {\n    if (text.charCodeAt(i) === codeOpeningBracket) {\n      i++;\n      skipWhitespace();\n      var array = [];\n      var initial = true;\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBracket) {\n        if (!initial) {\n          eatComma();\n        } else {\n          initial = false;\n        }\n        var _value2 = parseValue();\n        expectArrayItem(_value2);\n        array.push(_value2);\n      }\n      if (text.charCodeAt(i) !== codeClosingBracket) {\n        throwArrayItemOrEndExpected();\n      }\n      i++;\n      return array;\n    }\n  }\n  function parseValue() {\n    var _ref, _ref2, _ref3, _ref4, _ref5, _parseString;\n    skipWhitespace();\n    var value = (_ref = (_ref2 = (_ref3 = (_ref4 = (_ref5 = (_parseString = parseString()) !== null && _parseString !== void 0 ? _parseString : parseNumeric()) !== null && _ref5 !== void 0 ? _ref5 : parseObject()) !== null && _ref4 !== void 0 ? _ref4 : parseArray()) !== null && _ref3 !== void 0 ? _ref3 : parseKeyword('true', true)) !== null && _ref2 !== void 0 ? _ref2 : parseKeyword('false', false)) !== null && _ref !== void 0 ? _ref : parseKeyword('null', null);\n    skipWhitespace();\n    return value;\n  }\n  function parseKeyword(name, value) {\n    if (text.slice(i, i + name.length) === name) {\n      i += name.length;\n      return value;\n    }\n  }\n  function skipWhitespace() {\n    while (isWhitespace(text.charCodeAt(i))) {\n      i++;\n    }\n  }\n  function parseString() {\n    if (text.charCodeAt(i) === codeDoubleQuote) {\n      i++;\n      var result = '';\n      while (i < text.length && text.charCodeAt(i) !== codeDoubleQuote) {\n        if (text.charCodeAt(i) === codeBackslash) {\n          var char = text[i + 1];\n          var escapeChar = escapeCharacters[char];\n          if (escapeChar !== undefined) {\n            result += escapeChar;\n            i++;\n          } else if (char === 'u') {\n            if (isHex(text.charCodeAt(i + 2)) && isHex(text.charCodeAt(i + 3)) && isHex(text.charCodeAt(i + 4)) && isHex(text.charCodeAt(i + 5))) {\n              result += String.fromCharCode(parseInt(text.slice(i + 2, i + 6), 16));\n              i += 5;\n            } else {\n              throwInvalidUnicodeCharacter(i);\n            }\n          } else {\n            throwInvalidEscapeCharacter(i);\n          }\n        } else {\n          if (isValidStringCharacter(text.charCodeAt(i))) {\n            result += text[i];\n          } else {\n            throwInvalidCharacter(text[i]);\n          }\n        }\n        i++;\n      }\n      expectEndOfString();\n      i++;\n      return result;\n    }\n  }\n  function parseNumeric() {\n    var start = i;\n    if (text.charCodeAt(i) === codeMinus) {\n      i++;\n      expectDigit(start);\n    }\n    if (text.charCodeAt(i) === codeZero) {\n      i++;\n    } else if (isNonZeroDigit(text.charCodeAt(i))) {\n      i++;\n      while (isDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    }\n    if (text.charCodeAt(i) === codeDot) {\n      i++;\n      expectDigit(start);\n      while (isDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    }\n    if (text.charCodeAt(i) === codeLowercaseE || text.charCodeAt(i) === codeUppercaseE) {\n      i++;\n      if (text.charCodeAt(i) === codeMinus || text.charCodeAt(i) === codePlus) {\n        i++;\n      }\n      expectDigit(start);\n      while (isDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    }\n    if (i > start) {\n      return parseNumber(text.slice(start, i));\n    }\n  }\n  function eatComma() {\n    if (text.charCodeAt(i) !== codeComma) {\n      throw new SyntaxError(\"Comma ',' expected after value \".concat(gotAt()));\n    }\n    i++;\n  }\n  function eatColon() {\n    if (text.charCodeAt(i) !== codeColon) {\n      throw new SyntaxError(\"Colon ':' expected after property name \".concat(gotAt()));\n    }\n    i++;\n  }\n  function expectValue(value) {\n    if (value === undefined) {\n      throw new SyntaxError(\"JSON value expected \".concat(gotAt()));\n    }\n  }\n  function expectArrayItem(value) {\n    if (value === undefined) {\n      throw new SyntaxError(\"Array item expected \".concat(gotAt()));\n    }\n  }\n  function expectEndOfInput() {\n    if (i < text.length) {\n      throw new SyntaxError(\"Expected end of input \".concat(gotAt()));\n    }\n  }\n  function expectDigit(start) {\n    if (!isDigit(text.charCodeAt(i))) {\n      var numSoFar = text.slice(start, i);\n      throw new SyntaxError(\"Invalid number '\".concat(numSoFar, \"', expecting a digit \").concat(gotAt()));\n    }\n  }\n  function expectEndOfString() {\n    if (text.charCodeAt(i) !== codeDoubleQuote) {\n      throw new SyntaxError(\"End of string '\\\"' expected \".concat(gotAt()));\n    }\n  }\n  function throwObjectKeyExpected() {\n    throw new SyntaxError(\"Quoted object key expected \".concat(gotAt()));\n  }\n  function throwDuplicateKey(key, pos) {\n    throw new SyntaxError(\"Duplicate key '\".concat(key, \"' encountered at position \").concat(pos));\n  }\n  function throwObjectKeyOrEndExpected() {\n    throw new SyntaxError(\"Quoted object key or end of object '}' expected \".concat(gotAt()));\n  }\n  function throwArrayItemOrEndExpected() {\n    throw new SyntaxError(\"Array item or end of array ']' expected \".concat(gotAt()));\n  }\n  function throwInvalidCharacter(char) {\n    throw new SyntaxError(\"Invalid character '\".concat(char, \"' \").concat(pos()));\n  }\n  function throwInvalidEscapeCharacter(start) {\n    var chars = text.slice(start, start + 2);\n    throw new SyntaxError(\"Invalid escape character '\".concat(chars, \"' \").concat(pos()));\n  }\n  function throwObjectValueExpected() {\n    throw new SyntaxError(\"Object value expected after ':' \".concat(pos()));\n  }\n  function throwInvalidUnicodeCharacter(start) {\n    var end = start + 2;\n    while (/\\w/.test(text[end])) {\n      end++;\n    }\n    var chars = text.slice(start, end);\n    throw new SyntaxError(\"Invalid unicode character '\".concat(chars, \"' \").concat(pos()));\n  }\n\n  // zero based character position\n  function pos() {\n    return \"at position \".concat(i);\n  }\n  function got() {\n    return i < text.length ? \"but got '\".concat(text[i], \"'\") : 'but reached end of input';\n  }\n  function gotAt() {\n    return got() + ' ' + pos();\n  }\n}\nfunction isWhitespace(code) {\n  return code === codeSpace || code === codeNewline || code === codeTab || code === codeReturn;\n}\nfunction isHex(code) {\n  return code >= codeZero && code <= codeNine || code >= codeUppercaseA && code <= codeUppercaseF || code >= codeLowercaseA && code <= codeLowercaseF;\n}\nfunction isDigit(code) {\n  return code >= codeZero && code <= codeNine;\n}\nfunction isNonZeroDigit(code) {\n  return code >= codeOne && code <= codeNine;\n}\nfunction isValidStringCharacter(code) {\n  return code >= 0x20 && code <= 0x10ffff;\n}\nfunction isDeepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.length === b.length && a.every(function (item, index) {\n      return isDeepEqual(item, b[index]);\n    });\n  }\n  if (isObject(a) && isObject(b)) {\n    var keys = _toConsumableArray(new Set([].concat(_toConsumableArray(Object.keys(a)), _toConsumableArray(Object.keys(b)))));\n    return keys.every(function (key) {\n      return isDeepEqual(a[key], b[key]);\n    });\n  }\n  return false;\n}\nfunction isObject(value) {\n  return _typeof(value) === 'object' && value !== null;\n}\n\n// map with all escape characters\nvar escapeCharacters = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n};\n\nvar codeBackslash = 0x5c; // \"\\\"\nvar codeOpeningBrace = 0x7b; // \"{\"\nvar codeClosingBrace = 0x7d; // \"}\"\nvar codeOpeningBracket = 0x5b; // \"[\"\nvar codeClosingBracket = 0x5d; // \"]\"\nvar codeSpace = 0x20; // \" \"\nvar codeNewline = 0xa; // \"\\n\"\nvar codeTab = 0x9; // \"\\t\"\nvar codeReturn = 0xd; // \"\\r\"\nvar codeDoubleQuote = 0x0022; // \"\nvar codePlus = 0x2b; // \"+\"\nvar codeMinus = 0x2d; // \"-\"\nvar codeZero = 0x30;\nvar codeOne = 0x31;\nvar codeNine = 0x39;\nvar codeComma = 0x2c; // \",\"\nvar codeDot = 0x2e; // \".\" (dot, period)\nvar codeColon = 0x3a; // \":\"\nvar codeUppercaseA = 0x41; // \"A\"\nvar codeLowercaseA = 0x61; // \"a\"\nvar codeUppercaseE = 0x45; // \"E\"\nvar codeLowercaseE = 0x65; // \"e\"\nvar codeUppercaseF = 0x46; // \"F\"\nvar codeLowercaseF = 0x66; // \"f\"\n//# sourceMappingURL=parse.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS9wYXJzZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLHdCQUF3QiwyQkFBMkIsc0dBQXNHLHFCQUFxQixtQkFBbUIsOEhBQThIO0FBQy9ULG1DQUFtQztBQUNuQyxnQ0FBZ0M7QUFDaEMsa0RBQWtELGdCQUFnQixnRUFBZ0Usd0RBQXdELDZEQUE2RCxzREFBc0Q7QUFDN1Msa0NBQWtDO0FBQ2xDLG1DQUFtQztBQUNuQyx1Q0FBdUMsdURBQXVELHVDQUF1QyxTQUFTLHVCQUF1QjtBQUM1RztBQUNwQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1Asd0ZBQXdGLGtFQUFtQjtBQUMzRztBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixrREFBTTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsOERBQThELElBQUk7QUFDbEUsbURBQW1ELElBQUk7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLDZCQUE2QixLQUFLO0FBQ2xDLDZCQUE2QixLQUFLO0FBQ2xDLCtCQUErQjtBQUMvQiwrQkFBK0I7QUFDL0Isc0JBQXNCO0FBQ3RCLHVCQUF1QjtBQUN2QixtQkFBbUI7QUFDbkIsc0JBQXNCO0FBQ3RCLDhCQUE4QjtBQUM5QixxQkFBcUI7QUFDckIsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QixvQkFBb0I7QUFDcEIsc0JBQXNCO0FBQ2YsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydGljbGUtYXBwLy4vbm9kZV9tb2R1bGVzL3N0YXJrbmV0L25vZGVfbW9kdWxlcy9sb3NzbGVzcy1qc29uL2xpYi9lc20vcGFyc2UuanM/YTEwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfSwgX3R5cGVvZihvYmopOyB9XG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldOyByZXR1cm4gYXJyMjsgfVxuaW1wb3J0IHsgcGFyc2VMb3NzbGVzc051bWJlciB9IGZyb20gJy4vbnVtYmVyUGFyc2Vycy5qcyc7XG5pbXBvcnQgeyByZXZpdmUgfSBmcm9tICcuL3Jldml2ZS5qcyc7XG4vKipcbiAqIFRoZSBMb3NzbGVzc0pTT04ucGFyc2UoKSBtZXRob2QgcGFyc2VzIGEgc3RyaW5nIGFzIEpTT04sIG9wdGlvbmFsbHkgdHJhbnNmb3JtaW5nXG4gKiB0aGUgdmFsdWUgcHJvZHVjZWQgYnkgcGFyc2luZy5cbiAqXG4gKiBUaGUgcGFyc2VyIGlzIGJhc2VkIG9uIHRoZSBwYXJzZXIgb2YgVGFuIExpIEhvdSBzaGFyZWQgaW5cbiAqIGh0dHBzOi8vbGloYXV0YW4uY29tL2pzb24tcGFyc2VyLXdpdGgtamF2YXNjcmlwdC9cbiAqXG4gKiBAcGFyYW0gdGV4dFxuICogVGhlIHN0cmluZyB0byBwYXJzZSBhcyBKU09OLiBTZWUgdGhlIEpTT04gb2JqZWN0IGZvciBhIGRlc2NyaXB0aW9uIG9mIEpTT04gc3ludGF4LlxuICpcbiAqIEBwYXJhbSBbcmV2aXZlcl1cbiAqIElmIGEgZnVuY3Rpb24sIHByZXNjcmliZXMgaG93IHRoZSB2YWx1ZSBvcmlnaW5hbGx5IHByb2R1Y2VkIGJ5IHBhcnNpbmcgaXNcbiAqIHRyYW5zZm9ybWVkLCBiZWZvcmUgYmVpbmcgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIFtwYXJzZU51bWJlcj1wYXJzZUxvc3NsZXNzTnVtYmVyXVxuICogUGFzcyBhIGN1c3RvbSBudW1iZXIgcGFyc2VyLiBJbnB1dCBpcyBhIHN0cmluZywgYW5kIHRoZSBvdXRwdXQgY2FuIGJlIHVua25vd25cbiAqIG51bWVyaWMgdmFsdWU6IG51bWJlciwgYmlnaW50LCBMb3NzbGVzc051bWJlciwgb3IgYSBjdXN0b20gQmlnTnVtYmVyIGxpYnJhcnkuXG4gKlxuICogQHJldHVybnMgUmV0dXJucyB0aGUgT2JqZWN0IGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIEpTT04gdGV4dC5cbiAqXG4gKiBAdGhyb3dzIFRocm93cyBhIFN5bnRheEVycm9yIGV4Y2VwdGlvbiBpZiB0aGUgc3RyaW5nIHRvIHBhcnNlIGlzIG5vdCB2YWxpZCBKU09OLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UodGV4dCwgcmV2aXZlcikge1xuICB2YXIgcGFyc2VOdW1iZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHBhcnNlTG9zc2xlc3NOdW1iZXI7XG4gIHZhciBpID0gMDtcbiAgdmFyIHZhbHVlID0gcGFyc2VWYWx1ZSgpO1xuICBleHBlY3RWYWx1ZSh2YWx1ZSk7XG4gIGV4cGVjdEVuZE9mSW5wdXQoKTtcbiAgcmV0dXJuIHJldml2ZXIgPyByZXZpdmUodmFsdWUsIHJldml2ZXIpIDogdmFsdWU7XG4gIGZ1bmN0aW9uIHBhcnNlT2JqZWN0KCkge1xuICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaSkgPT09IGNvZGVPcGVuaW5nQnJhY2UpIHtcbiAgICAgIGkrKztcbiAgICAgIHNraXBXaGl0ZXNwYWNlKCk7XG4gICAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgICB2YXIgaW5pdGlhbCA9IHRydWU7XG4gICAgICB3aGlsZSAoaSA8IHRleHQubGVuZ3RoICYmIHRleHQuY2hhckNvZGVBdChpKSAhPT0gY29kZUNsb3NpbmdCcmFjZSkge1xuICAgICAgICBpZiAoIWluaXRpYWwpIHtcbiAgICAgICAgICBlYXRDb21tYSgpO1xuICAgICAgICAgIHNraXBXaGl0ZXNwYWNlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5pdGlhbCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdGFydCA9IGk7XG4gICAgICAgIHZhciBrZXkgPSBwYXJzZVN0cmluZygpO1xuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvd09iamVjdEtleUV4cGVjdGVkKCk7XG4gICAgICAgIH1cbiAgICAgICAgc2tpcFdoaXRlc3BhY2UoKTtcbiAgICAgICAgZWF0Q29sb24oKTtcbiAgICAgICAgdmFyIF92YWx1ZSA9IHBhcnNlVmFsdWUoKTtcbiAgICAgICAgaWYgKF92YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3dPYmplY3RWYWx1ZUV4cGVjdGVkKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPOiB0ZXN0IGRlZXAgZXF1YWwgaW5zdGVhZCBvZiBzdHJpY3QgZXF1YWxcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgIWlzRGVlcEVxdWFsKF92YWx1ZSwgb2JqZWN0W2tleV0pKSB7XG4gICAgICAgICAgLy8gTm90ZSB0aGF0IHdlIGNvdWxkIGFsc28gdGVzdCBgaWYoa2V5IGluIG9iamVjdCkgey4uLn1gXG4gICAgICAgICAgLy8gb3IgYGlmIChvYmplY3Rba2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHsuLi59YCwgYnV0IHRoYXQgaXMgc2xvd2VyLlxuICAgICAgICAgIHRocm93RHVwbGljYXRlS2V5KGtleSwgc3RhcnQgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3Rba2V5XSA9IF92YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaSkgIT09IGNvZGVDbG9zaW5nQnJhY2UpIHtcbiAgICAgICAgdGhyb3dPYmplY3RLZXlPckVuZEV4cGVjdGVkKCk7XG4gICAgICB9XG4gICAgICBpKys7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBwYXJzZUFycmF5KCkge1xuICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaSkgPT09IGNvZGVPcGVuaW5nQnJhY2tldCkge1xuICAgICAgaSsrO1xuICAgICAgc2tpcFdoaXRlc3BhY2UoKTtcbiAgICAgIHZhciBhcnJheSA9IFtdO1xuICAgICAgdmFyIGluaXRpYWwgPSB0cnVlO1xuICAgICAgd2hpbGUgKGkgPCB0ZXh0Lmxlbmd0aCAmJiB0ZXh0LmNoYXJDb2RlQXQoaSkgIT09IGNvZGVDbG9zaW5nQnJhY2tldCkge1xuICAgICAgICBpZiAoIWluaXRpYWwpIHtcbiAgICAgICAgICBlYXRDb21tYSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluaXRpYWwgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX3ZhbHVlMiA9IHBhcnNlVmFsdWUoKTtcbiAgICAgICAgZXhwZWN0QXJyYXlJdGVtKF92YWx1ZTIpO1xuICAgICAgICBhcnJheS5wdXNoKF92YWx1ZTIpO1xuICAgICAgfVxuICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChpKSAhPT0gY29kZUNsb3NpbmdCcmFja2V0KSB7XG4gICAgICAgIHRocm93QXJyYXlJdGVtT3JFbmRFeHBlY3RlZCgpO1xuICAgICAgfVxuICAgICAgaSsrO1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBwYXJzZVZhbHVlKCkge1xuICAgIHZhciBfcmVmLCBfcmVmMiwgX3JlZjMsIF9yZWY0LCBfcmVmNSwgX3BhcnNlU3RyaW5nO1xuICAgIHNraXBXaGl0ZXNwYWNlKCk7XG4gICAgdmFyIHZhbHVlID0gKF9yZWYgPSAoX3JlZjIgPSAoX3JlZjMgPSAoX3JlZjQgPSAoX3JlZjUgPSAoX3BhcnNlU3RyaW5nID0gcGFyc2VTdHJpbmcoKSkgIT09IG51bGwgJiYgX3BhcnNlU3RyaW5nICE9PSB2b2lkIDAgPyBfcGFyc2VTdHJpbmcgOiBwYXJzZU51bWVyaWMoKSkgIT09IG51bGwgJiYgX3JlZjUgIT09IHZvaWQgMCA/IF9yZWY1IDogcGFyc2VPYmplY3QoKSkgIT09IG51bGwgJiYgX3JlZjQgIT09IHZvaWQgMCA/IF9yZWY0IDogcGFyc2VBcnJheSgpKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBwYXJzZUtleXdvcmQoJ3RydWUnLCB0cnVlKSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogcGFyc2VLZXl3b3JkKCdmYWxzZScsIGZhbHNlKSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IHBhcnNlS2V5d29yZCgnbnVsbCcsIG51bGwpO1xuICAgIHNraXBXaGl0ZXNwYWNlKCk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGZ1bmN0aW9uIHBhcnNlS2V5d29yZChuYW1lLCB2YWx1ZSkge1xuICAgIGlmICh0ZXh0LnNsaWNlKGksIGkgKyBuYW1lLmxlbmd0aCkgPT09IG5hbWUpIHtcbiAgICAgIGkgKz0gbmFtZS5sZW5ndGg7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHNraXBXaGl0ZXNwYWNlKCkge1xuICAgIHdoaWxlIChpc1doaXRlc3BhY2UodGV4dC5jaGFyQ29kZUF0KGkpKSkge1xuICAgICAgaSsrO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBwYXJzZVN0cmluZygpIHtcbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkpID09PSBjb2RlRG91YmxlUXVvdGUpIHtcbiAgICAgIGkrKztcbiAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgIHdoaWxlIChpIDwgdGV4dC5sZW5ndGggJiYgdGV4dC5jaGFyQ29kZUF0KGkpICE9PSBjb2RlRG91YmxlUXVvdGUpIHtcbiAgICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChpKSA9PT0gY29kZUJhY2tzbGFzaCkge1xuICAgICAgICAgIHZhciBjaGFyID0gdGV4dFtpICsgMV07XG4gICAgICAgICAgdmFyIGVzY2FwZUNoYXIgPSBlc2NhcGVDaGFyYWN0ZXJzW2NoYXJdO1xuICAgICAgICAgIGlmIChlc2NhcGVDaGFyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBlc2NhcGVDaGFyO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PT0gJ3UnKSB7XG4gICAgICAgICAgICBpZiAoaXNIZXgodGV4dC5jaGFyQ29kZUF0KGkgKyAyKSkgJiYgaXNIZXgodGV4dC5jaGFyQ29kZUF0KGkgKyAzKSkgJiYgaXNIZXgodGV4dC5jaGFyQ29kZUF0KGkgKyA0KSkgJiYgaXNIZXgodGV4dC5jaGFyQ29kZUF0KGkgKyA1KSkpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQodGV4dC5zbGljZShpICsgMiwgaSArIDYpLCAxNikpO1xuICAgICAgICAgICAgICBpICs9IDU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvd0ludmFsaWRVbmljb2RlQ2hhcmFjdGVyKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvd0ludmFsaWRFc2NhcGVDaGFyYWN0ZXIoaSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpc1ZhbGlkU3RyaW5nQ2hhcmFjdGVyKHRleHQuY2hhckNvZGVBdChpKSkpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSB0ZXh0W2ldO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvd0ludmFsaWRDaGFyYWN0ZXIodGV4dFtpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICAgIGV4cGVjdEVuZE9mU3RyaW5nKCk7XG4gICAgICBpKys7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBwYXJzZU51bWVyaWMoKSB7XG4gICAgdmFyIHN0YXJ0ID0gaTtcbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkpID09PSBjb2RlTWludXMpIHtcbiAgICAgIGkrKztcbiAgICAgIGV4cGVjdERpZ2l0KHN0YXJ0KTtcbiAgICB9XG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChpKSA9PT0gY29kZVplcm8pIHtcbiAgICAgIGkrKztcbiAgICB9IGVsc2UgaWYgKGlzTm9uWmVyb0RpZ2l0KHRleHQuY2hhckNvZGVBdChpKSkpIHtcbiAgICAgIGkrKztcbiAgICAgIHdoaWxlIChpc0RpZ2l0KHRleHQuY2hhckNvZGVBdChpKSkpIHtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkpID09PSBjb2RlRG90KSB7XG4gICAgICBpKys7XG4gICAgICBleHBlY3REaWdpdChzdGFydCk7XG4gICAgICB3aGlsZSAoaXNEaWdpdCh0ZXh0LmNoYXJDb2RlQXQoaSkpKSB7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChpKSA9PT0gY29kZUxvd2VyY2FzZUUgfHwgdGV4dC5jaGFyQ29kZUF0KGkpID09PSBjb2RlVXBwZXJjYXNlRSkge1xuICAgICAgaSsrO1xuICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChpKSA9PT0gY29kZU1pbnVzIHx8IHRleHQuY2hhckNvZGVBdChpKSA9PT0gY29kZVBsdXMpIHtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgICAgZXhwZWN0RGlnaXQoc3RhcnQpO1xuICAgICAgd2hpbGUgKGlzRGlnaXQodGV4dC5jaGFyQ29kZUF0KGkpKSkge1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpID4gc3RhcnQpIHtcbiAgICAgIHJldHVybiBwYXJzZU51bWJlcih0ZXh0LnNsaWNlKHN0YXJ0LCBpKSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGVhdENvbW1hKCkge1xuICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaSkgIT09IGNvZGVDb21tYSkge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiQ29tbWEgJywnIGV4cGVjdGVkIGFmdGVyIHZhbHVlIFwiLmNvbmNhdChnb3RBdCgpKSk7XG4gICAgfVxuICAgIGkrKztcbiAgfVxuICBmdW5jdGlvbiBlYXRDb2xvbigpIHtcbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkpICE9PSBjb2RlQ29sb24pIHtcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIkNvbG9uICc6JyBleHBlY3RlZCBhZnRlciBwcm9wZXJ0eSBuYW1lIFwiLmNvbmNhdChnb3RBdCgpKSk7XG4gICAgfVxuICAgIGkrKztcbiAgfVxuICBmdW5jdGlvbiBleHBlY3RWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJKU09OIHZhbHVlIGV4cGVjdGVkIFwiLmNvbmNhdChnb3RBdCgpKSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGV4cGVjdEFycmF5SXRlbSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJBcnJheSBpdGVtIGV4cGVjdGVkIFwiLmNvbmNhdChnb3RBdCgpKSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGV4cGVjdEVuZE9mSW5wdXQoKSB7XG4gICAgaWYgKGkgPCB0ZXh0Lmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiRXhwZWN0ZWQgZW5kIG9mIGlucHV0IFwiLmNvbmNhdChnb3RBdCgpKSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGV4cGVjdERpZ2l0KHN0YXJ0KSB7XG4gICAgaWYgKCFpc0RpZ2l0KHRleHQuY2hhckNvZGVBdChpKSkpIHtcbiAgICAgIHZhciBudW1Tb0ZhciA9IHRleHQuc2xpY2Uoc3RhcnQsIGkpO1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiSW52YWxpZCBudW1iZXIgJ1wiLmNvbmNhdChudW1Tb0ZhciwgXCInLCBleHBlY3RpbmcgYSBkaWdpdCBcIikuY29uY2F0KGdvdEF0KCkpKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZXhwZWN0RW5kT2ZTdHJpbmcoKSB7XG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChpKSAhPT0gY29kZURvdWJsZVF1b3RlKSB7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJFbmQgb2Ygc3RyaW5nICdcXFwiJyBleHBlY3RlZCBcIi5jb25jYXQoZ290QXQoKSkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB0aHJvd09iamVjdEtleUV4cGVjdGVkKCkge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIlF1b3RlZCBvYmplY3Qga2V5IGV4cGVjdGVkIFwiLmNvbmNhdChnb3RBdCgpKSk7XG4gIH1cbiAgZnVuY3Rpb24gdGhyb3dEdXBsaWNhdGVLZXkoa2V5LCBwb3MpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJEdXBsaWNhdGUga2V5ICdcIi5jb25jYXQoa2V5LCBcIicgZW5jb3VudGVyZWQgYXQgcG9zaXRpb24gXCIpLmNvbmNhdChwb3MpKTtcbiAgfVxuICBmdW5jdGlvbiB0aHJvd09iamVjdEtleU9yRW5kRXhwZWN0ZWQoKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiUXVvdGVkIG9iamVjdCBrZXkgb3IgZW5kIG9mIG9iamVjdCAnfScgZXhwZWN0ZWQgXCIuY29uY2F0KGdvdEF0KCkpKTtcbiAgfVxuICBmdW5jdGlvbiB0aHJvd0FycmF5SXRlbU9yRW5kRXhwZWN0ZWQoKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiQXJyYXkgaXRlbSBvciBlbmQgb2YgYXJyYXkgJ10nIGV4cGVjdGVkIFwiLmNvbmNhdChnb3RBdCgpKSk7XG4gIH1cbiAgZnVuY3Rpb24gdGhyb3dJbnZhbGlkQ2hhcmFjdGVyKGNoYXIpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJJbnZhbGlkIGNoYXJhY3RlciAnXCIuY29uY2F0KGNoYXIsIFwiJyBcIikuY29uY2F0KHBvcygpKSk7XG4gIH1cbiAgZnVuY3Rpb24gdGhyb3dJbnZhbGlkRXNjYXBlQ2hhcmFjdGVyKHN0YXJ0KSB7XG4gICAgdmFyIGNoYXJzID0gdGV4dC5zbGljZShzdGFydCwgc3RhcnQgKyAyKTtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJJbnZhbGlkIGVzY2FwZSBjaGFyYWN0ZXIgJ1wiLmNvbmNhdChjaGFycywgXCInIFwiKS5jb25jYXQocG9zKCkpKTtcbiAgfVxuICBmdW5jdGlvbiB0aHJvd09iamVjdFZhbHVlRXhwZWN0ZWQoKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiT2JqZWN0IHZhbHVlIGV4cGVjdGVkIGFmdGVyICc6JyBcIi5jb25jYXQocG9zKCkpKTtcbiAgfVxuICBmdW5jdGlvbiB0aHJvd0ludmFsaWRVbmljb2RlQ2hhcmFjdGVyKHN0YXJ0KSB7XG4gICAgdmFyIGVuZCA9IHN0YXJ0ICsgMjtcbiAgICB3aGlsZSAoL1xcdy8udGVzdCh0ZXh0W2VuZF0pKSB7XG4gICAgICBlbmQrKztcbiAgICB9XG4gICAgdmFyIGNoYXJzID0gdGV4dC5zbGljZShzdGFydCwgZW5kKTtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJJbnZhbGlkIHVuaWNvZGUgY2hhcmFjdGVyICdcIi5jb25jYXQoY2hhcnMsIFwiJyBcIikuY29uY2F0KHBvcygpKSk7XG4gIH1cblxuICAvLyB6ZXJvIGJhc2VkIGNoYXJhY3RlciBwb3NpdGlvblxuICBmdW5jdGlvbiBwb3MoKSB7XG4gICAgcmV0dXJuIFwiYXQgcG9zaXRpb24gXCIuY29uY2F0KGkpO1xuICB9XG4gIGZ1bmN0aW9uIGdvdCgpIHtcbiAgICByZXR1cm4gaSA8IHRleHQubGVuZ3RoID8gXCJidXQgZ290ICdcIi5jb25jYXQodGV4dFtpXSwgXCInXCIpIDogJ2J1dCByZWFjaGVkIGVuZCBvZiBpbnB1dCc7XG4gIH1cbiAgZnVuY3Rpb24gZ290QXQoKSB7XG4gICAgcmV0dXJuIGdvdCgpICsgJyAnICsgcG9zKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZShjb2RlKSB7XG4gIHJldHVybiBjb2RlID09PSBjb2RlU3BhY2UgfHwgY29kZSA9PT0gY29kZU5ld2xpbmUgfHwgY29kZSA9PT0gY29kZVRhYiB8fCBjb2RlID09PSBjb2RlUmV0dXJuO1xufVxuZnVuY3Rpb24gaXNIZXgoY29kZSkge1xuICByZXR1cm4gY29kZSA+PSBjb2RlWmVybyAmJiBjb2RlIDw9IGNvZGVOaW5lIHx8IGNvZGUgPj0gY29kZVVwcGVyY2FzZUEgJiYgY29kZSA8PSBjb2RlVXBwZXJjYXNlRiB8fCBjb2RlID49IGNvZGVMb3dlcmNhc2VBICYmIGNvZGUgPD0gY29kZUxvd2VyY2FzZUY7XG59XG5mdW5jdGlvbiBpc0RpZ2l0KGNvZGUpIHtcbiAgcmV0dXJuIGNvZGUgPj0gY29kZVplcm8gJiYgY29kZSA8PSBjb2RlTmluZTtcbn1cbmZ1bmN0aW9uIGlzTm9uWmVyb0RpZ2l0KGNvZGUpIHtcbiAgcmV0dXJuIGNvZGUgPj0gY29kZU9uZSAmJiBjb2RlIDw9IGNvZGVOaW5lO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRTdHJpbmdDaGFyYWN0ZXIoY29kZSkge1xuICByZXR1cm4gY29kZSA+PSAweDIwICYmIGNvZGUgPD0gMHgxMGZmZmY7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNEZWVwRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGEpICYmIEFycmF5LmlzQXJyYXkoYikpIHtcbiAgICByZXR1cm4gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICByZXR1cm4gaXNEZWVwRXF1YWwoaXRlbSwgYltpbmRleF0pO1xuICAgIH0pO1xuICB9XG4gIGlmIChpc09iamVjdChhKSAmJiBpc09iamVjdChiKSkge1xuICAgIHZhciBrZXlzID0gX3RvQ29uc3VtYWJsZUFycmF5KG5ldyBTZXQoW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShPYmplY3Qua2V5cyhhKSksIF90b0NvbnN1bWFibGVBcnJheShPYmplY3Qua2V5cyhiKSkpKSk7XG4gICAgcmV0dXJuIGtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIGlzRGVlcEVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsO1xufVxuXG4vLyBtYXAgd2l0aCBhbGwgZXNjYXBlIGNoYXJhY3RlcnNcbnZhciBlc2NhcGVDaGFyYWN0ZXJzID0ge1xuICAnXCInOiAnXCInLFxuICAnXFxcXCc6ICdcXFxcJyxcbiAgJy8nOiAnLycsXG4gIGI6ICdcXGInLFxuICBmOiAnXFxmJyxcbiAgbjogJ1xcbicsXG4gIHI6ICdcXHInLFxuICB0OiAnXFx0J1xuICAvLyBub3RlIHRoYXQgXFx1IGlzIGhhbmRsZWQgc2VwYXJhdGVseSBpbiBwYXJzZVN0cmluZygpXG59O1xuXG52YXIgY29kZUJhY2tzbGFzaCA9IDB4NWM7IC8vIFwiXFxcIlxudmFyIGNvZGVPcGVuaW5nQnJhY2UgPSAweDdiOyAvLyBcIntcIlxudmFyIGNvZGVDbG9zaW5nQnJhY2UgPSAweDdkOyAvLyBcIn1cIlxudmFyIGNvZGVPcGVuaW5nQnJhY2tldCA9IDB4NWI7IC8vIFwiW1wiXG52YXIgY29kZUNsb3NpbmdCcmFja2V0ID0gMHg1ZDsgLy8gXCJdXCJcbnZhciBjb2RlU3BhY2UgPSAweDIwOyAvLyBcIiBcIlxudmFyIGNvZGVOZXdsaW5lID0gMHhhOyAvLyBcIlxcblwiXG52YXIgY29kZVRhYiA9IDB4OTsgLy8gXCJcXHRcIlxudmFyIGNvZGVSZXR1cm4gPSAweGQ7IC8vIFwiXFxyXCJcbnZhciBjb2RlRG91YmxlUXVvdGUgPSAweDAwMjI7IC8vIFwiXG52YXIgY29kZVBsdXMgPSAweDJiOyAvLyBcIitcIlxudmFyIGNvZGVNaW51cyA9IDB4MmQ7IC8vIFwiLVwiXG52YXIgY29kZVplcm8gPSAweDMwO1xudmFyIGNvZGVPbmUgPSAweDMxO1xudmFyIGNvZGVOaW5lID0gMHgzOTtcbnZhciBjb2RlQ29tbWEgPSAweDJjOyAvLyBcIixcIlxudmFyIGNvZGVEb3QgPSAweDJlOyAvLyBcIi5cIiAoZG90LCBwZXJpb2QpXG52YXIgY29kZUNvbG9uID0gMHgzYTsgLy8gXCI6XCJcbmV4cG9ydCB2YXIgY29kZVVwcGVyY2FzZUEgPSAweDQxOyAvLyBcIkFcIlxuZXhwb3J0IHZhciBjb2RlTG93ZXJjYXNlQSA9IDB4NjE7IC8vIFwiYVwiXG5leHBvcnQgdmFyIGNvZGVVcHBlcmNhc2VFID0gMHg0NTsgLy8gXCJFXCJcbmV4cG9ydCB2YXIgY29kZUxvd2VyY2FzZUUgPSAweDY1OyAvLyBcImVcIlxuZXhwb3J0IHZhciBjb2RlVXBwZXJjYXNlRiA9IDB4NDY7IC8vIFwiRlwiXG5leHBvcnQgdmFyIGNvZGVMb3dlcmNhc2VGID0gMHg2NjsgLy8gXCJmXCJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/revive.js":
/*!****************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/revive.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   revive: () => (/* binding */ revive)\n/* harmony export */ });\n/* harmony import */ var _LosslessNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LosslessNumber.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/LosslessNumber.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\n * Revive a json object.\n * Applies the reviver function recursively on all values in the JSON object.\n * @param json   A JSON Object, Array, or value\n * @param reviver\n *              A reviver function invoked with arguments `key` and `value`,\n *              which must return a replacement value. The function context\n *              (`this`) is the Object or Array that contains the currently\n *              handled value.\n */\nfunction revive(json, reviver) {\n  return reviveValue({\n    '': json\n  }, '', json, reviver);\n}\n\n/**\n * Revive a value\n */\nfunction reviveValue(context, key, value, reviver) {\n  if (Array.isArray(value)) {\n    return reviver.call(context, key, reviveArray(value, reviver));\n  } else if (value && _typeof(value) === 'object' && !(0,_LosslessNumber_js__WEBPACK_IMPORTED_MODULE_0__.isLosslessNumber)(value)) {\n    // note the special case for LosslessNumber,\n    // we don't want to iterate over the internals of a LosslessNumber\n    return reviver.call(context, key, reviveObject(value, reviver));\n  } else {\n    return reviver.call(context, key, value);\n  }\n}\n\n/**\n * Revive the properties of an object\n */\nfunction reviveObject(object, reviver) {\n  Object.keys(object).forEach(function (key) {\n    var value = reviveValue(object, key, object[key], reviver);\n    if (value !== undefined) {\n      object[key] = value;\n    } else {\n      delete object[key];\n    }\n  });\n  return object;\n}\n\n/**\n * Revive the properties of an Array\n */\nfunction reviveArray(array, reviver) {\n  for (var i = 0; i < array.length; i++) {\n    array[i] = reviveValue(array, i + '', array[i], reviver);\n  }\n  return array;\n}\n//# sourceMappingURL=revive.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS9yZXZpdmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3QkFBd0IsMkJBQTJCLHNHQUFzRyxxQkFBcUIsbUJBQW1CLDhIQUE4SDtBQUN4UTtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGtEQUFrRCxvRUFBZ0I7QUFDdEU7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0aWNsZS1hcHAvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS9yZXZpdmUuanM/Yjc3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfSwgX3R5cGVvZihvYmopOyB9XG5pbXBvcnQgeyBpc0xvc3NsZXNzTnVtYmVyIH0gZnJvbSAnLi9Mb3NzbGVzc051bWJlci5qcyc7XG4vKipcbiAqIFJldml2ZSBhIGpzb24gb2JqZWN0LlxuICogQXBwbGllcyB0aGUgcmV2aXZlciBmdW5jdGlvbiByZWN1cnNpdmVseSBvbiBhbGwgdmFsdWVzIGluIHRoZSBKU09OIG9iamVjdC5cbiAqIEBwYXJhbSBqc29uICAgQSBKU09OIE9iamVjdCwgQXJyYXksIG9yIHZhbHVlXG4gKiBAcGFyYW0gcmV2aXZlclxuICogICAgICAgICAgICAgIEEgcmV2aXZlciBmdW5jdGlvbiBpbnZva2VkIHdpdGggYXJndW1lbnRzIGBrZXlgIGFuZCBgdmFsdWVgLFxuICogICAgICAgICAgICAgIHdoaWNoIG11c3QgcmV0dXJuIGEgcmVwbGFjZW1lbnQgdmFsdWUuIFRoZSBmdW5jdGlvbiBjb250ZXh0XG4gKiAgICAgICAgICAgICAgKGB0aGlzYCkgaXMgdGhlIE9iamVjdCBvciBBcnJheSB0aGF0IGNvbnRhaW5zIHRoZSBjdXJyZW50bHlcbiAqICAgICAgICAgICAgICBoYW5kbGVkIHZhbHVlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmV2aXZlKGpzb24sIHJldml2ZXIpIHtcbiAgcmV0dXJuIHJldml2ZVZhbHVlKHtcbiAgICAnJzoganNvblxuICB9LCAnJywganNvbiwgcmV2aXZlcik7XG59XG5cbi8qKlxuICogUmV2aXZlIGEgdmFsdWVcbiAqL1xuZnVuY3Rpb24gcmV2aXZlVmFsdWUoY29udGV4dCwga2V5LCB2YWx1ZSwgcmV2aXZlcikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gcmV2aXZlci5jYWxsKGNvbnRleHQsIGtleSwgcmV2aXZlQXJyYXkodmFsdWUsIHJldml2ZXIpKTtcbiAgfSBlbHNlIGlmICh2YWx1ZSAmJiBfdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcgJiYgIWlzTG9zc2xlc3NOdW1iZXIodmFsdWUpKSB7XG4gICAgLy8gbm90ZSB0aGUgc3BlY2lhbCBjYXNlIGZvciBMb3NzbGVzc051bWJlcixcbiAgICAvLyB3ZSBkb24ndCB3YW50IHRvIGl0ZXJhdGUgb3ZlciB0aGUgaW50ZXJuYWxzIG9mIGEgTG9zc2xlc3NOdW1iZXJcbiAgICByZXR1cm4gcmV2aXZlci5jYWxsKGNvbnRleHQsIGtleSwgcmV2aXZlT2JqZWN0KHZhbHVlLCByZXZpdmVyKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJldml2ZXIuY2FsbChjb250ZXh0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG4vKipcbiAqIFJldml2ZSB0aGUgcHJvcGVydGllcyBvZiBhbiBvYmplY3RcbiAqL1xuZnVuY3Rpb24gcmV2aXZlT2JqZWN0KG9iamVjdCwgcmV2aXZlcikge1xuICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHJldml2ZVZhbHVlKG9iamVjdCwga2V5LCBvYmplY3Rba2V5XSwgcmV2aXZlcik7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSBvYmplY3Rba2V5XTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb2JqZWN0O1xufVxuXG4vKipcbiAqIFJldml2ZSB0aGUgcHJvcGVydGllcyBvZiBhbiBBcnJheVxuICovXG5mdW5jdGlvbiByZXZpdmVBcnJheShhcnJheSwgcmV2aXZlcikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgYXJyYXlbaV0gPSByZXZpdmVWYWx1ZShhcnJheSwgaSArICcnLCBhcnJheVtpXSwgcmV2aXZlcik7XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmV2aXZlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/revive.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/reviveDate.js":
/*!********************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/reviveDate.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   reviveDate: () => (/* binding */ reviveDate)\n/* harmony export */ });\n/**\n * Revive a string containing an ISO 8601 date string into a JavaScript `Date` object\n */\nfunction reviveDate(key, value) {\n  return typeof value === 'string' && isoDateRegex.test(value) ? new Date(value) : value;\n}\n\n// Matches strings like \"2022-08-25T09:39:19.288Z\"\nvar isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\n//# sourceMappingURL=reviveDate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS9yZXZpdmVEYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtBQUMvRCIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0aWNsZS1hcHAvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS9yZXZpdmVEYXRlLmpzP2M2ODkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXZpdmUgYSBzdHJpbmcgY29udGFpbmluZyBhbiBJU08gODYwMSBkYXRlIHN0cmluZyBpbnRvIGEgSmF2YVNjcmlwdCBgRGF0ZWAgb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXZpdmVEYXRlKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgaXNvRGF0ZVJlZ2V4LnRlc3QodmFsdWUpID8gbmV3IERhdGUodmFsdWUpIDogdmFsdWU7XG59XG5cbi8vIE1hdGNoZXMgc3RyaW5ncyBsaWtlIFwiMjAyMi0wOC0yNVQwOTozOToxOS4yODhaXCJcbnZhciBpc29EYXRlUmVnZXggPSAvXlxcZHs0fS1cXGR7Mn0tXFxkezJ9VFxcZHsyfTpcXGR7Mn06XFxkezJ9XFwuXFxkezN9WiQvO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmV2aXZlRGF0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/reviveDate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/stringify.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/stringify.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringify: () => (/* binding */ stringify)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/utils.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n\n/**\n * The LosslessJSON.stringify() method converts a JavaScript value to a JSON string,\n * optionally replacing values if a replacer function is specified, or\n * optionally including only the specified properties if a replacer array is specified.\n *\n * @param value\n * The value to convert to a JSON string.\n *\n * @param [replacer]\n * A function that alters the behavior of the stringification process,\n * or an array of String and Number objects that serve as a whitelist for\n * selecting the properties of the value object to be included in the JSON string.\n * If this value is null or not provided, all properties of the object are\n * included in the resulting JSON string.\n *\n * @param [space]\n * A String or Number object that's used to insert white space into the output\n * JSON string for readability purposes. If this is a Number, it indicates the\n * number of space characters to use as white space; this number is capped at 10\n * if it's larger than that. Values less than 1 indicate that no space should be\n * used. If this is a String, the string (or the first 10 characters of the string,\n * if it's longer than that) is used as white space. If this parameter is not\n * provided (or is null), no white space is used.\n *\n * @param [numberStringifiers]\n * An optional list with additional number stringifiers, for example to serialize\n * a BigNumber. The output of the function must be valid stringified JSON.\n * When `undefined` is returned, the property will be deleted from the object.\n * The difference with using a `replacer` is that the output of a `replacer`\n * must be JSON and will be stringified afterwards, whereas the output of the\n * `numberStringifiers` is already stringified JSON.\n *\n * @returns Returns the string representation of the JSON object.\n */\nfunction stringify(value, replacer, space, numberStringifiers) {\n  var resolvedSpace = resolveSpace(space);\n  var replacedValue = typeof replacer === 'function' ? replacer.call({\n    '': value\n  }, '', value) : value;\n  return stringifyValue(replacedValue, '');\n\n  /**\n   * Stringify a value\n   */\n  function stringifyValue(value, indent) {\n    if (Array.isArray(numberStringifiers)) {\n      var stringifier = numberStringifiers.find(function (item) {\n        return item.test(value);\n      });\n      if (stringifier) {\n        var str = stringifier.stringify(value);\n        if (typeof str !== 'string' || !(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(str)) {\n          throw new Error('Invalid JSON number: ' + 'output of a number stringifier must be a string containing a JSON number ' + \"(output: \".concat(str, \")\"));\n        }\n        return str;\n      }\n    }\n\n    // boolean, null, number, string, or date\n    if (typeof value === 'boolean' || typeof value === 'number' || typeof value === 'string' || value === null || value instanceof Date || value instanceof Boolean || value instanceof Number || value instanceof String) {\n      return JSON.stringify(value);\n    }\n\n    // lossless number, the secret ingredient :)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    if (value && value.isLosslessNumber) {\n      return value.toString();\n    }\n\n    // BigInt\n    if (typeof value === 'bigint') {\n      return value.toString();\n    }\n\n    // Array\n    if (Array.isArray(value)) {\n      return stringifyArray(value, indent);\n    }\n\n    // Object (test lastly!)\n    if (value && _typeof(value) === 'object') {\n      return stringifyObject(value, indent);\n    }\n    return undefined;\n  }\n\n  /**\n   * Stringify an array\n   */\n  function stringifyArray(array, indent) {\n    if (array.length === 0) {\n      return '[]';\n    }\n    var childIndent = resolvedSpace ? indent + resolvedSpace : undefined;\n    var str = resolvedSpace ? '[\\n' : '[';\n    for (var i = 0; i < array.length; i++) {\n      var item = typeof replacer === 'function' ? replacer.call(array, String(i), array[i]) : array[i];\n      if (resolvedSpace) {\n        str += childIndent;\n      }\n      if (typeof item !== 'undefined' && typeof item !== 'function') {\n        str += stringifyValue(item, childIndent);\n      } else {\n        str += 'null';\n      }\n      if (i < array.length - 1) {\n        str += resolvedSpace ? ',\\n' : ',';\n      }\n    }\n    str += resolvedSpace ? '\\n' + indent + ']' : ']';\n    return str;\n  }\n\n  /**\n   * Stringify an object\n   */\n  function stringifyObject(object, indent) {\n    if (typeof object.toJSON === 'function') {\n      return stringify(object.toJSON(), replacer, space, undefined);\n    }\n    var keys = Array.isArray(replacer) ? replacer.map(String) : Object.keys(object);\n    if (keys.length === 0) {\n      return '{}';\n    }\n    var childIndent = resolvedSpace ? indent + resolvedSpace : undefined;\n    var first = true;\n    var str = resolvedSpace ? '{\\n' : '{';\n    keys.forEach(function (key) {\n      var value = typeof replacer === 'function' ? replacer.call(object, key, object[key]) : object[key];\n      if (includeProperty(key, value)) {\n        if (first) {\n          first = false;\n        } else {\n          str += resolvedSpace ? ',\\n' : ',';\n        }\n        var keyStr = JSON.stringify(key);\n        str += resolvedSpace ? childIndent + keyStr + ': ' : keyStr + ':';\n        str += stringifyValue(value, childIndent);\n      }\n    });\n    str += resolvedSpace ? '\\n' + indent + '}' : '}';\n    return str;\n  }\n\n  /**\n   * Test whether to include a property in a stringified object or not.\n   */\n  function includeProperty(key, value) {\n    return typeof value !== 'undefined' && typeof value !== 'function' && _typeof(value) !== 'symbol';\n  }\n}\n\n/**\n * Resolve a JSON stringify space:\n * replace a number with a string containing that number of spaces\n */\nfunction resolveSpace(space) {\n  if (typeof space === 'number') {\n    return ' '.repeat(space);\n  }\n  if (typeof space === 'string' && space !== '') {\n    return space;\n  }\n  return undefined;\n}\n//# sourceMappingURL=stringify.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/stringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/types.js":
/*!***************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/types.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiO0FBQVU7QUFDViIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0aWNsZS1hcHAvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS90eXBlcy5qcz85NDBjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/utils.js":
/*!***************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/utils.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UnsafeNumberReason: () => (/* binding */ UnsafeNumberReason),\n/* harmony export */   extractSignificantDigits: () => (/* binding */ extractSignificantDigits),\n/* harmony export */   getUnsafeNumberReason: () => (/* binding */ getUnsafeNumberReason),\n/* harmony export */   isInteger: () => (/* binding */ isInteger),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isSafeNumber: () => (/* binding */ isSafeNumber),\n/* harmony export */   toSafeNumberOrThrow: () => (/* binding */ toSafeNumberOrThrow)\n/* harmony export */ });\n/**\n * Test whether a string contains an integer number\n */\nfunction isInteger(value) {\n  return INTEGER_REGEX.test(value);\n}\nvar INTEGER_REGEX = /^-?[0-9]+$/;\n\n/**\n * Test whether a string contains a number\n * http://stackoverflow.com/questions/13340717/json-numbers-regular-expression\n */\nfunction isNumber(value) {\n  return NUMBER_REGEX.test(value);\n}\nvar NUMBER_REGEX = /^-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?$/;\n\n/**\n * Test whether a string can be safely represented with a number\n * without information loss.\n *\n * When approx is true, floating point numbers that lose a few digits but\n * are still approximately equal in value are considered safe too.\n * Integer numbers must still be exactly equal.\n */\nfunction isSafeNumber(value, config) {\n  var num = parseFloat(value);\n  var str = String(num);\n  var v = extractSignificantDigits(value);\n  var s = extractSignificantDigits(str);\n  if (v === s) {\n    return true;\n  }\n  if ((config === null || config === void 0 ? void 0 : config.approx) === true) {\n    // A value is approximately equal when:\n    // 1. it is a floating point number, not an integer\n    // 2. it has at least 14 digits\n    // 3. the first 14 digits are equal\n    var requiredDigits = 14;\n    if (!isInteger(value) && s.length >= requiredDigits && v.startsWith(s.substring(0, requiredDigits))) {\n      return true;\n    }\n  }\n  return false;\n}\nvar UnsafeNumberReason = /*#__PURE__*/function (UnsafeNumberReason) {\n  UnsafeNumberReason[\"underflow\"] = \"underflow\";\n  UnsafeNumberReason[\"overflow\"] = \"overflow\";\n  UnsafeNumberReason[\"truncate_integer\"] = \"truncate_integer\";\n  UnsafeNumberReason[\"truncate_float\"] = \"truncate_float\";\n  return UnsafeNumberReason;\n}({});\n\n/**\n * When the provided value is an unsafe number, describe what the reason is:\n * overflow, underflow, truncate_integer, or truncate_float.\n * Returns undefined when the value is safe.\n */\nfunction getUnsafeNumberReason(value) {\n  if (isSafeNumber(value, {\n    approx: false\n  })) {\n    return undefined;\n  }\n  if (isInteger(value)) {\n    return UnsafeNumberReason.truncate_integer;\n  }\n  var num = parseFloat(value);\n  if (!isFinite(num)) {\n    return UnsafeNumberReason.overflow;\n  }\n  if (num === 0) {\n    return UnsafeNumberReason.underflow;\n  }\n  return UnsafeNumberReason.truncate_float;\n}\n\n/**\n * Convert a string into a number when it is safe to do so.\n * Throws an error otherwise, explaining the reason.\n */\nfunction toSafeNumberOrThrow(value, config) {\n  var number = parseFloat(value);\n  var unsafeReason = getUnsafeNumberReason(value);\n  if ((config === null || config === void 0 ? void 0 : config.approx) === true ? unsafeReason && unsafeReason !== UnsafeNumberReason.truncate_float : unsafeReason) {\n    var unsafeReasonText = unsafeReason.replace(/_\\w+$/, '');\n    throw new Error('Cannot safely convert to number: ' + \"the value '\".concat(value, \"' would \").concat(unsafeReasonText, \" and become \").concat(number));\n  }\n  return number;\n}\n\n/**\n * Get the significant digits of a number.\n *\n * For example:\n *   '2.34' returns '234'\n *   '-77' returns '77'\n *   '0.003400' returns '34'\n *   '120.5e+30' returns '1205'\n **/\nfunction extractSignificantDigits(value) {\n  return value\n  // from \"-0.250e+30\" to \"-0.250\"\n  .replace(EXPONENTIAL_PART_REGEX, '')\n\n  // from \"-0.250\" to \"-0250\"\n  .replace(DOT_REGEX, '')\n\n  // from \"-0250\" to \"-025\"\n  .replace(TRAILING_ZEROS_REGEX, '')\n\n  // from \"-025\" to \"25\"\n  .replace(LEADING_MINUS_AND_ZEROS_REGEX, '');\n}\nvar EXPONENTIAL_PART_REGEX = /[eE][+-]?\\d+$/;\nvar LEADING_MINUS_AND_ZEROS_REGEX = /^-?(0*)?/;\nvar DOT_REGEX = /\\./;\nvar TRAILING_ZEROS_REGEX = /0+$/;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsR0FBRzs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydGljbGUtYXBwLy4vbm9kZV9tb2R1bGVzL3N0YXJrbmV0L25vZGVfbW9kdWxlcy9sb3NzbGVzcy1qc29uL2xpYi9lc20vdXRpbHMuanM/ODkzYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlc3Qgd2hldGhlciBhIHN0cmluZyBjb250YWlucyBhbiBpbnRlZ2VyIG51bWJlclxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gIHJldHVybiBJTlRFR0VSX1JFR0VYLnRlc3QodmFsdWUpO1xufVxudmFyIElOVEVHRVJfUkVHRVggPSAvXi0/WzAtOV0rJC87XG5cbi8qKlxuICogVGVzdCB3aGV0aGVyIGEgc3RyaW5nIGNvbnRhaW5zIGEgbnVtYmVyXG4gKiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEzMzQwNzE3L2pzb24tbnVtYmVycy1yZWd1bGFyLWV4cHJlc3Npb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiBOVU1CRVJfUkVHRVgudGVzdCh2YWx1ZSk7XG59XG52YXIgTlVNQkVSX1JFR0VYID0gL14tPyg/OjB8WzEtOV1cXGQqKSg/OlxcLlxcZCspPyg/OltlRV1bKy1dP1xcZCspPyQvO1xuXG4vKipcbiAqIFRlc3Qgd2hldGhlciBhIHN0cmluZyBjYW4gYmUgc2FmZWx5IHJlcHJlc2VudGVkIHdpdGggYSBudW1iZXJcbiAqIHdpdGhvdXQgaW5mb3JtYXRpb24gbG9zcy5cbiAqXG4gKiBXaGVuIGFwcHJveCBpcyB0cnVlLCBmbG9hdGluZyBwb2ludCBudW1iZXJzIHRoYXQgbG9zZSBhIGZldyBkaWdpdHMgYnV0XG4gKiBhcmUgc3RpbGwgYXBwcm94aW1hdGVseSBlcXVhbCBpbiB2YWx1ZSBhcmUgY29uc2lkZXJlZCBzYWZlIHRvby5cbiAqIEludGVnZXIgbnVtYmVycyBtdXN0IHN0aWxsIGJlIGV4YWN0bHkgZXF1YWwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NhZmVOdW1iZXIodmFsdWUsIGNvbmZpZykge1xuICB2YXIgbnVtID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIHZhciBzdHIgPSBTdHJpbmcobnVtKTtcbiAgdmFyIHYgPSBleHRyYWN0U2lnbmlmaWNhbnREaWdpdHModmFsdWUpO1xuICB2YXIgcyA9IGV4dHJhY3RTaWduaWZpY2FudERpZ2l0cyhzdHIpO1xuICBpZiAodiA9PT0gcykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICgoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLmFwcHJveCkgPT09IHRydWUpIHtcbiAgICAvLyBBIHZhbHVlIGlzIGFwcHJveGltYXRlbHkgZXF1YWwgd2hlbjpcbiAgICAvLyAxLiBpdCBpcyBhIGZsb2F0aW5nIHBvaW50IG51bWJlciwgbm90IGFuIGludGVnZXJcbiAgICAvLyAyLiBpdCBoYXMgYXQgbGVhc3QgMTQgZGlnaXRzXG4gICAgLy8gMy4gdGhlIGZpcnN0IDE0IGRpZ2l0cyBhcmUgZXF1YWxcbiAgICB2YXIgcmVxdWlyZWREaWdpdHMgPSAxNDtcbiAgICBpZiAoIWlzSW50ZWdlcih2YWx1ZSkgJiYgcy5sZW5ndGggPj0gcmVxdWlyZWREaWdpdHMgJiYgdi5zdGFydHNXaXRoKHMuc3Vic3RyaW5nKDAsIHJlcXVpcmVkRGlnaXRzKSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgdmFyIFVuc2FmZU51bWJlclJlYXNvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoVW5zYWZlTnVtYmVyUmVhc29uKSB7XG4gIFVuc2FmZU51bWJlclJlYXNvbltcInVuZGVyZmxvd1wiXSA9IFwidW5kZXJmbG93XCI7XG4gIFVuc2FmZU51bWJlclJlYXNvbltcIm92ZXJmbG93XCJdID0gXCJvdmVyZmxvd1wiO1xuICBVbnNhZmVOdW1iZXJSZWFzb25bXCJ0cnVuY2F0ZV9pbnRlZ2VyXCJdID0gXCJ0cnVuY2F0ZV9pbnRlZ2VyXCI7XG4gIFVuc2FmZU51bWJlclJlYXNvbltcInRydW5jYXRlX2Zsb2F0XCJdID0gXCJ0cnVuY2F0ZV9mbG9hdFwiO1xuICByZXR1cm4gVW5zYWZlTnVtYmVyUmVhc29uO1xufSh7fSk7XG5cbi8qKlxuICogV2hlbiB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgYW4gdW5zYWZlIG51bWJlciwgZGVzY3JpYmUgd2hhdCB0aGUgcmVhc29uIGlzOlxuICogb3ZlcmZsb3csIHVuZGVyZmxvdywgdHJ1bmNhdGVfaW50ZWdlciwgb3IgdHJ1bmNhdGVfZmxvYXQuXG4gKiBSZXR1cm5zIHVuZGVmaW5lZCB3aGVuIHRoZSB2YWx1ZSBpcyBzYWZlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VW5zYWZlTnVtYmVyUmVhc29uKHZhbHVlKSB7XG4gIGlmIChpc1NhZmVOdW1iZXIodmFsdWUsIHtcbiAgICBhcHByb3g6IGZhbHNlXG4gIH0pKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoaXNJbnRlZ2VyKHZhbHVlKSkge1xuICAgIHJldHVybiBVbnNhZmVOdW1iZXJSZWFzb24udHJ1bmNhdGVfaW50ZWdlcjtcbiAgfVxuICB2YXIgbnVtID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIGlmICghaXNGaW5pdGUobnVtKSkge1xuICAgIHJldHVybiBVbnNhZmVOdW1iZXJSZWFzb24ub3ZlcmZsb3c7XG4gIH1cbiAgaWYgKG51bSA9PT0gMCkge1xuICAgIHJldHVybiBVbnNhZmVOdW1iZXJSZWFzb24udW5kZXJmbG93O1xuICB9XG4gIHJldHVybiBVbnNhZmVOdW1iZXJSZWFzb24udHJ1bmNhdGVfZmxvYXQ7XG59XG5cbi8qKlxuICogQ29udmVydCBhIHN0cmluZyBpbnRvIGEgbnVtYmVyIHdoZW4gaXQgaXMgc2FmZSB0byBkbyBzby5cbiAqIFRocm93cyBhbiBlcnJvciBvdGhlcndpc2UsIGV4cGxhaW5pbmcgdGhlIHJlYXNvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvU2FmZU51bWJlck9yVGhyb3codmFsdWUsIGNvbmZpZykge1xuICB2YXIgbnVtYmVyID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIHZhciB1bnNhZmVSZWFzb24gPSBnZXRVbnNhZmVOdW1iZXJSZWFzb24odmFsdWUpO1xuICBpZiAoKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5hcHByb3gpID09PSB0cnVlID8gdW5zYWZlUmVhc29uICYmIHVuc2FmZVJlYXNvbiAhPT0gVW5zYWZlTnVtYmVyUmVhc29uLnRydW5jYXRlX2Zsb2F0IDogdW5zYWZlUmVhc29uKSB7XG4gICAgdmFyIHVuc2FmZVJlYXNvblRleHQgPSB1bnNhZmVSZWFzb24ucmVwbGFjZSgvX1xcdyskLywgJycpO1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHNhZmVseSBjb252ZXJ0IHRvIG51bWJlcjogJyArIFwidGhlIHZhbHVlICdcIi5jb25jYXQodmFsdWUsIFwiJyB3b3VsZCBcIikuY29uY2F0KHVuc2FmZVJlYXNvblRleHQsIFwiIGFuZCBiZWNvbWUgXCIpLmNvbmNhdChudW1iZXIpKTtcbiAgfVxuICByZXR1cm4gbnVtYmVyO1xufVxuXG4vKipcbiAqIEdldCB0aGUgc2lnbmlmaWNhbnQgZGlnaXRzIG9mIGEgbnVtYmVyLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICogICAnMi4zNCcgcmV0dXJucyAnMjM0J1xuICogICAnLTc3JyByZXR1cm5zICc3NydcbiAqICAgJzAuMDAzNDAwJyByZXR1cm5zICczNCdcbiAqICAgJzEyMC41ZSszMCcgcmV0dXJucyAnMTIwNSdcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0U2lnbmlmaWNhbnREaWdpdHModmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlXG4gIC8vIGZyb20gXCItMC4yNTBlKzMwXCIgdG8gXCItMC4yNTBcIlxuICAucmVwbGFjZShFWFBPTkVOVElBTF9QQVJUX1JFR0VYLCAnJylcblxuICAvLyBmcm9tIFwiLTAuMjUwXCIgdG8gXCItMDI1MFwiXG4gIC5yZXBsYWNlKERPVF9SRUdFWCwgJycpXG5cbiAgLy8gZnJvbSBcIi0wMjUwXCIgdG8gXCItMDI1XCJcbiAgLnJlcGxhY2UoVFJBSUxJTkdfWkVST1NfUkVHRVgsICcnKVxuXG4gIC8vIGZyb20gXCItMDI1XCIgdG8gXCIyNVwiXG4gIC5yZXBsYWNlKExFQURJTkdfTUlOVVNfQU5EX1pFUk9TX1JFR0VYLCAnJyk7XG59XG52YXIgRVhQT05FTlRJQUxfUEFSVF9SRUdFWCA9IC9bZUVdWystXT9cXGQrJC87XG52YXIgTEVBRElOR19NSU5VU19BTkRfWkVST1NfUkVHRVggPSAvXi0/KDAqKT8vO1xudmFyIERPVF9SRUdFWCA9IC9cXC4vO1xudmFyIFRSQUlMSU5HX1pFUk9TX1JFR0VYID0gLzArJC87XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/utils.js\n");

/***/ })

};
;